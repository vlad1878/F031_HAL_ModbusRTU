
F031_HAl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800494c  0800494c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800494c  0800494c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800494c  0800494c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004950  08004950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004954  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000074  080049c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080049c8  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d910  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002266  00000000  00000000  0002d9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c7b  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb8a  00000000  00000000  00041d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006065f  00000000  00000000  00050905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b0f64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a4  00000000  00000000  000b0fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004868 	.word	0x08004868

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004868 	.word	0x08004868

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <ModbusRTU_CRC16_Calculate>:
uint8_t ModbusRTU_tx_buffer[ModbusRTU_TX_BUFFER_SIZE] = {0, };
uint8_t ModbusRTU_rx_buffer[ModbusRTU_RX_BUFFER_SIZE] = {0, };

extern UART_HandleTypeDef huart1;

uint16_t ModbusRTU_CRC16_Calculate(uint8_t *data, uint8_t lenght, uint8_t byte_order) {
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	0008      	movs	r0, r1
 800024e:	0011      	movs	r1, r2
 8000250:	1cfb      	adds	r3, r7, #3
 8000252:	1c02      	adds	r2, r0, #0
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	1cbb      	adds	r3, r7, #2
 8000258:	1c0a      	adds	r2, r1, #0
 800025a:	701a      	strb	r2, [r3, #0]
	uint16_t crc = 0xFFFF;
 800025c:	230e      	movs	r3, #14
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	2201      	movs	r2, #1
 8000262:	4252      	negs	r2, r2
 8000264:	801a      	strh	r2, [r3, #0]
	while (lenght--) {
 8000266:	e028      	b.n	80002ba <ModbusRTU_CRC16_Calculate+0x76>
		crc ^= *data++;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	1c5a      	adds	r2, r3, #1
 800026c:	607a      	str	r2, [r7, #4]
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b299      	uxth	r1, r3
 8000272:	220e      	movs	r2, #14
 8000274:	18bb      	adds	r3, r7, r2
 8000276:	18ba      	adds	r2, r7, r2
 8000278:	8812      	ldrh	r2, [r2, #0]
 800027a:	404a      	eors	r2, r1
 800027c:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	e017      	b.n	80002b4 <ModbusRTU_CRC16_Calculate+0x70>
			if (crc & 0x01) {
 8000284:	210e      	movs	r1, #14
 8000286:	187b      	adds	r3, r7, r1
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	2201      	movs	r2, #1
 800028c:	4013      	ands	r3, r2
 800028e:	d008      	beq.n	80002a2 <ModbusRTU_CRC16_Calculate+0x5e>
				crc = (crc >> 1u) ^ 0xA001;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	085b      	lsrs	r3, r3, #1
 8000296:	b29a      	uxth	r2, r3
 8000298:	187b      	adds	r3, r7, r1
 800029a:	4941      	ldr	r1, [pc, #260]	; (80003a0 <ModbusRTU_CRC16_Calculate+0x15c>)
 800029c:	404a      	eors	r2, r1
 800029e:	801a      	strh	r2, [r3, #0]
 80002a0:	e005      	b.n	80002ae <ModbusRTU_CRC16_Calculate+0x6a>
			} else {
				crc = crc >> 1u;
 80002a2:	220e      	movs	r2, #14
 80002a4:	18bb      	adds	r3, r7, r2
 80002a6:	18ba      	adds	r2, r7, r2
 80002a8:	8812      	ldrh	r2, [r2, #0]
 80002aa:	0852      	lsrs	r2, r2, #1
 80002ac:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	3301      	adds	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	2b07      	cmp	r3, #7
 80002b8:	dde4      	ble.n	8000284 <ModbusRTU_CRC16_Calculate+0x40>
	while (lenght--) {
 80002ba:	1cfb      	adds	r3, r7, #3
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	1cfa      	adds	r2, r7, #3
 80002c0:	1e59      	subs	r1, r3, #1
 80002c2:	7011      	strb	r1, [r2, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d1cf      	bne.n	8000268 <ModbusRTU_CRC16_Calculate+0x24>
			}
		}
	}
	switch (byte_order) {
 80002c8:	1cbb      	adds	r3, r7, #2
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	d038      	beq.n	8000342 <ModbusRTU_CRC16_Calculate+0xfe>
 80002d0:	dc5e      	bgt.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
 80002d2:	2b02      	cmp	r3, #2
 80002d4:	d013      	beq.n	80002fe <ModbusRTU_CRC16_Calculate+0xba>
 80002d6:	dc5b      	bgt.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d058      	beq.n	800038e <ModbusRTU_CRC16_Calculate+0x14a>
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d157      	bne.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
	case (0): //1234(младшим регистром вперед, младшим байтом вперед),
		break;
	case (1): //3412(старшим регистром вперед, младшим байтом вперед),
		crc = (crc << 8u) | (crc >> 8u);
 80002e0:	210e      	movs	r1, #14
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	881b      	ldrh	r3, [r3, #0]
 80002e6:	021b      	lsls	r3, r3, #8
 80002e8:	b21a      	sxth	r2, r3
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	0a1b      	lsrs	r3, r3, #8
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b21a      	sxth	r2, r3
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	801a      	strh	r2, [r3, #0]
		break;
 80002fc:	e048      	b.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
	case (2): //2143(младшим регистром вперед, старшим байтом вперед),
		crc = (((crc >> 8u) & 0x0F) << 12u) | ((crc >> 12u) << 8u) | ((crc << 12u) << 4u) | ((crc >> 4u) & 0x00F);
 80002fe:	200e      	movs	r0, #14
 8000300:	183b      	adds	r3, r7, r0
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	0a1b      	lsrs	r3, r3, #8
 8000306:	b29b      	uxth	r3, r3
 8000308:	031b      	lsls	r3, r3, #12
 800030a:	b21a      	sxth	r2, r3
 800030c:	183b      	adds	r3, r7, r0
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	0b1b      	lsrs	r3, r3, #12
 8000312:	b29b      	uxth	r3, r3
 8000314:	021b      	lsls	r3, r3, #8
 8000316:	b21b      	sxth	r3, r3
 8000318:	4313      	orrs	r3, r2
 800031a:	b21a      	sxth	r2, r3
 800031c:	183b      	adds	r3, r7, r0
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	b21b      	sxth	r3, r3
 8000324:	4313      	orrs	r3, r2
 8000326:	b21a      	sxth	r2, r3
 8000328:	183b      	adds	r3, r7, r0
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	091b      	lsrs	r3, r3, #4
 800032e:	b29b      	uxth	r3, r3
 8000330:	b21b      	sxth	r3, r3
 8000332:	210f      	movs	r1, #15
 8000334:	400b      	ands	r3, r1
 8000336:	b21b      	sxth	r3, r3
 8000338:	4313      	orrs	r3, r2
 800033a:	b21a      	sxth	r2, r3
 800033c:	183b      	adds	r3, r7, r0
 800033e:	801a      	strh	r2, [r3, #0]
		break;
 8000340:	e026      	b.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
	case (3): //4321(старшим регистром вперед, старшим байтом вперед).
		crc = (((crc >> 8u) & 0x0F) << 4u) | (crc >> 12u) | ((crc << 12u) << 12u) | (((crc >> 4u) & 0x00F) << 8u);
 8000342:	200e      	movs	r0, #14
 8000344:	183b      	adds	r3, r7, r0
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	b29b      	uxth	r3, r3
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	b21b      	sxth	r3, r3
 8000350:	22ff      	movs	r2, #255	; 0xff
 8000352:	4013      	ands	r3, r2
 8000354:	b21a      	sxth	r2, r3
 8000356:	183b      	adds	r3, r7, r0
 8000358:	881b      	ldrh	r3, [r3, #0]
 800035a:	0b1b      	lsrs	r3, r3, #12
 800035c:	b29b      	uxth	r3, r3
 800035e:	b21b      	sxth	r3, r3
 8000360:	4313      	orrs	r3, r2
 8000362:	b21a      	sxth	r2, r3
 8000364:	183b      	adds	r3, r7, r0
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	061b      	lsls	r3, r3, #24
 800036a:	b21b      	sxth	r3, r3
 800036c:	4313      	orrs	r3, r2
 800036e:	b21a      	sxth	r2, r3
 8000370:	183b      	adds	r3, r7, r0
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	091b      	lsrs	r3, r3, #4
 8000376:	b29b      	uxth	r3, r3
 8000378:	021b      	lsls	r3, r3, #8
 800037a:	b219      	sxth	r1, r3
 800037c:	23f0      	movs	r3, #240	; 0xf0
 800037e:	011b      	lsls	r3, r3, #4
 8000380:	400b      	ands	r3, r1
 8000382:	b21b      	sxth	r3, r3
 8000384:	4313      	orrs	r3, r2
 8000386:	b21a      	sxth	r2, r3
 8000388:	183b      	adds	r3, r7, r0
 800038a:	801a      	strh	r2, [r3, #0]
		break;
 800038c:	e000      	b.n	8000390 <ModbusRTU_CRC16_Calculate+0x14c>
		break;
 800038e:	46c0      	nop			; (mov r8, r8)
	}
	return crc;
 8000390:	230e      	movs	r3, #14
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	881b      	ldrh	r3, [r3, #0]
}
 8000396:	0018      	movs	r0, r3
 8000398:	46bd      	mov	sp, r7
 800039a:	b004      	add	sp, #16
 800039c:	bd80      	pop	{r7, pc}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	ffffa001 	.word	0xffffa001

080003a4 <ModbusRTU_Read_Holding_Registers_0x03>:
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
}

void ModbusRTU_Read_Holding_Registers_0x03(uint8_t Slave_ID, uint16_t Read_adress, uint8_t Quantity, uint8_t Slave_byte_order){
 80003a4:	b5b0      	push	{r4, r5, r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	0005      	movs	r5, r0
 80003ac:	000c      	movs	r4, r1
 80003ae:	0010      	movs	r0, r2
 80003b0:	0019      	movs	r1, r3
 80003b2:	1dfb      	adds	r3, r7, #7
 80003b4:	1c2a      	adds	r2, r5, #0
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	1c22      	adds	r2, r4, #0
 80003bc:	801a      	strh	r2, [r3, #0]
 80003be:	1dbb      	adds	r3, r7, #6
 80003c0:	1c02      	adds	r2, r0, #0
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	1cfb      	adds	r3, r7, #3
 80003c6:	1c0a      	adds	r2, r1, #0
 80003c8:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[0] = Slave_ID;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003cc:	1dfa      	adds	r2, r7, #7
 80003ce:	7812      	ldrb	r2, [r2, #0]
 80003d0:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[1] = 0x03;
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003d4:	2203      	movs	r2, #3
 80003d6:	705a      	strb	r2, [r3, #1]
	ModbusRTU_tx_buffer[2] = (uint16_t)Read_adress >> 8u;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	0a1b      	lsrs	r3, r3, #8
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b2da      	uxtb	r2, r3
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003e4:	709a      	strb	r2, [r3, #2]
	ModbusRTU_tx_buffer[3] = (uint16_t)Read_adress & 0x00ff;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b2da      	uxtb	r2, r3
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003ee:	70da      	strb	r2, [r3, #3]
	ModbusRTU_tx_buffer[4] = 0x00;
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	711a      	strb	r2, [r3, #4]
	ModbusRTU_tx_buffer[5] = Quantity;
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 80003f8:	1dba      	adds	r2, r7, #6
 80003fa:	7812      	ldrb	r2, [r2, #0]
 80003fc:	715a      	strb	r2, [r3, #5]
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
 80003fe:	250e      	movs	r5, #14
 8000400:	197c      	adds	r4, r7, r5
 8000402:	1cfb      	adds	r3, r7, #3
 8000404:	781a      	ldrb	r2, [r3, #0]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000408:	2106      	movs	r1, #6
 800040a:	0018      	movs	r0, r3
 800040c:	f7ff ff1a 	bl	8000244 <ModbusRTU_CRC16_Calculate>
 8000410:	0003      	movs	r3, r0
 8000412:	8023      	strh	r3, [r4, #0]
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
 8000414:	0029      	movs	r1, r5
 8000416:	187b      	adds	r3, r7, r1
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	b29b      	uxth	r3, r3
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000422:	719a      	strb	r2, [r3, #6]
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b03      	ldr	r3, [pc, #12]	; (8000438 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 800042c:	71da      	strb	r2, [r3, #7]
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	b004      	add	sp, #16
 8000434:	bdb0      	pop	{r4, r5, r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000090 	.word	0x20000090

0800043c <lcd1602_Send_init_Data>:
char tx_buffer_lcd[40] = {0, };
uint8_t global_buffer = 0;

/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af02      	add	r7, sp, #8
 8000442:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000444:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <lcd1602_Send_init_Data+0x80>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d007      	beq.n	800045c <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2208      	movs	r2, #8
 8000452:	4313      	orrs	r3, r2
 8000454:	b2da      	uxtb	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	701a      	strb	r2, [r3, #0]
 800045a:	e006      	b.n	800046a <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2208      	movs	r2, #8
 8000462:	4393      	bics	r3, r2
 8000464:	b2da      	uxtb	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2204      	movs	r2, #4
 8000470:	4313      	orrs	r3, r2
 8000472:	b2da      	uxtb	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000478:	687a      	ldr	r2, [r7, #4]
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <lcd1602_Send_init_Data+0x84>)
 800047c:	230a      	movs	r3, #10
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2301      	movs	r3, #1
 8000482:	214e      	movs	r1, #78	; 0x4e
 8000484:	f001 fb3c 	bl	8001b00 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000488:	2005      	movs	r0, #5
 800048a:	f000 fe05 	bl	8001098 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2204      	movs	r2, #4
 8000494:	4393      	bics	r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	4808      	ldr	r0, [pc, #32]	; (80004c0 <lcd1602_Send_init_Data+0x84>)
 80004a0:	230a      	movs	r3, #10
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2301      	movs	r3, #1
 80004a6:	214e      	movs	r1, #78	; 0x4e
 80004a8:	f001 fb2a 	bl	8001b00 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 80004ac:	2005      	movs	r0, #5
 80004ae:	f000 fdf3 	bl	8001098 <HAL_Delay>
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000000 	.word	0x20000000
 80004c0:	200001f8 	.word	0x200001f8

080004c4 <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80004cc:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <lcd1602_Send_data+0x74>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d007      	beq.n	80004e4 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2208      	movs	r2, #8
 80004da:	4313      	orrs	r3, r2
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	701a      	strb	r2, [r3, #0]
 80004e2:	e006      	b.n	80004f2 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2208      	movs	r2, #8
 80004ea:	4393      	bics	r3, r2
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2204      	movs	r2, #4
 80004f8:	4313      	orrs	r3, r2
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	480e      	ldr	r0, [pc, #56]	; (800053c <lcd1602_Send_data+0x78>)
 8000504:	230a      	movs	r3, #10
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	214e      	movs	r1, #78	; 0x4e
 800050c:	f001 faf8 	bl	8001b00 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2204      	movs	r2, #4
 8000516:	4393      	bics	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	4806      	ldr	r0, [pc, #24]	; (800053c <lcd1602_Send_data+0x78>)
 8000522:	230a      	movs	r3, #10
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	2301      	movs	r3, #1
 8000528:	214e      	movs	r1, #78	; 0x4e
 800052a:	f001 fae9 	bl	8001b00 <HAL_I2C_Master_Transmit>
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	20000000 	.word	0x20000000
 800053c:	200001f8 	.word	0x200001f8

08000540 <lcd1602_Init>:

void lcd1602_Init(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	2230      	movs	r2, #48	; 0x30
 800054a:	701a      	strb	r2, [r3, #0]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 800054c:	200f      	movs	r0, #15
 800054e:	f000 fda3 	bl	8001098 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000552:	1dfb      	adds	r3, r7, #7
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff ff71 	bl	800043c <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fd9c 	bl	8001098 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ff6a 	bl	800043c <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000568:	2001      	movs	r0, #1
 800056a:	f000 fd95 	bl	8001098 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800056e:	1dfb      	adds	r3, r7, #7
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ff63 	bl	800043c <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	2220      	movs	r2, #32
 800057a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff ff5c 	bl	800043c <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	2220      	movs	r2, #32
 8000588:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800058a:	1dfb      	adds	r3, r7, #7
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff ff55 	bl	800043c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ff4e 	bl	800043c <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff47 	bl	800043c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff ff40 	bl	800043c <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 80005bc:	1dfb      	adds	r3, r7, #7
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005c2:	1dfb      	adds	r3, r7, #7
 80005c4:	0018      	movs	r0, r3
 80005c6:	f7ff ff39 	bl	800043c <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	2210      	movs	r2, #16
 80005ce:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005d0:	1dfb      	adds	r3, r7, #7
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ff32 	bl	800043c <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff2b 	bl	800043c <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	2230      	movs	r2, #48	; 0x30
 80005ea:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff24 	bl	800043c <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff1d 	bl	800043c <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	22c0      	movs	r2, #192	; 0xc0
 8000606:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff16 	bl	800043c <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}

08000618 <lcd1602_Print_symbol>:

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	0002      	movs	r2, r0
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	701a      	strb	r2, [r3, #0]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b25b      	sxtb	r3, r3
 800062a:	220f      	movs	r2, #15
 800062c:	4393      	bics	r3, r2
 800062e:	b25b      	sxtb	r3, r3
 8000630:	2209      	movs	r2, #9
 8000632:	4313      	orrs	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	240f      	movs	r4, #15
 800063a:	193b      	adds	r3, r7, r4
 800063c:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800063e:	193b      	adds	r3, r7, r4
 8000640:	0018      	movs	r0, r3
 8000642:	f7ff ff3f 	bl	80004c4 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000646:	1dfb      	adds	r3, r7, #7
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	b25b      	sxtb	r3, r3
 800064e:	2209      	movs	r2, #9
 8000650:	4313      	orrs	r3, r2
 8000652:	b25b      	sxtb	r3, r3
 8000654:	b2da      	uxtb	r2, r3
 8000656:	193b      	adds	r3, r7, r4
 8000658:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff ff31 	bl	80004c4 <lcd1602_Send_data>
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b005      	add	sp, #20
 8000668:	bd90      	pop	{r4, r7, pc}

0800066a <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	e009      	b.n	800068c <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff ffc9 	bl	8000618 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fd3a 	bl	8000108 <strlen>
 8000694:	0002      	movs	r2, r0
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8ed      	bhi.n	8000678 <lcd1602_Print_text+0xe>
	}
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b004      	add	sp, #16
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80006a6:	b5b0      	push	{r4, r5, r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	0002      	movs	r2, r0
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	701a      	strb	r2, [r3, #0]
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1c0a      	adds	r2, r1, #0
 80006b6:	701a      	strb	r2, [r3, #0]
	uint8_t command, adr;
	if (y > 3)
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d902      	bls.n	80006c6 <lcd1602_SetCursor+0x20>
		y = 3;
 80006c0:	1dbb      	adds	r3, r7, #6
 80006c2:	2203      	movs	r2, #3
 80006c4:	701a      	strb	r2, [r3, #0]
	if (x > 39)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b27      	cmp	r3, #39	; 0x27
 80006cc:	d902      	bls.n	80006d4 <lcd1602_SetCursor+0x2e>
		x = 39;
 80006ce:	1dfb      	adds	r3, r7, #7
 80006d0:	2227      	movs	r2, #39	; 0x27
 80006d2:	701a      	strb	r2, [r3, #0]
	if (y == 0) {
 80006d4:	1dbb      	adds	r3, r7, #6
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <lcd1602_SetCursor+0x40>
		adr = x;
 80006dc:	230f      	movs	r3, #15
 80006de:	18fb      	adds	r3, r7, r3
 80006e0:	1dfa      	adds	r2, r7, #7
 80006e2:	7812      	ldrb	r2, [r2, #0]
 80006e4:	701a      	strb	r2, [r3, #0]
	}
	if (y == 1) {
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d105      	bne.n	80006fa <lcd1602_SetCursor+0x54>
		adr = x + 0x40;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	1dfa      	adds	r2, r7, #7
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	3240      	adds	r2, #64	; 0x40
 80006f8:	701a      	strb	r2, [r3, #0]
	}
	if (y == 2) {
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d105      	bne.n	800070e <lcd1602_SetCursor+0x68>
		adr = x + 0x14;
 8000702:	230f      	movs	r3, #15
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	3214      	adds	r2, #20
 800070c:	701a      	strb	r2, [r3, #0]
	}
	if (y == 3) {
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b03      	cmp	r3, #3
 8000714:	d105      	bne.n	8000722 <lcd1602_SetCursor+0x7c>
		adr = x + 0x54;
 8000716:	230f      	movs	r3, #15
 8000718:	18fb      	adds	r3, r7, r3
 800071a:	1dfa      	adds	r2, r7, #7
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	3254      	adds	r2, #84	; 0x54
 8000720:	701a      	strb	r2, [r3, #0]
	}
	command = ((adr & 0xf0) | 0x80);
 8000722:	250f      	movs	r5, #15
 8000724:	197b      	adds	r3, r7, r5
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b25b      	sxtb	r3, r3
 800072a:	2270      	movs	r2, #112	; 0x70
 800072c:	4013      	ands	r3, r2
 800072e:	b25b      	sxtb	r3, r3
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	4252      	negs	r2, r2
 8000734:	4313      	orrs	r3, r2
 8000736:	b25b      	sxtb	r3, r3
 8000738:	b2da      	uxtb	r2, r3
 800073a:	240e      	movs	r4, #14
 800073c:	193b      	adds	r3, r7, r4
 800073e:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff febe 	bl	80004c4 <lcd1602_Send_data>

	command = (adr << 4);
 8000748:	197b      	adds	r3, r7, r5
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	b2da      	uxtb	r2, r3
 8000750:	193b      	adds	r3, r7, r4
 8000752:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff feb4 	bl	80004c4 <lcd1602_Send_data>

}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b004      	add	sp, #16
 8000762:	bdb0      	pop	{r4, r5, r7, pc}

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fc31 	bl	8000fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f8c3 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f9b3 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f000 f993 	bl	8000aa0 <MX_DMA_Init>
  MX_I2C1_Init();
 800077a:	f000 f921 	bl	80009c0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800077e:	f000 f95f 	bl	8000a40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  t_ModbusRTU_tx = HAL_GetTick();
 8000782:	f000 fc7f 	bl	8001084 <HAL_GetTick>
 8000786:	0002      	movs	r2, r0
 8000788:	4b50      	ldr	r3, [pc, #320]	; (80008cc <main+0x168>)
 800078a:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 800078c:	4950      	ldr	r1, [pc, #320]	; (80008d0 <main+0x16c>)
 800078e:	4b51      	ldr	r3, [pc, #324]	; (80008d4 <main+0x170>)
 8000790:	2240      	movs	r2, #64	; 0x40
 8000792:	0018      	movs	r0, r3
 8000794:	f003 fb5d 	bl	8003e52 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <main+0x174>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b4e      	ldr	r3, [pc, #312]	; (80008d8 <main+0x174>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2104      	movs	r1, #4
 80007a4:	438a      	bics	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
  lcd1602_Init();
 80007a8:	f7ff feca 	bl	8000540 <lcd1602_Init>
  lcd1602_SetCursor(0, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff ff79 	bl	80006a6 <lcd1602_SetCursor>
  for(int i = 0; i < 20; i++){
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	e06e      	b.n	8000898 <main+0x134>
	  static uint8_t val = 0;
	  switch(val){
 80007ba:	4b48      	ldr	r3, [pc, #288]	; (80008dc <main+0x178>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d04a      	beq.n	8000858 <main+0xf4>
 80007c2:	dc5f      	bgt.n	8000884 <main+0x120>
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d031      	beq.n	800082c <main+0xc8>
 80007c8:	dc5c      	bgt.n	8000884 <main+0x120>
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <main+0x70>
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d016      	beq.n	8000800 <main+0x9c>
 80007d2:	e057      	b.n	8000884 <main+0x120>
	  case 0:
			sprintf(tx_buffer_lcd, "Initialization.   ");
 80007d4:	4a42      	ldr	r2, [pc, #264]	; (80008e0 <main+0x17c>)
 80007d6:	4b43      	ldr	r3, [pc, #268]	; (80008e4 <main+0x180>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f003 fbe4 	bl	8003fa8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80007e0:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <main+0x180>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff ff41 	bl	800066a <lcd1602_Print_text>
			HAL_Delay(300);
 80007e8:	2396      	movs	r3, #150	; 0x96
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fc53 	bl	8001098 <HAL_Delay>
			val++;
 80007f2:	4b3a      	ldr	r3, [pc, #232]	; (80008dc <main+0x178>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <main+0x178>)
 80007fc:	701a      	strb	r2, [r3, #0]
			break;
 80007fe:	e041      	b.n	8000884 <main+0x120>
	  case 1:
			sprintf(tx_buffer_lcd, "Initialization..   ");
 8000800:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <main+0x184>)
 8000802:	4b38      	ldr	r3, [pc, #224]	; (80008e4 <main+0x180>)
 8000804:	0011      	movs	r1, r2
 8000806:	0018      	movs	r0, r3
 8000808:	f003 fbce 	bl	8003fa8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <main+0x180>)
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff ff2b 	bl	800066a <lcd1602_Print_text>
			HAL_Delay(300);
 8000814:	2396      	movs	r3, #150	; 0x96
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc3d 	bl	8001098 <HAL_Delay>
			val++;
 800081e:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <main+0x178>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <main+0x178>)
 8000828:	701a      	strb	r2, [r3, #0]
			break;
 800082a:	e02b      	b.n	8000884 <main+0x120>
	  case 2:
		  	sprintf(tx_buffer_lcd, "Initialization...   ");
 800082c:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <main+0x188>)
 800082e:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <main+0x180>)
 8000830:	0011      	movs	r1, r2
 8000832:	0018      	movs	r0, r3
 8000834:	f003 fbb8 	bl	8003fa8 <siprintf>
		    lcd1602_Print_text(tx_buffer_lcd);
 8000838:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <main+0x180>)
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff ff15 	bl	800066a <lcd1602_Print_text>
		    HAL_Delay(300);
 8000840:	2396      	movs	r3, #150	; 0x96
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fc27 	bl	8001098 <HAL_Delay>
		    val++;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <main+0x178>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <main+0x178>)
 8000854:	701a      	strb	r2, [r3, #0]
		    break;
 8000856:	e015      	b.n	8000884 <main+0x120>
	  case 3:
		  	sprintf(tx_buffer_lcd, "Initialization.   ");
 8000858:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <main+0x17c>)
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <main+0x180>)
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f003 fba2 	bl	8003fa8 <siprintf>
		    lcd1602_Print_text(tx_buffer_lcd);
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <main+0x180>)
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff feff 	bl	800066a <lcd1602_Print_text>
		    HAL_Delay(300);
 800086c:	2396      	movs	r3, #150	; 0x96
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	0018      	movs	r0, r3
 8000872:	f000 fc11 	bl	8001098 <HAL_Delay>
		    val++;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <main+0x178>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <main+0x178>)
 8000880:	701a      	strb	r2, [r3, #0]
		    break;
 8000882:	46c0      	nop			; (mov r8, r8)
	  }
	  if(val == 3){
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <main+0x178>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d102      	bne.n	8000892 <main+0x12e>
		  val = 0;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <main+0x178>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 20; i++){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3301      	adds	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b13      	cmp	r3, #19
 800089c:	dd8d      	ble.n	80007ba <main+0x56>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_Data_ModbusRTU();
 800089e:	f000 f9b3 	bl	8000c08 <Display_Data_ModbusRTU>
	  if((HAL_GetTick() - t_ModbusRTU_tx) >= 5000){
 80008a2:	f000 fbef 	bl	8001084 <HAL_GetTick>
 80008a6:	0002      	movs	r2, r0
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <main+0x168>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <main+0x18c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d9f4      	bls.n	800089e <main+0x13a>
		  t_ModbusRTU_tx = HAL_GetTick();
 80008b4:	f000 fbe6 	bl	8001084 <HAL_GetTick>
 80008b8:	0002      	movs	r2, r0
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <main+0x168>)
 80008bc:	601a      	str	r2, [r3, #0]
		  Read_Register_RE72(RE72_SP, RE72_FUNCTION_READ_REGISTER);
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <main+0x190>)
 80008c0:	2103      	movs	r1, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f97c 	bl	8000bc0 <Read_Register_RE72>
	  Display_Data_ModbusRTU();
 80008c8:	e7e9      	b.n	800089e <main+0x13a>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	2000030c 	.word	0x2000030c
 80008d0:	20000310 	.word	0x20000310
 80008d4:	20000244 	.word	0x20000244
 80008d8:	200002c8 	.word	0x200002c8
 80008dc:	20000351 	.word	0x20000351
 80008e0:	08004880 	.word	0x08004880
 80008e4:	200001d0 	.word	0x200001d0
 80008e8:	08004894 	.word	0x08004894
 80008ec:	080048a8 	.word	0x080048a8
 80008f0:	00001387 	.word	0x00001387
 80008f4:	00000ff4 	.word	0x00000ff4

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b095      	sub	sp, #84	; 0x54
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	2420      	movs	r4, #32
 8000900:	193b      	adds	r3, r7, r4
 8000902:	0018      	movs	r0, r3
 8000904:	2330      	movs	r3, #48	; 0x30
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f003 fb44 	bl	8003f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090e:	2310      	movs	r3, #16
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	2310      	movs	r3, #16
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f003 fb3c 	bl	8003f96 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	2310      	movs	r3, #16
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f003 fb35 	bl	8003f96 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	0021      	movs	r1, r4
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2202      	movs	r2, #2
 8000932:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2210      	movs	r2, #16
 800093e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2202      	movs	r2, #2
 8000944:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	22a0      	movs	r2, #160	; 0xa0
 8000950:	0392      	lsls	r2, r2, #14
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	187b      	adds	r3, r7, r1
 800095c:	0018      	movs	r0, r3
 800095e:	f001 fbfb 	bl	8002158 <HAL_RCC_OscConfig>
 8000962:	1e03      	subs	r3, r0, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000966:	f000 f981 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	2110      	movs	r1, #16
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2207      	movs	r2, #7
 8000970:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2202      	movs	r2, #2
 8000976:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2101      	movs	r1, #1
 8000988:	0018      	movs	r0, r3
 800098a:	f001 feff 	bl	800278c <HAL_RCC_ClockConfig>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000992:	f000 f96b 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000996:	003b      	movs	r3, r7
 8000998:	2221      	movs	r2, #33	; 0x21
 800099a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800099c:	003b      	movs	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009a2:	003b      	movs	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	003b      	movs	r3, r7
 80009aa:	0018      	movs	r0, r3
 80009ac:	f002 f840 	bl	8002a30 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009b4:	f000 f95a 	bl	8000c6c <Error_Handler>
  }
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b015      	add	sp, #84	; 0x54
 80009be:	bd90      	pop	{r4, r7, pc}

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 ffe9 	bl	80019d4 <HAL_I2C_Init>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 f931 	bl	8000c6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fb0a 	bl	8002028 <HAL_I2CEx_ConfigAnalogFilter>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 f928 	bl	8000c6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f001 fb4d 	bl	80020c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 f91f 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001f8 	.word	0x200001f8
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	0000020b 	.word	0x0000020b

08000a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <MX_USART1_UART_Init+0x5c>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a4c:	2296      	movs	r2, #150	; 0x96
 8000a4e:	0192      	lsls	r2, r2, #6
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x58>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f002 f8a1 	bl	8002bcc <HAL_UART_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a8e:	f000 f8ed 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000244 	.word	0x20000244
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aa8:	695a      	ldr	r2, [r3, #20]
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_DMA_Init+0x38>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fbb8 	bl	8001238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ac8:	200a      	movs	r0, #10
 8000aca:	f000 fbca 	bl	8001262 <HAL_NVIC_EnableIRQ>

}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40021000 	.word	0x40021000

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	240c      	movs	r4, #12
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	2314      	movs	r3, #20
 8000aea:	001a      	movs	r2, r3
 8000aec:	2100      	movs	r1, #0
 8000aee:	f003 fa52 	bl	8003f96 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000af4:	695a      	ldr	r2, [r3, #20]
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	0289      	lsls	r1, r1, #10
 8000afc:	430a      	orrs	r2, r1
 8000afe:	615a      	str	r2, [r3, #20]
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000b02:	695a      	ldr	r2, [r3, #20]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	029b      	lsls	r3, r3, #10
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000b10:	695a      	ldr	r2, [r3, #20]
 8000b12:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	02c9      	lsls	r1, r1, #11
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_GPIO_Init+0x88>)
 8000b1e:	695a      	ldr	r2, [r3, #20]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	02db      	lsls	r3, r3, #11
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_Led_GPIO_Port, User_Led_Pin, GPIO_PIN_RESET);
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_GPIO_Init+0x8c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2108      	movs	r1, #8
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 ff31 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Led_Pin */
  GPIO_InitStruct.Pin = User_Led_Pin;
 8000b36:	0021      	movs	r1, r4
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2201      	movs	r2, #1
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_Led_GPIO_Port, &GPIO_InitStruct);
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <MX_GPIO_Init+0x8c>)
 8000b54:	0019      	movs	r1, r3
 8000b56:	0010      	movs	r0, r2
 8000b58:	f000 fdb6 	bl	80016c8 <HAL_GPIO_Init>

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b009      	add	sp, #36	; 0x24
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400

08000b6c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	000a      	movs	r2, r1
 8000b76:	1cbb      	adds	r3, r7, #2
 8000b78:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1){
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HAL_UARTEx_RxEventCallback+0x40>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d10f      	bne.n	8000ba4 <HAL_UARTEx_RxEventCallback+0x38>
		memcpy(ModbusRTU_rx_buffer, uart_dma_rx_buffer, Size);
 8000b84:	1cbb      	adds	r3, r7, #2
 8000b86:	881a      	ldrh	r2, [r3, #0]
 8000b88:	4909      	ldr	r1, [pc, #36]	; (8000bb0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <HAL_UARTEx_RxEventCallback+0x48>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 f9f9 	bl	8003f84 <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 8000b92:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <HAL_UARTEx_RxEventCallback+0x44>)
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f003 f95a 	bl	8003e52 <HAL_UARTEx_ReceiveToIdle_DMA>
		display_flag = 1;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <HAL_UARTEx_RxEventCallback+0x50>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	701a      	strb	r2, [r3, #0]
	}
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40013800 	.word	0x40013800
 8000bb0:	20000310 	.word	0x20000310
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	20000244 	.word	0x20000244
 8000bbc:	20000350 	.word	0x20000350

08000bc0 <Read_Register_RE72>:

void Read_Register_RE72(uint16_t Register, uint8_t Function_code){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	1dbb      	adds	r3, r7, #6
 8000bca:	801a      	strh	r2, [r3, #0]
 8000bcc:	1d7b      	adds	r3, r7, #5
 8000bce:	1c0a      	adds	r2, r1, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
	if(Function_code == 0x03){
 8000bd2:	1d7b      	adds	r3, r7, #5
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d10d      	bne.n	8000bf6 <Read_Register_RE72+0x36>
		ModbusRTU_Read_Holding_Registers_0x03(RE72_ADRESS, Register, 1, RE72_BYTE_ORDER);
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	8819      	ldrh	r1, [r3, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	2201      	movs	r2, #1
 8000be2:	2088      	movs	r0, #136	; 0x88
 8000be4:	f7ff fbde 	bl	80003a4 <ModbusRTU_Read_Holding_Registers_0x03>
		HAL_UART_Transmit(&huart1, ModbusRTU_tx_buffer, 8, 1000);
 8000be8:	23fa      	movs	r3, #250	; 0xfa
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4904      	ldr	r1, [pc, #16]	; (8000c00 <Read_Register_RE72+0x40>)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <Read_Register_RE72+0x44>)
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	f002 f83f 	bl	8002c74 <HAL_UART_Transmit>
	}
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000090 	.word	0x20000090
 8000c04:	20000244 	.word	0x20000244

08000c08 <Display_Data_ModbusRTU>:
		HAL_UART_Transmit(&huart1, ModbusRTU_tx_buffer, 8, 1000);
	}
}


void Display_Data_ModbusRTU(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	if(display_flag){
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <Display_Data_ModbusRTU+0x50>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d01d      	beq.n	8000c52 <Display_Data_ModbusRTU+0x4a>
		lcd1602_SetCursor(0, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fd44 	bl	80006a6 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "ModbusRTU rx:  ");
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <Display_Data_ModbusRTU+0x54>)
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <Display_Data_ModbusRTU+0x58>)
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f003 f9bf 	bl	8003fa8 <siprintf>
		lcd1602_Print_text(tx_buffer_lcd);
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <Display_Data_ModbusRTU+0x58>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fd1c 	bl	800066a <lcd1602_Print_text>
		lcd1602_SetCursor(0, 1);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2000      	movs	r0, #0
 8000c36:	f7ff fd36 	bl	80006a6 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "0x%04x%04x   ", ModbusRTU_rx_buffer[3], ModbusRTU_rx_buffer[4]);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <Display_Data_ModbusRTU+0x5c>)
 8000c3c:	78db      	ldrb	r3, [r3, #3]
 8000c3e:	001a      	movs	r2, r3
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <Display_Data_ModbusRTU+0x5c>)
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	4908      	ldr	r1, [pc, #32]	; (8000c68 <Display_Data_ModbusRTU+0x60>)
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <Display_Data_ModbusRTU+0x58>)
 8000c48:	f003 f9ae 	bl	8003fa8 <siprintf>
		display_flag = 0;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <Display_Data_ModbusRTU+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
	}
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000350 	.word	0x20000350
 8000c5c:	080048c0 	.word	0x080048c0
 8000c60:	200001d0 	.word	0x200001d0
 8000c64:	200000d0 	.word	0x200000d0
 8000c68:	080048d0 	.word	0x080048d0

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <HAL_MspInit+0x44>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x44>)
 8000c84:	2101      	movs	r1, #1
 8000c86:	430a      	orrs	r2, r1
 8000c88:	619a      	str	r2, [r3, #24]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <HAL_MspInit+0x44>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4013      	ands	r3, r2
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_MspInit+0x44>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x44>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0549      	lsls	r1, r1, #21
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_MspInit+0x44>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	055b      	lsls	r3, r3, #21
 8000cac:	4013      	ands	r3, r2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	; 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 f95f 	bl	8003f96 <memset>
  if(hi2c->Instance==I2C1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <HAL_I2C_MspInit+0x94>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d133      	bne.n	8000d4a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cfe:	193b      	adds	r3, r7, r4
 8000d00:	22c0      	movs	r2, #192	; 0xc0
 8000d02:	00d2      	lsls	r2, r2, #3
 8000d04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d06:	0021      	movs	r1, r4
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2212      	movs	r2, #18
 8000d0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2203      	movs	r2, #3
 8000d18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	187a      	adds	r2, r7, r1
 8000d22:	2390      	movs	r3, #144	; 0x90
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fccd 	bl	80016c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000d30:	69da      	ldr	r2, [r3, #28]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0389      	lsls	r1, r1, #14
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	61da      	str	r2, [r3, #28]
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_I2C_MspInit+0x98>)
 8000d3e:	69da      	ldr	r2, [r3, #28]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b00b      	add	sp, #44	; 0x2c
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40005400 	.word	0x40005400
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b08b      	sub	sp, #44	; 0x2c
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	2414      	movs	r4, #20
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f003 f911 	bl	8003f96 <memset>
  if(huart->Instance==USART1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a45      	ldr	r2, [pc, #276]	; (8000e90 <HAL_UART_MspInit+0x134>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d000      	beq.n	8000d80 <HAL_UART_MspInit+0x24>
 8000d7e:	e083      	b.n	8000e88 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d80:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000d82:	699a      	ldr	r2, [r3, #24]
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	01c9      	lsls	r1, r1, #7
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	619a      	str	r2, [r3, #24]
 8000d8e:	4b41      	ldr	r3, [pc, #260]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000d90:	699a      	ldr	r2, [r3, #24]
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	01db      	lsls	r3, r3, #7
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0289      	lsls	r1, r1, #10
 8000da6:	430a      	orrs	r2, r1
 8000da8:	615a      	str	r2, [r3, #20]
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	029b      	lsls	r3, r3, #10
 8000db2:	4013      	ands	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000dba:	695a      	ldr	r2, [r3, #20]
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	02c9      	lsls	r1, r1, #11
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <HAL_UART_MspInit+0x138>)
 8000dc8:	695a      	ldr	r2, [r3, #20]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	02db      	lsls	r3, r3, #11
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA3     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2208      	movs	r2, #8
 8000dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	2202      	movs	r2, #2
 8000dde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2203      	movs	r2, #3
 8000dea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2201      	movs	r2, #1
 8000df0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	193a      	adds	r2, r7, r4
 8000df4:	2390      	movs	r3, #144	; 0x90
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 fc64 	bl	80016c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e00:	0021      	movs	r1, r4
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2203      	movs	r2, #3
 8000e18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_UART_MspInit+0x13c>)
 8000e24:	0019      	movs	r1, r3
 8000e26:	0010      	movs	r0, r2
 8000e28:	f000 fc4e 	bl	80016c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <HAL_UART_MspInit+0x144>)
 8000e30:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e44:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fa1c 	bl	800129c <HAL_DMA_Init>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000e68:	f7ff ff00 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e70:	671a      	str	r2, [r3, #112]	; 0x70
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_UART_MspInit+0x140>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	201b      	movs	r0, #27
 8000e7e:	f000 f9db 	bl	8001238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e82:	201b      	movs	r0, #27
 8000e84:	f000 f9ed 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b00b      	add	sp, #44	; 0x2c
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	200002c8 	.word	0x200002c8
 8000ea0:	40020030 	.word	0x40020030

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <NMI_Handler+0x4>

08000eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <HardFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8ca 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fb09 	bl	80014f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	200002c8 	.word	0x200002c8

08000eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <USART1_IRQHandler+0x14>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 ff68 	bl	8002dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	20000244 	.word	0x20000244

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f002 fffc 	bl	8003f30 <__errno>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	425b      	negs	r3, r3
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	18d2      	adds	r2, r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b006      	add	sp, #24
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20001000 	.word	0x20001000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000354 	.word	0x20000354
 8000f6c:	20000370 	.word	0x20000370

08000f70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f80:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f82:	490e      	ldr	r1, [pc, #56]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f84:	4a0e      	ldr	r2, [pc, #56]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f98:	4c0b      	ldr	r4, [pc, #44]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fa6:	f7ff ffe3 	bl	8000f70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000faa:	f002 ffc7 	bl	8003f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fbd9 	bl	8000764 <main>

08000fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fc0:	08004954 	.word	0x08004954
  ldr r2, =_sbss
 8000fc4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fc8:	2000036c 	.word	0x2000036c

08000fcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC1_IRQHandler>
	...

08000fd0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_Init+0x24>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_Init+0x24>)
 8000fda:	2110      	movs	r1, #16
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f809 	bl	8000ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe6:	f7ff fe47 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001000:	4b14      	ldr	r3, [pc, #80]	; (8001054 <HAL_InitTick+0x5c>)
 8001002:	681c      	ldr	r4, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x60>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	0019      	movs	r1, r3
 800100a:	23fa      	movs	r3, #250	; 0xfa
 800100c:	0098      	lsls	r0, r3, #2
 800100e:	f7ff f88d 	bl	800012c <__udivsi3>
 8001012:	0003      	movs	r3, r0
 8001014:	0019      	movs	r1, r3
 8001016:	0020      	movs	r0, r4
 8001018:	f7ff f888 	bl	800012c <__udivsi3>
 800101c:	0003      	movs	r3, r0
 800101e:	0018      	movs	r0, r3
 8001020:	f000 f92f 	bl	8001282 <HAL_SYSTICK_Config>
 8001024:	1e03      	subs	r3, r0, #0
 8001026:	d001      	beq.n	800102c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e00f      	b.n	800104c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d80b      	bhi.n	800104a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	2301      	movs	r3, #1
 8001036:	425b      	negs	r3, r3
 8001038:	2200      	movs	r2, #0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f8fc 	bl	8001238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_InitTick+0x64>)
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b003      	add	sp, #12
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	20000004 	.word	0x20000004
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000008 	.word	0x20000008

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_IncTick+0x1c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_IncTick+0x20>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	18d2      	adds	r2, r2, r3
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_IncTick+0x20>)
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000000c 	.word	0x2000000c
 8001080:	20000358 	.word	0x20000358

08001084 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_GetTick+0x10>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000358 	.word	0x20000358

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fff0 	bl	8001084 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3301      	adds	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	001a      	movs	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	189b      	adds	r3, r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	f7ff ffe0 	bl	8001084 <HAL_GetTick>
 80010c4:	0002      	movs	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	2000000c 	.word	0x2000000c

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	0002      	movs	r2, r0
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b7f      	cmp	r3, #127	; 0x7f
 80010f2:	d809      	bhi.n	8001108 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	001a      	movs	r2, r3
 80010fa:	231f      	movs	r3, #31
 80010fc:	401a      	ands	r2, r3
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_EnableIRQ+0x30>)
 8001100:	2101      	movs	r1, #1
 8001102:	4091      	lsls	r1, r2
 8001104:	000a      	movs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
  }
}
 8001108:	46c0      	nop			; (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b7f      	cmp	r3, #127	; 0x7f
 8001128:	d828      	bhi.n	800117c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	33c0      	adds	r3, #192	; 0xc0
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	589b      	ldr	r3, [r3, r2]
 800113a:	1dfa      	adds	r2, r7, #7
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	0011      	movs	r1, r2
 8001140:	2203      	movs	r2, #3
 8001142:	400a      	ands	r2, r1
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4091      	lsls	r1, r2
 800114a:	000a      	movs	r2, r1
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	019b      	lsls	r3, r3, #6
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	401a      	ands	r2, r3
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	0018      	movs	r0, r3
 8001160:	2303      	movs	r3, #3
 8001162:	4003      	ands	r3, r0
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001168:	481f      	ldr	r0, [pc, #124]	; (80011e8 <__NVIC_SetPriority+0xd4>)
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25b      	sxtb	r3, r3
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	430a      	orrs	r2, r1
 8001174:	33c0      	adds	r3, #192	; 0xc0
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800117a:	e031      	b.n	80011e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	0019      	movs	r1, r3
 8001184:	230f      	movs	r3, #15
 8001186:	400b      	ands	r3, r1
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3306      	adds	r3, #6
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	18d3      	adds	r3, r2, r3
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0011      	movs	r1, r2
 800119c:	2203      	movs	r2, #3
 800119e:	400a      	ands	r2, r1
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	21ff      	movs	r1, #255	; 0xff
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	401a      	ands	r2, r3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	2303      	movs	r3, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <__NVIC_SetPriority+0xd8>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001c      	movs	r4, r3
 80011cc:	230f      	movs	r3, #15
 80011ce:	4023      	ands	r3, r4
 80011d0:	3b08      	subs	r3, #8
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	430a      	orrs	r2, r1
 80011d6:	3306      	adds	r3, #6
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	18c3      	adds	r3, r0, r3
 80011dc:	3304      	adds	r3, #4
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b003      	add	sp, #12
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	045b      	lsls	r3, r3, #17
 8001200:	429a      	cmp	r2, r3
 8001202:	d301      	bcc.n	8001208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001204:	2301      	movs	r3, #1
 8001206:	e010      	b.n	800122a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <SysTick_Config+0x44>)
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	3a01      	subs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001210:	2301      	movs	r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	2103      	movs	r1, #3
 8001216:	0018      	movs	r0, r3
 8001218:	f7ff ff7c 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x44>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x44>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	210f      	movs	r1, #15
 8001244:	187b      	adds	r3, r7, r1
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b25b      	sxtb	r3, r3
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f7ff ff5d 	bl	8001114 <__NVIC_SetPriority>
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b004      	add	sp, #16
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	0002      	movs	r2, r0
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b25b      	sxtb	r3, r3
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ff33 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ffaf 	bl	80011f0 <SysTick_Config>
 8001292:	0003      	movs	r3, r0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e036      	b.n	8001320 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2221      	movs	r2, #33	; 0x21
 80012b6:	2102      	movs	r1, #2
 80012b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_DMA_Init+0x8c>)
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0018      	movs	r0, r3
 8001304:	f000 f9c4 	bl	8001690 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2221      	movs	r2, #33	; 0x21
 8001312:	2101      	movs	r1, #1
 8001314:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2220      	movs	r2, #32
 800131a:	2100      	movs	r1, #0
 800131c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}  
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b004      	add	sp, #16
 8001326:	bd80      	pop	{r7, pc}
 8001328:	ffffc00f 	.word	0xffffc00f

0800132c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
 8001338:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800133a:	2317      	movs	r3, #23
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2220      	movs	r2, #32
 8001346:	5c9b      	ldrb	r3, [r3, r2]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_DMA_Start_IT+0x24>
 800134c:	2302      	movs	r3, #2
 800134e:	e04f      	b.n	80013f0 <HAL_DMA_Start_IT+0xc4>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2220      	movs	r2, #32
 8001354:	2101      	movs	r1, #1
 8001356:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2221      	movs	r2, #33	; 0x21
 800135c:	5c9b      	ldrb	r3, [r3, r2]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d13a      	bne.n	80013da <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2221      	movs	r2, #33	; 0x21
 8001368:	2102      	movs	r1, #2
 800136a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	438a      	bics	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	68b9      	ldr	r1, [r7, #8]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 f954 	bl	8001636 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	210e      	movs	r1, #14
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e00f      	b.n	80013c8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	210a      	movs	r1, #10
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2104      	movs	r1, #4
 80013c4:	438a      	bics	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2220      	movs	r2, #32
 80013de:	2100      	movs	r1, #0
 80013e0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80013e2:	2317      	movs	r3, #23
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2202      	movs	r2, #2
 80013e8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80013ea:	2317      	movs	r3, #23
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
} 
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b006      	add	sp, #24
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2221      	movs	r2, #33	; 0x21
 8001404:	5c9b      	ldrb	r3, [r3, r2]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d008      	beq.n	800141e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2204      	movs	r2, #4
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2220      	movs	r2, #32
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e020      	b.n	8001460 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	210e      	movs	r1, #14
 800142a:	438a      	bics	r2, r1
 800142c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	2101      	movs	r1, #1
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2221      	movs	r2, #33	; 0x21
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2220      	movs	r2, #32
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001470:	210f      	movs	r1, #15
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2221      	movs	r2, #33	; 0x21
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d006      	beq.n	8001492 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2204      	movs	r2, #4
 8001488:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800148a:	187b      	adds	r3, r7, r1
 800148c:	2201      	movs	r2, #1
 800148e:	701a      	strb	r2, [r3, #0]
 8001490:	e028      	b.n	80014e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	210e      	movs	r1, #14
 800149e:	438a      	bics	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2101      	movs	r1, #1
 80014ae:	438a      	bics	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2101      	movs	r1, #1
 80014bc:	4091      	lsls	r1, r2
 80014be:	000a      	movs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2221      	movs	r2, #33	; 0x21
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2220      	movs	r2, #32
 80014ce:	2100      	movs	r1, #0
 80014d0:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	0010      	movs	r0, r2
 80014e2:	4798      	blx	r3
    } 
  }
  return status;
 80014e4:	230f      	movs	r3, #15
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	781b      	ldrb	r3, [r3, #0]
}
 80014ea:	0018      	movs	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b004      	add	sp, #16
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2204      	movs	r2, #4
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	d024      	beq.n	8001564 <HAL_DMA_IRQHandler+0x72>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d020      	beq.n	8001564 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2220      	movs	r2, #32
 800152a:	4013      	ands	r3, r2
 800152c:	d107      	bne.n	800153e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2104      	movs	r1, #4
 800153a:	438a      	bics	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	2104      	movs	r1, #4
 8001548:	4091      	lsls	r1, r2
 800154a:	000a      	movs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001552:	2b00      	cmp	r3, #0
 8001554:	d100      	bne.n	8001558 <HAL_DMA_IRQHandler+0x66>
 8001556:	e06a      	b.n	800162e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	0010      	movs	r0, r2
 8001560:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001562:	e064      	b.n	800162e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	2202      	movs	r2, #2
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	d02b      	beq.n	80015cc <HAL_DMA_IRQHandler+0xda>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d027      	beq.n	80015cc <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2220      	movs	r2, #32
 8001584:	4013      	ands	r3, r2
 8001586:	d10b      	bne.n	80015a0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	210a      	movs	r1, #10
 8001594:	438a      	bics	r2, r1
 8001596:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2221      	movs	r2, #33	; 0x21
 800159c:	2101      	movs	r1, #1
 800159e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a8:	2102      	movs	r1, #2
 80015aa:	4091      	lsls	r1, r2
 80015ac:	000a      	movs	r2, r1
 80015ae:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2220      	movs	r2, #32
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d036      	beq.n	800162e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	0010      	movs	r0, r2
 80015c8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80015ca:	e030      	b.n	800162e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2208      	movs	r2, #8
 80015d2:	409a      	lsls	r2, r3
 80015d4:	0013      	movs	r3, r2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	d028      	beq.n	800162e <HAL_DMA_IRQHandler+0x13c>
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2208      	movs	r2, #8
 80015e0:	4013      	ands	r3, r2
 80015e2:	d024      	beq.n	800162e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	210e      	movs	r1, #14
 80015f0:	438a      	bics	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	2101      	movs	r1, #1
 80015fe:	4091      	lsls	r1, r2
 8001600:	000a      	movs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	2101      	movs	r1, #1
 8001610:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2220      	movs	r2, #32
 8001616:	2100      	movs	r1, #0
 8001618:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	0010      	movs	r0, r2
 800162a:	4798      	blx	r3
    }
   }
}  
 800162c:	e7ff      	b.n	800162e <HAL_DMA_IRQHandler+0x13c>
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}

08001636 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164c:	2101      	movs	r1, #1
 800164e:	4091      	lsls	r1, r2
 8001650:	000a      	movs	r2, r1
 8001652:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b10      	cmp	r3, #16
 8001662:	d108      	bne.n	8001676 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001674:	e007      	b.n	8001686 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <DMA_CalcBaseAndBitshift+0x30>)
 800169e:	4694      	mov	ip, r2
 80016a0:	4463      	add	r3, ip
 80016a2:	2114      	movs	r1, #20
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7fe fd41 	bl	800012c <__udivsi3>
 80016aa:	0003      	movs	r3, r0
 80016ac:	009a      	lsls	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <DMA_CalcBaseAndBitshift+0x34>)
 80016b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	bffdfff8 	.word	0xbffdfff8
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e149      	b.n	800196c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x28>
 80016ee:	e13a      	b.n	8001966 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	0013      	movs	r3, r2
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
 8001744:	0013      	movs	r3, r2
 8001746:	43da      	mvns	r2, r3
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	2201      	movs	r2, #1
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
 800175c:	0013      	movs	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	4013      	ands	r3, r2
 8001772:	2b03      	cmp	r3, #3
 8001774:	d017      	beq.n	80017a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d123      	bne.n	80017fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	58d3      	ldr	r3, [r2, r3]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	2207      	movs	r2, #7
 80017c4:	4013      	ands	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2107      	movs	r1, #7
 80017de:	400b      	ands	r3, r1
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	409a      	lsls	r2, r3
 8001808:	0013      	movs	r3, r2
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2203      	movs	r2, #3
 8001818:	401a      	ands	r2, r3
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	23c0      	movs	r3, #192	; 0xc0
 8001834:	029b      	lsls	r3, r3, #10
 8001836:	4013      	ands	r3, r2
 8001838:	d100      	bne.n	800183c <HAL_GPIO_Init+0x174>
 800183a:	e094      	b.n	8001966 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183c:	4b51      	ldr	r3, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 800183e:	699a      	ldr	r2, [r3, #24]
 8001840:	4b50      	ldr	r3, [pc, #320]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 8001842:	2101      	movs	r1, #1
 8001844:	430a      	orrs	r2, r1
 8001846:	619a      	str	r2, [r3, #24]
 8001848:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <HAL_GPIO_Init+0x2bc>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2201      	movs	r2, #1
 800184e:	4013      	ands	r3, r2
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001854:	4a4c      	ldr	r2, [pc, #304]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	589b      	ldr	r3, [r3, r2]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2203      	movs	r2, #3
 8001866:	4013      	ands	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	409a      	lsls	r2, r3
 800186e:	0013      	movs	r3, r2
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	2390      	movs	r3, #144	; 0x90
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	429a      	cmp	r2, r3
 8001880:	d00d      	beq.n	800189e <HAL_GPIO_Init+0x1d6>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a41      	ldr	r2, [pc, #260]	; (800198c <HAL_GPIO_Init+0x2c4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d007      	beq.n	800189a <HAL_GPIO_Init+0x1d2>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a40      	ldr	r2, [pc, #256]	; (8001990 <HAL_GPIO_Init+0x2c8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_GPIO_Init+0x1ce>
 8001892:	2302      	movs	r3, #2
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x1d8>
 8001896:	2305      	movs	r3, #5
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x1d8>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x1d8>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	2103      	movs	r1, #3
 80018a4:	400a      	ands	r2, r1
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2c0>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018be:	4b35      	ldr	r3, [pc, #212]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43da      	mvns	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	4013      	ands	r3, r2
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	035b      	lsls	r3, r3, #13
 800192a:	4013      	ands	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001936:	4b17      	ldr	r3, [pc, #92]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43da      	mvns	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	039b      	lsls	r3, r3, #14
 8001954:	4013      	ands	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_GPIO_Init+0x2cc>)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	40da      	lsrs	r2, r3
 8001974:	1e13      	subs	r3, r2, #0
 8001976:	d000      	beq.n	800197a <HAL_GPIO_Init+0x2b2>
 8001978:	e6ae      	b.n	80016d8 <HAL_GPIO_Init+0x10>
  } 
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b006      	add	sp, #24
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	48000400 	.word	0x48000400
 8001990:	48000800 	.word	0x48000800
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	0008      	movs	r0, r1
 80019a2:	0011      	movs	r1, r2
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	1c02      	adds	r2, r0, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	1c7b      	adds	r3, r7, #1
 80019ac:	1c0a      	adds	r2, r1, #0
 80019ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019b0:	1c7b      	adds	r3, r7, #1
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019b8:	1cbb      	adds	r3, r7, #2
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e003      	b.n	80019ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	1cbb      	adds	r3, r7, #2
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b002      	add	sp, #8
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e082      	b.n	8001aec <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2241      	movs	r2, #65	; 0x41
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff f95f 	bl	8000cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2241      	movs	r2, #65	; 0x41
 8001a06:	2124      	movs	r1, #36	; 0x24
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4934      	ldr	r1, [pc, #208]	; (8001af4 <HAL_I2C_Init+0x120>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4931      	ldr	r1, [pc, #196]	; (8001af8 <HAL_I2C_Init+0x124>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	0209      	lsls	r1, r1, #8
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	e007      	b.n	8001a62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2184      	movs	r1, #132	; 0x84
 8001a5c:	0209      	lsls	r1, r1, #8
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d104      	bne.n	8001a74 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2280      	movs	r2, #128	; 0x80
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	491f      	ldr	r1, [pc, #124]	; (8001afc <HAL_I2C_Init+0x128>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68da      	ldr	r2, [r3, #12]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	491a      	ldr	r1, [pc, #104]	; (8001af8 <HAL_I2C_Init+0x124>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69d9      	ldr	r1, [r3, #28]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2101      	movs	r1, #1
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2241      	movs	r2, #65	; 0x41
 8001ad8:	2120      	movs	r1, #32
 8001ada:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2242      	movs	r2, #66	; 0x42
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	f0ffffff 	.word	0xf0ffffff
 8001af8:	ffff7fff 	.word	0xffff7fff
 8001afc:	02008000 	.word	0x02008000

08001b00 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	0008      	movs	r0, r1
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	230a      	movs	r3, #10
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	1c02      	adds	r2, r0, #0
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	1c0a      	adds	r2, r1, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2241      	movs	r2, #65	; 0x41
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	d000      	beq.n	8001b2c <HAL_I2C_Master_Transmit+0x2c>
 8001b2a:	e0e7      	b.n	8001cfc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	5c9b      	ldrb	r3, [r3, r2]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_I2C_Master_Transmit+0x3a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e0e1      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b42:	f7ff fa9f 	bl	8001084 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	0219      	lsls	r1, r3, #8
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	f000 f8fc 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2241      	movs	r2, #65	; 0x41
 8001b68:	2121      	movs	r1, #33	; 0x21
 8001b6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2242      	movs	r2, #66	; 0x42
 8001b70:	2110      	movs	r1, #16
 8001b72:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2208      	movs	r2, #8
 8001b84:	18ba      	adds	r2, r7, r2
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d911      	bls.n	8001bbe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	22ff      	movs	r2, #255	; 0xff
 8001b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	045c      	lsls	r4, r3, #17
 8001baa:	230a      	movs	r3, #10
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	8819      	ldrh	r1, [r3, #0]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	4b55      	ldr	r3, [pc, #340]	; (8001d08 <HAL_I2C_Master_Transmit+0x208>)
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	0023      	movs	r3, r4
 8001bb8:	f000 fa00 	bl	8001fbc <I2C_TransferConfig>
 8001bbc:	e075      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	049c      	lsls	r4, r3, #18
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	18fb      	adds	r3, r7, r3
 8001bd6:	8819      	ldrh	r1, [r3, #0]
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <HAL_I2C_Master_Transmit+0x208>)
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	0023      	movs	r3, r4
 8001be0:	f000 f9ec 	bl	8001fbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001be4:	e061      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f000 f8f0 	bl	8001dd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e081      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	781a      	ldrb	r2, [r3, #0]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d03a      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x1aa>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d136      	bne.n	8001caa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	0013      	movs	r3, r2
 8001c46:	2200      	movs	r2, #0
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	f000 f883 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e053      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d911      	bls.n	8001c84 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	045c      	lsls	r4, r3, #17
 8001c70:	230a      	movs	r3, #10
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	8819      	ldrh	r1, [r3, #0]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	f000 f99d 	bl	8001fbc <I2C_TransferConfig>
 8001c82:	e012      	b.n	8001caa <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	049c      	lsls	r4, r3, #18
 8001c98:	230a      	movs	r3, #10
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	8819      	ldrh	r1, [r3, #0]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	0023      	movs	r3, r4
 8001ca6:	f000 f989 	bl	8001fbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d198      	bne.n	8001be6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f8c8 	bl	8001e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e01a      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	490c      	ldr	r1, [pc, #48]	; (8001d0c <HAL_I2C_Master_Transmit+0x20c>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2241      	movs	r2, #65	; 0x41
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2242      	movs	r2, #66	; 0x42
 8001cec:	2100      	movs	r1, #0
 8001cee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	0018      	movs	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b007      	add	sp, #28
 8001d04:	bd90      	pop	{r4, r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	80002000 	.word	0x80002000
 8001d0c:	fe00e800 	.word	0xfe00e800

08001d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d103      	bne.n	8001d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d007      	beq.n	8001d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	619a      	str	r2, [r3, #24]
  }
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d64:	e021      	b.n	8001daa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	d01e      	beq.n	8001daa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6c:	f7ff f98a 	bl	8001084 <HAL_GetTick>
 8001d70:	0002      	movs	r2, r0
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d302      	bcc.n	8001d82 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d113      	bne.n	8001daa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	2220      	movs	r2, #32
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2241      	movs	r2, #65	; 0x41
 8001d92:	2120      	movs	r1, #32
 8001d94:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2242      	movs	r2, #66	; 0x42
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	425a      	negs	r2, r3
 8001dba:	4153      	adcs	r3, r2
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d0ce      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b004      	add	sp, #16
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dde:	e02b      	b.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	0018      	movs	r0, r3
 8001de8:	f000 f86e 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d001      	beq.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e029      	b.n	8001e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	3301      	adds	r3, #1
 8001df8:	d01e      	beq.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfa:	f7ff f943 	bl	8001084 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d302      	bcc.n	8001e10 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d113      	bne.n	8001e38 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2220      	movs	r2, #32
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2241      	movs	r2, #65	; 0x41
 8001e20:	2120      	movs	r1, #32
 8001e22:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2242      	movs	r2, #66	; 0x42
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	2100      	movs	r1, #0
 8001e32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e007      	b.n	8001e48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d1cc      	bne.n	8001de0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e5c:	e028      	b.n	8001eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 f82f 	bl	8001ec8 <I2C_IsAcknowledgeFailed>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d001      	beq.n	8001e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e026      	b.n	8001ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e72:	f7ff f907 	bl	8001084 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d113      	bne.n	8001eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2241      	movs	r2, #65	; 0x41
 8001e98:	2120      	movs	r1, #32
 8001e9a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2242      	movs	r2, #66	; 0x42
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e007      	b.n	8001ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d1cf      	bne.n	8001e5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b004      	add	sp, #16
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2210      	movs	r2, #16
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d164      	bne.n	8001fac <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	049b      	lsls	r3, r3, #18
 8001eec:	401a      	ands	r2, r3
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	049b      	lsls	r3, r3, #18
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d02b      	beq.n	8001f4e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	01c9      	lsls	r1, r1, #7
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f08:	e021      	b.n	8001f4e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	d01e      	beq.n	8001f4e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f10:	f7ff f8b8 	bl	8001084 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d302      	bcc.n	8001f26 <I2C_IsAcknowledgeFailed+0x5e>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d113      	bne.n	8001f4e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2241      	movs	r2, #65	; 0x41
 8001f36:	2120      	movs	r1, #32
 8001f38:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2242      	movs	r2, #66	; 0x42
 8001f3e:	2100      	movs	r1, #0
 8001f40:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	2100      	movs	r1, #0
 8001f48:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e02f      	b.n	8001fae <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2220      	movs	r2, #32
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d1d6      	bne.n	8001f0a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2210      	movs	r2, #16
 8001f62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fece 	bl	8001d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <I2C_IsAcknowledgeFailed+0xf0>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f88:	2204      	movs	r2, #4
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2241      	movs	r2, #65	; 0x41
 8001f94:	2120      	movs	r1, #32
 8001f96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2242      	movs	r2, #66	; 0x42
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	fe00e800 	.word	0xfe00e800

08001fbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	0008      	movs	r0, r1
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	240a      	movs	r4, #10
 8001fcc:	193b      	adds	r3, r7, r4
 8001fce:	1c02      	adds	r2, r0, #0
 8001fd0:	801a      	strh	r2, [r3, #0]
 8001fd2:	2009      	movs	r0, #9
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	1c0a      	adds	r2, r1, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	0d51      	lsrs	r1, r2, #21
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	00d2      	lsls	r2, r2, #3
 8001fe8:	400a      	ands	r2, r1
 8001fea:	490e      	ldr	r1, [pc, #56]	; (8002024 <I2C_TransferConfig+0x68>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	43d2      	mvns	r2, r2
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	059b      	lsls	r3, r3, #22
 8001ffa:	0d9a      	lsrs	r2, r3, #22
 8001ffc:	183b      	adds	r3, r7, r0
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	0418      	lsls	r0, r3, #16
 8002002:	23ff      	movs	r3, #255	; 0xff
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	4003      	ands	r3, r0
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	6a3b      	ldr	r3, [r7, #32]
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b005      	add	sp, #20
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	03ff63ff 	.word	0x03ff63ff

08002028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2241      	movs	r2, #65	; 0x41
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b20      	cmp	r3, #32
 800203c:	d138      	bne.n	80020b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002048:	2302      	movs	r3, #2
 800204a:	e032      	b.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2241      	movs	r2, #65	; 0x41
 8002058:	2124      	movs	r1, #36	; 0x24
 800205a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	438a      	bics	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4911      	ldr	r1, [pc, #68]	; (80020bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002078:	400a      	ands	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2101      	movs	r1, #1
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2241      	movs	r2, #65	; 0x41
 80020a0:	2120      	movs	r1, #32
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2100      	movs	r1, #0
 80020aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e000      	b.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020b0:	2302      	movs	r3, #2
  }
}
 80020b2:	0018      	movs	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	ffffefff 	.word	0xffffefff

080020c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2241      	movs	r2, #65	; 0x41
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d139      	bne.n	800214a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2240      	movs	r2, #64	; 0x40
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e033      	b.n	800214c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2240      	movs	r2, #64	; 0x40
 80020e8:	2101      	movs	r1, #1
 80020ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2241      	movs	r2, #65	; 0x41
 80020f0:	2124      	movs	r1, #36	; 0x24
 80020f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2101      	movs	r1, #1
 8002100:	438a      	bics	r2, r1
 8002102:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	2120      	movs	r1, #32
 800213c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	e000      	b.n	800214c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800214a:	2302      	movs	r3, #2
  }
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	fffff0ff 	.word	0xfffff0ff

08002158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e301      	b.n	800276e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4013      	ands	r3, r2
 8002172:	d100      	bne.n	8002176 <HAL_RCC_OscConfig+0x1e>
 8002174:	e08d      	b.n	8002292 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002176:	4bc3      	ldr	r3, [pc, #780]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	220c      	movs	r2, #12
 800217c:	4013      	ands	r3, r2
 800217e:	2b04      	cmp	r3, #4
 8002180:	d00e      	beq.n	80021a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002182:	4bc0      	ldr	r3, [pc, #768]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	220c      	movs	r2, #12
 8002188:	4013      	ands	r3, r2
 800218a:	2b08      	cmp	r3, #8
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x64>
 800218e:	4bbd      	ldr	r3, [pc, #756]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	401a      	ands	r2, r3
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	025b      	lsls	r3, r3, #9
 800219c:	429a      	cmp	r2, r3
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a0:	4bb8      	ldr	r3, [pc, #736]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	029b      	lsls	r3, r3, #10
 80021a8:	4013      	ands	r3, r2
 80021aa:	d100      	bne.n	80021ae <HAL_RCC_OscConfig+0x56>
 80021ac:	e070      	b.n	8002290 <HAL_RCC_OscConfig+0x138>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d000      	beq.n	80021b8 <HAL_RCC_OscConfig+0x60>
 80021b6:	e06b      	b.n	8002290 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e2d8      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x7c>
 80021c4:	4baf      	ldr	r3, [pc, #700]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4bae      	ldr	r3, [pc, #696]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	0249      	lsls	r1, r1, #9
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e02f      	b.n	8002234 <HAL_RCC_OscConfig+0xdc>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10c      	bne.n	80021f6 <HAL_RCC_OscConfig+0x9e>
 80021dc:	4ba9      	ldr	r3, [pc, #676]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4ba8      	ldr	r3, [pc, #672]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	49a9      	ldr	r1, [pc, #676]	; (8002488 <HAL_RCC_OscConfig+0x330>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	4ba6      	ldr	r3, [pc, #664]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4ba5      	ldr	r3, [pc, #660]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	49a7      	ldr	r1, [pc, #668]	; (800248c <HAL_RCC_OscConfig+0x334>)
 80021f0:	400a      	ands	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e01e      	b.n	8002234 <HAL_RCC_OscConfig+0xdc>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	d10e      	bne.n	800221c <HAL_RCC_OscConfig+0xc4>
 80021fe:	4ba1      	ldr	r3, [pc, #644]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	02c9      	lsls	r1, r1, #11
 8002208:	430a      	orrs	r2, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b9d      	ldr	r3, [pc, #628]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b9c      	ldr	r3, [pc, #624]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002212:	2180      	movs	r1, #128	; 0x80
 8002214:	0249      	lsls	r1, r1, #9
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xdc>
 800221c:	4b99      	ldr	r3, [pc, #612]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b98      	ldr	r3, [pc, #608]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002222:	4999      	ldr	r1, [pc, #612]	; (8002488 <HAL_RCC_OscConfig+0x330>)
 8002224:	400a      	ands	r2, r1
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	4b96      	ldr	r3, [pc, #600]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b95      	ldr	r3, [pc, #596]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800222e:	4997      	ldr	r1, [pc, #604]	; (800248c <HAL_RCC_OscConfig+0x334>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d014      	beq.n	8002266 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe ff22 	bl	8001084 <HAL_GetTick>
 8002240:	0003      	movs	r3, r0
 8002242:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002246:	f7fe ff1d 	bl	8001084 <HAL_GetTick>
 800224a:	0002      	movs	r2, r0
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	; 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e28a      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002258:	4b8a      	ldr	r3, [pc, #552]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0xee>
 8002264:	e015      	b.n	8002292 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe ff0d 	bl	8001084 <HAL_GetTick>
 800226a:	0003      	movs	r3, r0
 800226c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7fe ff08 	bl	8001084 <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e275      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b80      	ldr	r3, [pc, #512]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	029b      	lsls	r3, r3, #10
 800228a:	4013      	ands	r3, r2
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0x118>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2202      	movs	r2, #2
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_RCC_OscConfig+0x146>
 800229c:	e069      	b.n	8002372 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800229e:	4b79      	ldr	r3, [pc, #484]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	220c      	movs	r2, #12
 80022a4:	4013      	ands	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022a8:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	220c      	movs	r2, #12
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d11c      	bne.n	80022ee <HAL_RCC_OscConfig+0x196>
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	025b      	lsls	r3, r3, #9
 80022bc:	4013      	ands	r3, r2
 80022be:	d116      	bne.n	80022ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e24b      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22f8      	movs	r2, #248	; 0xf8
 80022dc:	4393      	bics	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00da      	lsls	r2, r3, #3
 80022e6:	4b67      	ldr	r3, [pc, #412]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ec:	e041      	b.n	8002372 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d024      	beq.n	8002340 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f6:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b62      	ldr	r3, [pc, #392]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	430a      	orrs	r2, r1
 8002300:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe febf 	bl	8001084 <HAL_GetTick>
 8002306:	0003      	movs	r3, r0
 8002308:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230c:	f7fe feba 	bl	8001084 <HAL_GetTick>
 8002310:	0002      	movs	r2, r0
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e227      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d0f1      	beq.n	800230c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	22f8      	movs	r2, #248	; 0xf8
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e018      	b.n	8002372 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b4f      	ldr	r3, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7fe fe9a 	bl	8001084 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fe95 	bl	8001084 <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e202      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d1f1      	bne.n	8002356 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2208      	movs	r2, #8
 8002378:	4013      	ands	r3, r2
 800237a:	d036      	beq.n	80023ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d019      	beq.n	80023b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002384:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800238a:	2101      	movs	r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fe78 	bl	8001084 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239a:	f7fe fe73 	bl	8001084 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1e0      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d0f1      	beq.n	800239a <HAL_RCC_OscConfig+0x242>
 80023b6:	e018      	b.n	80023ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80023ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023bc:	4b31      	ldr	r3, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7fe fe5e 	bl	8001084 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ce:	f7fe fe59 	bl	8001084 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1c6      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2202      	movs	r2, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d1f1      	bne.n	80023ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2204      	movs	r2, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x29e>
 80023f4:	e0b4      	b.n	8002560 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	201f      	movs	r0, #31
 80023f8:	183b      	adds	r3, r7, r0
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	055b      	lsls	r3, r3, #21
 8002406:	4013      	ands	r3, r2
 8002408:	d110      	bne.n	800242c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0549      	lsls	r1, r1, #21
 8002414:	430a      	orrs	r2, r1
 8002416:	61da      	str	r2, [r3, #28]
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002426:	183b      	adds	r3, r7, r0
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_RCC_OscConfig+0x338>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d11a      	bne.n	800246e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x338>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_RCC_OscConfig+0x338>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe fe1d 	bl	8001084 <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fe18 	bl	8001084 <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	; 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e185      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x338>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d10e      	bne.n	8002494 <HAL_RCC_OscConfig+0x33c>
 8002476:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	4b02      	ldr	r3, [pc, #8]	; (8002484 <HAL_RCC_OscConfig+0x32c>)
 800247c:	2101      	movs	r1, #1
 800247e:	430a      	orrs	r2, r1
 8002480:	621a      	str	r2, [r3, #32]
 8002482:	e035      	b.n	80024f0 <HAL_RCC_OscConfig+0x398>
 8002484:	40021000 	.word	0x40021000
 8002488:	fffeffff 	.word	0xfffeffff
 800248c:	fffbffff 	.word	0xfffbffff
 8002490:	40007000 	.word	0x40007000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10c      	bne.n	80024b6 <HAL_RCC_OscConfig+0x35e>
 800249c:	4bb6      	ldr	r3, [pc, #728]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800249e:	6a1a      	ldr	r2, [r3, #32]
 80024a0:	4bb5      	ldr	r3, [pc, #724]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024a2:	2101      	movs	r1, #1
 80024a4:	438a      	bics	r2, r1
 80024a6:	621a      	str	r2, [r3, #32]
 80024a8:	4bb3      	ldr	r3, [pc, #716]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	4bb2      	ldr	r3, [pc, #712]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024ae:	2104      	movs	r1, #4
 80024b0:	438a      	bics	r2, r1
 80024b2:	621a      	str	r2, [r3, #32]
 80024b4:	e01c      	b.n	80024f0 <HAL_RCC_OscConfig+0x398>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x380>
 80024be:	4bae      	ldr	r3, [pc, #696]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	4bad      	ldr	r3, [pc, #692]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024c4:	2104      	movs	r1, #4
 80024c6:	430a      	orrs	r2, r1
 80024c8:	621a      	str	r2, [r3, #32]
 80024ca:	4bab      	ldr	r3, [pc, #684]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	4baa      	ldr	r3, [pc, #680]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	621a      	str	r2, [r3, #32]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0x398>
 80024d8:	4ba7      	ldr	r3, [pc, #668]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	4ba6      	ldr	r3, [pc, #664]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024de:	2101      	movs	r1, #1
 80024e0:	438a      	bics	r2, r1
 80024e2:	621a      	str	r2, [r3, #32]
 80024e4:	4ba4      	ldr	r3, [pc, #656]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024e6:	6a1a      	ldr	r2, [r3, #32]
 80024e8:	4ba3      	ldr	r3, [pc, #652]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80024ea:	2104      	movs	r1, #4
 80024ec:	438a      	bics	r2, r1
 80024ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d014      	beq.n	8002522 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7fe fdc4 	bl	8001084 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fdbf 	bl	8001084 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4a9b      	ldr	r2, [pc, #620]	; (800277c <HAL_RCC_OscConfig+0x624>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e12b      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	4b98      	ldr	r3, [pc, #608]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2202      	movs	r2, #2
 800251c:	4013      	ands	r3, r2
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x3aa>
 8002520:	e013      	b.n	800254a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002522:	f7fe fdaf 	bl	8001084 <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252a:	e009      	b.n	8002540 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7fe fdaa 	bl	8001084 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	4a91      	ldr	r2, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x624>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e116      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b8d      	ldr	r3, [pc, #564]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	2202      	movs	r2, #2
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254a:	231f      	movs	r3, #31
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002554:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800255a:	4989      	ldr	r1, [pc, #548]	; (8002780 <HAL_RCC_OscConfig+0x628>)
 800255c:	400a      	ands	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	4013      	ands	r3, r2
 8002568:	d063      	beq.n	8002632 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d12a      	bne.n	80025c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002572:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002576:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002578:	2104      	movs	r1, #4
 800257a:	430a      	orrs	r2, r1
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800257e:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002584:	2101      	movs	r1, #1
 8002586:	430a      	orrs	r2, r1
 8002588:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7fe fd7b 	bl	8001084 <HAL_GetTick>
 800258e:	0003      	movs	r3, r0
 8002590:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002594:	f7fe fd76 	bl	8001084 <HAL_GetTick>
 8002598:	0002      	movs	r2, r0
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0e3      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025a6:	4b74      	ldr	r3, [pc, #464]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0f1      	beq.n	8002594 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025b0:	4b71      	ldr	r3, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b4:	22f8      	movs	r2, #248	; 0xf8
 80025b6:	4393      	bics	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	00da      	lsls	r2, r3, #3
 80025c0:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34
 80025c6:	e034      	b.n	8002632 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	3305      	adds	r3, #5
 80025ce:	d111      	bne.n	80025f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80025d0:	4b69      	ldr	r3, [pc, #420]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025d6:	2104      	movs	r1, #4
 80025d8:	438a      	bics	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025dc:	4b66      	ldr	r3, [pc, #408]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	22f8      	movs	r2, #248	; 0xf8
 80025e2:	4393      	bics	r3, r2
 80025e4:	0019      	movs	r1, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	00da      	lsls	r2, r3, #3
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34
 80025f2:	e01e      	b.n	8002632 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025f4:	4b60      	ldr	r3, [pc, #384]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f8:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80025fa:	2104      	movs	r1, #4
 80025fc:	430a      	orrs	r2, r1
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002600:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002606:	2101      	movs	r1, #1
 8002608:	438a      	bics	r2, r1
 800260a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7fe fd3a 	bl	8001084 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002616:	f7fe fd35 	bl	8001084 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e0a2      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002628:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800262a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262c:	2202      	movs	r2, #2
 800262e:	4013      	ands	r3, r2
 8002630:	d1f1      	bne.n	8002616 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d100      	bne.n	800263c <HAL_RCC_OscConfig+0x4e4>
 800263a:	e097      	b.n	800276c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263c:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	220c      	movs	r2, #12
 8002642:	4013      	ands	r3, r2
 8002644:	2b08      	cmp	r3, #8
 8002646:	d100      	bne.n	800264a <HAL_RCC_OscConfig+0x4f2>
 8002648:	e06b      	b.n	8002722 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d14c      	bne.n	80026ec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002658:	494a      	ldr	r1, [pc, #296]	; (8002784 <HAL_RCC_OscConfig+0x62c>)
 800265a:	400a      	ands	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fd11 	bl	8001084 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fd0c 	bl	8001084 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e079      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	049b      	lsls	r3, r3, #18
 8002682:	4013      	ands	r3, r2
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002686:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	220f      	movs	r2, #15
 800268c:	4393      	bics	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002694:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x630>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	0019      	movs	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	431a      	orrs	r2, r3
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0449      	lsls	r1, r1, #17
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7fe fcdf 	bl	8001084 <HAL_GetTick>
 80026c6:	0003      	movs	r3, r0
 80026c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026cc:	f7fe fcda 	bl	8001084 <HAL_GetTick>
 80026d0:	0002      	movs	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e047      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	049b      	lsls	r3, r3, #18
 80026e6:	4013      	ands	r3, r2
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x574>
 80026ea:	e03f      	b.n	800276c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b21      	ldr	r3, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 80026f2:	4924      	ldr	r1, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x62c>)
 80026f4:	400a      	ands	r2, r1
 80026f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fcc4 	bl	8001084 <HAL_GetTick>
 80026fc:	0003      	movs	r3, r0
 80026fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fcbf 	bl	8001084 <HAL_GetTick>
 8002706:	0002      	movs	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e02c      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	049b      	lsls	r3, r3, #18
 800271c:	4013      	ands	r3, r2
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x5aa>
 8002720:	e024      	b.n	800276c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e01f      	b.n	800276e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x620>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	025b      	lsls	r3, r3, #9
 8002740:	401a      	ands	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	429a      	cmp	r2, r3
 8002748:	d10e      	bne.n	8002768 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	220f      	movs	r2, #15
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	23f0      	movs	r3, #240	; 0xf0
 800275c:	039b      	lsls	r3, r3, #14
 800275e:	401a      	ands	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	0018      	movs	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	b008      	add	sp, #32
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	40021000 	.word	0x40021000
 800277c:	00001388 	.word	0x00001388
 8002780:	efffffff 	.word	0xefffffff
 8002784:	feffffff 	.word	0xfeffffff
 8002788:	ffc2ffff 	.word	0xffc2ffff

0800278c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0b3      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4013      	ands	r3, r2
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d911      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4393      	bics	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c0:	4b53      	ldr	r3, [pc, #332]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e09a      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d015      	beq.n	8002808 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2204      	movs	r2, #4
 80027e2:	4013      	ands	r3, r2
 80027e4:	d006      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027e6:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80027ec:	21e0      	movs	r1, #224	; 0xe0
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	430a      	orrs	r2, r1
 80027f2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	22f0      	movs	r2, #240	; 0xf0
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	4b44      	ldr	r3, [pc, #272]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002804:	430a      	orrs	r2, r1
 8002806:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2201      	movs	r2, #1
 800280e:	4013      	ands	r3, r2
 8002810:	d040      	beq.n	8002894 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	029b      	lsls	r3, r3, #10
 8002822:	4013      	ands	r3, r2
 8002824:	d114      	bne.n	8002850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06e      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002832:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	049b      	lsls	r3, r3, #18
 800283a:	4013      	ands	r3, r2
 800283c:	d108      	bne.n	8002850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e062      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002842:	4b34      	ldr	r3, [pc, #208]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2202      	movs	r2, #2
 8002848:	4013      	ands	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e05b      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002850:	4b30      	ldr	r3, [pc, #192]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2203      	movs	r2, #3
 8002856:	4393      	bics	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002860:	430a      	orrs	r2, r1
 8002862:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002864:	f7fe fc0e 	bl	8001084 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286c:	e009      	b.n	8002882 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286e:	f7fe fc09 	bl	8001084 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_RCC_ClockConfig+0x18c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e042      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	4b24      	ldr	r3, [pc, #144]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	220c      	movs	r2, #12
 8002888:	401a      	ands	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	429a      	cmp	r2, r3
 8002892:	d1ec      	bne.n	800286e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	4013      	ands	r3, r2
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d211      	bcs.n	80028c6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4393      	bics	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_ClockConfig+0x184>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2201      	movs	r2, #1
 80028ba:	4013      	ands	r3, r2
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e020      	b.n	8002908 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2204      	movs	r2, #4
 80028cc:	4013      	ands	r3, r2
 80028ce:	d009      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a11      	ldr	r2, [pc, #68]	; (800291c <HAL_RCC_ClockConfig+0x190>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028e4:	f000 f820 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80028e8:	0001      	movs	r1, r0
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <HAL_RCC_ClockConfig+0x188>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	220f      	movs	r2, #15
 80028f2:	4013      	ands	r3, r2
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HAL_RCC_ClockConfig+0x194>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	000a      	movs	r2, r1
 80028fa:	40da      	lsrs	r2, r3
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_ClockConfig+0x198>)
 80028fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002900:	2003      	movs	r0, #3
 8002902:	f7fe fb79 	bl	8000ff8 <HAL_InitTick>
  
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b004      	add	sp, #16
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40022000 	.word	0x40022000
 8002914:	40021000 	.word	0x40021000
 8002918:	00001388 	.word	0x00001388
 800291c:	fffff8ff 	.word	0xfffff8ff
 8002920:	08004900 	.word	0x08004900
 8002924:	20000004 	.word	0x20000004

08002928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b08f      	sub	sp, #60	; 0x3c
 800292c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800292e:	2314      	movs	r3, #20
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002934:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002936:	c313      	stmia	r3!, {r0, r1, r4}
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800293c:	1d3b      	adds	r3, r7, #4
 800293e:	4a29      	ldr	r2, [pc, #164]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002940:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002942:	c313      	stmia	r3!, {r0, r1, r4}
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002950:	2300      	movs	r3, #0
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
 8002954:	2300      	movs	r3, #0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	220c      	movs	r2, #12
 8002966:	4013      	ands	r3, r2
 8002968:	2b04      	cmp	r3, #4
 800296a:	d002      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x4a>
 800296c:	2b08      	cmp	r3, #8
 800296e:	d003      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x50>
 8002970:	e02d      	b.n	80029ce <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002976:	e02d      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	220f      	movs	r2, #15
 800297e:	4013      	ands	r3, r2
 8002980:	2214      	movs	r2, #20
 8002982:	18ba      	adds	r2, r7, r2
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	220f      	movs	r2, #15
 800298e:	4013      	ands	r3, r2
 8002990:	1d3a      	adds	r2, r7, #4
 8002992:	5cd3      	ldrb	r3, [r2, r3]
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	025b      	lsls	r3, r3, #9
 800299c:	4013      	ands	r3, r2
 800299e:	d009      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a2:	4812      	ldr	r0, [pc, #72]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80029a4:	f7fd fbc2 	bl	800012c <__udivsi3>
 80029a8:	0003      	movs	r3, r0
 80029aa:	001a      	movs	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	4353      	muls	r3, r2
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	e009      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b6:	000a      	movs	r2, r1
 80029b8:	0152      	lsls	r2, r2, #5
 80029ba:	1a52      	subs	r2, r2, r1
 80029bc:	0193      	lsls	r3, r2, #6
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	185b      	adds	r3, r3, r1
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029cc:	e002      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80029d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80029d6:	0018      	movs	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	b00f      	add	sp, #60	; 0x3c
 80029dc:	bd90      	pop	{r4, r7, pc}
 80029de:	46c0      	nop			; (mov r8, r8)
 80029e0:	080048e0 	.word	0x080048e0
 80029e4:	080048f0 	.word	0x080048f0
 80029e8:	40021000 	.word	0x40021000
 80029ec:	007a1200 	.word	0x007a1200

080029f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029f4:	4b02      	ldr	r3, [pc, #8]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x10>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	20000004 	.word	0x20000004

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002a08:	f7ff fff2 	bl	80029f0 <HAL_RCC_GetHCLKFreq>
 8002a0c:	0001      	movs	r1, r0
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1a:	5cd3      	ldrb	r3, [r2, r3]
 8002a1c:	40d9      	lsrs	r1, r3
 8002a1e:	000b      	movs	r3, r1
}    
 8002a20:	0018      	movs	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004910 	.word	0x08004910

08002a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	025b      	lsls	r3, r3, #9
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002a4c:	e08e      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002a4e:	2017      	movs	r0, #23
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	055b      	lsls	r3, r3, #21
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d110      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0549      	lsls	r1, r1, #21
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
 8002a70:	4b50      	ldr	r3, [pc, #320]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	2380      	movs	r3, #128	; 0x80
 8002a76:	055b      	lsls	r3, r3, #21
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	183b      	adds	r3, r7, r0
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	4b4c      	ldr	r3, [pc, #304]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d11a      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a90:	4b49      	ldr	r3, [pc, #292]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b48      	ldr	r3, [pc, #288]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a96:	2180      	movs	r1, #128	; 0x80
 8002a98:	0049      	lsls	r1, r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe faf1 	bl	8001084 <HAL_GetTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	e008      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa8:	f7fe faec 	bl	8001084 <HAL_GetTick>
 8002aac:	0002      	movs	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	; 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e077      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ac8:	6a1a      	ldr	r2, [r3, #32]
 8002aca:	23c0      	movs	r3, #192	; 0xc0
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d034      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	23c0      	movs	r3, #192	; 0xc0
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d02c      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ae8:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af4:	6a1a      	ldr	r2, [r3, #32]
 8002af6:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0249      	lsls	r1, r1, #9
 8002afc:	430a      	orrs	r2, r1
 8002afe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b00:	4b2c      	ldr	r3, [pc, #176]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b06:	492e      	ldr	r1, [pc, #184]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fab3 	bl	8001084 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	e009      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe faae 	bl	8001084 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e038      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b52:	430a      	orrs	r2, r1
 8002b54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b56:	2317      	movs	r3, #23
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b66:	4918      	ldr	r1, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	d009      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	4013      	ands	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	fffffcff 	.word	0xfffffcff
 8002bc0:	fffeffff 	.word	0xfffeffff
 8002bc4:	00001388 	.word	0x00001388
 8002bc8:	efffffff 	.word	0xefffffff

08002bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e044      	b.n	8002c68 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d107      	bne.n	8002bf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2274      	movs	r2, #116	; 0x74
 8002bea:	2100      	movs	r1, #0
 8002bec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe f8b3 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	438a      	bics	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 fbd2 	bl	80033b8 <UART_SetConfig>
 8002c14:	0003      	movs	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e024      	b.n	8002c68 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f000 fcef 	bl	800360c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	490d      	ldr	r1, [pc, #52]	; (8002c70 <HAL_UART_Init+0xa4>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	212a      	movs	r1, #42	; 0x2a
 8002c4a:	438a      	bics	r2, r1
 8002c4c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f000 fd87 	bl	8003774 <UART_CheckIdleState>
 8002c66:	0003      	movs	r3, r0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	ffffb7ff 	.word	0xffffb7ff

08002c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d000      	beq.n	8002c8e <HAL_UART_Transmit+0x1a>
 8002c8c:	e096      	b.n	8002dbc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_UART_Transmit+0x28>
 8002c94:	1dbb      	adds	r3, r7, #6
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e08e      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	015b      	lsls	r3, r3, #5
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d109      	bne.n	8002cc0 <HAL_UART_Transmit+0x4c>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d105      	bne.n	8002cc0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d001      	beq.n	8002cc0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e07e      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2274      	movs	r2, #116	; 0x74
 8002cc4:	5c9b      	ldrb	r3, [r3, r2]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Transmit+0x5a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e077      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2274      	movs	r2, #116	; 0x74
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2280      	movs	r2, #128	; 0x80
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2221      	movs	r2, #33	; 0x21
 8002ce2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce4:	f7fe f9ce 	bl	8001084 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1dba      	adds	r2, r7, #6
 8002cf0:	2150      	movs	r1, #80	; 0x50
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1dba      	adds	r2, r7, #6
 8002cfa:	2152      	movs	r1, #82	; 0x52
 8002cfc:	8812      	ldrh	r2, [r2, #0]
 8002cfe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d108      	bne.n	8002d1e <HAL_UART_Transmit+0xaa>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	61bb      	str	r3, [r7, #24]
 8002d1c:	e003      	b.n	8002d26 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2274      	movs	r2, #116	; 0x74
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002d2e:	e02d      	b.n	8002d8c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	0013      	movs	r3, r2
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	f000 fd61 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e039      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10b      	bne.n	8002d68 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	881a      	ldrh	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	05d2      	lsls	r2, r2, #23
 8002d5a:	0dd2      	lsrs	r2, r2, #23
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	3302      	adds	r3, #2
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	e008      	b.n	8002d7a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	b292      	uxth	r2, r2
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3301      	adds	r3, #1
 8002d78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2252      	movs	r2, #82	; 0x52
 8002d7e:	5a9b      	ldrh	r3, [r3, r2]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b299      	uxth	r1, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2252      	movs	r2, #82	; 0x52
 8002d8a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2252      	movs	r2, #82	; 0x52
 8002d90:	5a9b      	ldrh	r3, [r3, r2]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1cb      	bne.n	8002d30 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	0013      	movs	r3, r2
 8002da2:	2200      	movs	r2, #0
 8002da4:	2140      	movs	r1, #64	; 0x40
 8002da6:	f000 fd2d 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e005      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b008      	add	sp, #32
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dc8:	b590      	push	{r4, r7, lr}
 8002dca:	b0ab      	sub	sp, #172	; 0xac
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	22a4      	movs	r2, #164	; 0xa4
 8002dd8:	18b9      	adds	r1, r7, r2
 8002dda:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	20a0      	movs	r0, #160	; 0xa0
 8002de4:	1839      	adds	r1, r7, r0
 8002de6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	219c      	movs	r1, #156	; 0x9c
 8002df0:	1879      	adds	r1, r7, r1
 8002df2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002df4:	0011      	movs	r1, r2
 8002df6:	18bb      	adds	r3, r7, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a99      	ldr	r2, [pc, #612]	; (8003060 <HAL_UART_IRQHandler+0x298>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2298      	movs	r2, #152	; 0x98
 8002e00:	18bc      	adds	r4, r7, r2
 8002e02:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e04:	18bb      	adds	r3, r7, r2
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d114      	bne.n	8002e36 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e0c:	187b      	adds	r3, r7, r1
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2220      	movs	r2, #32
 8002e12:	4013      	ands	r3, r2
 8002e14:	d00f      	beq.n	8002e36 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d00a      	beq.n	8002e36 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <HAL_UART_IRQHandler+0x62>
 8002e28:	e296      	b.n	8003358 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	0010      	movs	r0, r2
 8002e32:	4798      	blx	r3
      }
      return;
 8002e34:	e290      	b.n	8003358 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e36:	2398      	movs	r3, #152	; 0x98
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d100      	bne.n	8002e42 <HAL_UART_IRQHandler+0x7a>
 8002e40:	e114      	b.n	800306c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e42:	239c      	movs	r3, #156	; 0x9c
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e4e:	23a0      	movs	r3, #160	; 0xa0
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a83      	ldr	r2, [pc, #524]	; (8003064 <HAL_UART_IRQHandler+0x29c>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	d100      	bne.n	8002e5c <HAL_UART_IRQHandler+0x94>
 8002e5a:	e107      	b.n	800306c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e5c:	23a4      	movs	r3, #164	; 0xa4
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4013      	ands	r3, r2
 8002e66:	d012      	beq.n	8002e8e <HAL_UART_IRQHandler+0xc6>
 8002e68:	23a0      	movs	r3, #160	; 0xa0
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2380      	movs	r3, #128	; 0x80
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4013      	ands	r3, r2
 8002e74:	d00b      	beq.n	8002e8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	589b      	ldr	r3, [r3, r2]
 8002e84:	2201      	movs	r2, #1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e8e:	23a4      	movs	r3, #164	; 0xa4
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d011      	beq.n	8002ebe <HAL_UART_IRQHandler+0xf6>
 8002e9a:	239c      	movs	r3, #156	; 0x9c
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ebe:	23a4      	movs	r3, #164	; 0xa4
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d011      	beq.n	8002eee <HAL_UART_IRQHandler+0x126>
 8002eca:	239c      	movs	r3, #156	; 0x9c
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2204      	movs	r2, #4
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002eee:	23a4      	movs	r3, #164	; 0xa4
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d017      	beq.n	8002f2a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002efa:	23a0      	movs	r3, #160	; 0xa0
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2220      	movs	r2, #32
 8002f02:	4013      	ands	r3, r2
 8002f04:	d105      	bne.n	8002f12 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f06:	239c      	movs	r3, #156	; 0x9c
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f10:	d00b      	beq.n	8002f2a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2208      	movs	r2, #8
 8002f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	589b      	ldr	r3, [r3, r2]
 8002f20:	2208      	movs	r2, #8
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f2a:	23a4      	movs	r3, #164	; 0xa4
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	4013      	ands	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_UART_IRQHandler+0x198>
 8002f38:	23a0      	movs	r3, #160	; 0xa0
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	04db      	lsls	r3, r3, #19
 8002f42:	4013      	ands	r3, r2
 8002f44:	d00c      	beq.n	8002f60 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	589b      	ldr	r3, [r3, r2]
 8002f56:	2220      	movs	r2, #32
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2180      	movs	r1, #128	; 0x80
 8002f5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	589b      	ldr	r3, [r3, r2]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d100      	bne.n	8002f6c <HAL_UART_IRQHandler+0x1a4>
 8002f6a:	e1f7      	b.n	800335c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f6c:	23a4      	movs	r3, #164	; 0xa4
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2220      	movs	r2, #32
 8002f74:	4013      	ands	r3, r2
 8002f76:	d00e      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f78:	23a0      	movs	r3, #160	; 0xa0
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	4013      	ands	r3, r2
 8002f82:	d008      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d004      	beq.n	8002f96 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	0010      	movs	r0, r2
 8002f94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	589b      	ldr	r3, [r3, r2]
 8002f9c:	2194      	movs	r1, #148	; 0x94
 8002f9e:	187a      	adds	r2, r7, r1
 8002fa0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2240      	movs	r2, #64	; 0x40
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d004      	beq.n	8002fba <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fb0:	187b      	adds	r3, r7, r1
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2228      	movs	r2, #40	; 0x28
 8002fb6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb8:	d047      	beq.n	800304a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	f000 fdab 	bl	8003b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2240      	movs	r2, #64	; 0x40
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d137      	bne.n	8003040 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd8:	2090      	movs	r0, #144	; 0x90
 8002fda:	183a      	adds	r2, r7, r0
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	438a      	bics	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_UART_IRQHandler+0x2a0>)
 8003016:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe fa23 	bl	8001468 <HAL_DMA_Abort_IT>
 8003022:	1e03      	subs	r3, r0, #0
 8003024:	d01a      	beq.n	800305c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	0018      	movs	r0, r3
 8003032:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003034:	e012      	b.n	800305c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f9b5 	bl	80033a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303e:	e00d      	b.n	800305c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f9b0 	bl	80033a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003048:	e008      	b.n	800305c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	0018      	movs	r0, r3
 800304e:	f000 f9ab 	bl	80033a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	2100      	movs	r1, #0
 8003058:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800305a:	e17f      	b.n	800335c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305c:	46c0      	nop			; (mov r8, r8)
    return;
 800305e:	e17d      	b.n	800335c <HAL_UART_IRQHandler+0x594>
 8003060:	0000080f 	.word	0x0000080f
 8003064:	04000120 	.word	0x04000120
 8003068:	08003dbf 	.word	0x08003dbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003070:	2b01      	cmp	r3, #1
 8003072:	d000      	beq.n	8003076 <HAL_UART_IRQHandler+0x2ae>
 8003074:	e131      	b.n	80032da <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003076:	23a4      	movs	r3, #164	; 0xa4
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2210      	movs	r2, #16
 800307e:	4013      	ands	r3, r2
 8003080:	d100      	bne.n	8003084 <HAL_UART_IRQHandler+0x2bc>
 8003082:	e12a      	b.n	80032da <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003084:	23a0      	movs	r3, #160	; 0xa0
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2210      	movs	r2, #16
 800308c:	4013      	ands	r3, r2
 800308e:	d100      	bne.n	8003092 <HAL_UART_IRQHandler+0x2ca>
 8003090:	e123      	b.n	80032da <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2210      	movs	r2, #16
 8003098:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2240      	movs	r2, #64	; 0x40
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b40      	cmp	r3, #64	; 0x40
 80030a6:	d000      	beq.n	80030aa <HAL_UART_IRQHandler+0x2e2>
 80030a8:	e09b      	b.n	80031e2 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	217e      	movs	r1, #126	; 0x7e
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <HAL_UART_IRQHandler+0x2fa>
 80030c0:	e14e      	b.n	8003360 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2258      	movs	r2, #88	; 0x58
 80030c6:	5a9b      	ldrh	r3, [r3, r2]
 80030c8:	187a      	adds	r2, r7, r1
 80030ca:	8812      	ldrh	r2, [r2, #0]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d300      	bcc.n	80030d2 <HAL_UART_IRQHandler+0x30a>
 80030d0:	e146      	b.n	8003360 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	187a      	adds	r2, r7, r1
 80030d6:	215a      	movs	r1, #90	; 0x5a
 80030d8:	8812      	ldrh	r2, [r2, #0]
 80030da:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d06e      	beq.n	80031c4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80030f0:	2301      	movs	r3, #1
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f6:	f383 8810 	msr	PRIMASK, r3
}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	499a      	ldr	r1, [pc, #616]	; (8003370 <HAL_UART_IRQHandler+0x5a8>)
 8003108:	400a      	ands	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f383 8810 	msr	PRIMASK, r3
}
 8003116:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003118:	f3ef 8310 	mrs	r3, PRIMASK
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003120:	677b      	str	r3, [r7, #116]	; 0x74
 8003122:	2301      	movs	r3, #1
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003128:	f383 8810 	msr	PRIMASK, r3
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	689a      	ldr	r2, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2101      	movs	r1, #1
 800313a:	438a      	bics	r2, r1
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8310 	mrs	r3, PRIMASK
 800314e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003150:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003152:	673b      	str	r3, [r7, #112]	; 0x70
 8003154:	2301      	movs	r3, #1
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	438a      	bics	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003172:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003176:	f383 8810 	msr	PRIMASK, r3
}
 800317a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8310 	mrs	r3, PRIMASK
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800318e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003192:	2301      	movs	r3, #1
 8003194:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2110      	movs	r1, #16
 80031aa:	438a      	bics	r2, r1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fe f91a 	bl	80013f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2258      	movs	r2, #88	; 0x58
 80031c8:	5a9a      	ldrh	r2, [r3, r2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	215a      	movs	r1, #90	; 0x5a
 80031ce:	5a5b      	ldrh	r3, [r3, r1]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd fcc6 	bl	8000b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031e0:	e0be      	b.n	8003360 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2258      	movs	r2, #88	; 0x58
 80031e6:	5a99      	ldrh	r1, [r3, r2]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	225a      	movs	r2, #90	; 0x5a
 80031ec:	5a9b      	ldrh	r3, [r3, r2]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	208e      	movs	r0, #142	; 0x8e
 80031f2:	183b      	adds	r3, r7, r0
 80031f4:	1a8a      	subs	r2, r1, r2
 80031f6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	225a      	movs	r2, #90	; 0x5a
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d100      	bne.n	8003206 <HAL_UART_IRQHandler+0x43e>
 8003204:	e0ae      	b.n	8003364 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003206:	183b      	adds	r3, r7, r0
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d100      	bne.n	8003210 <HAL_UART_IRQHandler+0x448>
 800320e:	e0a9      	b.n	8003364 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003210:	f3ef 8310 	mrs	r3, PRIMASK
 8003214:	60fb      	str	r3, [r7, #12]
  return(result);
 8003216:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003218:	2488      	movs	r4, #136	; 0x88
 800321a:	193a      	adds	r2, r7, r4
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	2301      	movs	r3, #1
 8003220:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	494f      	ldr	r1, [pc, #316]	; (8003374 <HAL_UART_IRQHandler+0x5ac>)
 8003236:	400a      	ands	r2, r1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	193b      	adds	r3, r7, r4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003248:	f3ef 8310 	mrs	r3, PRIMASK
 800324c:	61bb      	str	r3, [r7, #24]
  return(result);
 800324e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003250:	2484      	movs	r4, #132	; 0x84
 8003252:	193a      	adds	r2, r7, r4
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	2301      	movs	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	438a      	bics	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	193b      	adds	r3, r7, r4
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003292:	f3ef 8310 	mrs	r3, PRIMASK
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329a:	2480      	movs	r4, #128	; 0x80
 800329c:	193a      	adds	r2, r7, r4
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	f383 8810 	msr	PRIMASK, r3
}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2110      	movs	r1, #16
 80032b8:	438a      	bics	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0011      	movs	r1, r2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd fc4a 	bl	8000b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032d8:	e044      	b.n	8003364 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032da:	23a4      	movs	r3, #164	; 0xa4
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	035b      	lsls	r3, r3, #13
 80032e4:	4013      	ands	r3, r2
 80032e6:	d010      	beq.n	800330a <HAL_UART_IRQHandler+0x542>
 80032e8:	239c      	movs	r3, #156	; 0x9c
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	03db      	lsls	r3, r3, #15
 80032f2:	4013      	ands	r3, r2
 80032f4:	d009      	beq.n	800330a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0352      	lsls	r2, r2, #13
 80032fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	0018      	movs	r0, r3
 8003304:	f000 fd9d 	bl	8003e42 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003308:	e02f      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800330a:	23a4      	movs	r3, #164	; 0xa4
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	4013      	ands	r3, r2
 8003314:	d00f      	beq.n	8003336 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003316:	23a0      	movs	r3, #160	; 0xa0
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	4013      	ands	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003326:	2b00      	cmp	r3, #0
 8003328:	d01e      	beq.n	8003368 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	0010      	movs	r0, r2
 8003332:	4798      	blx	r3
    }
    return;
 8003334:	e018      	b.n	8003368 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003336:	23a4      	movs	r3, #164	; 0xa4
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2240      	movs	r2, #64	; 0x40
 800333e:	4013      	ands	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x5a2>
 8003342:	23a0      	movs	r3, #160	; 0xa0
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2240      	movs	r2, #64	; 0x40
 800334a:	4013      	ands	r3, r2
 800334c:	d00d      	beq.n	800336a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fd4b 	bl	8003dec <UART_EndTransmit_IT>
    return;
 8003356:	e008      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	e006      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
    return;
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	e004      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	e002      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
      return;
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	e000      	b.n	800336a <HAL_UART_IRQHandler+0x5a2>
    return;
 8003368:	46c0      	nop			; (mov r8, r8)
  }

}
 800336a:	46bd      	mov	sp, r7
 800336c:	b02b      	add	sp, #172	; 0xac
 800336e:	bd90      	pop	{r4, r7, pc}
 8003370:	fffffeff 	.word	0xfffffeff
 8003374:	fffffedf 	.word	0xfffffedf

08003378 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003390:	46c0      	nop			; (mov r8, r8)
 8003392:	46bd      	mov	sp, r7
 8003394:	b002      	add	sp, #8
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033b0:	46c0      	nop			; (mov r8, r8)
 80033b2:	46bd      	mov	sp, r7
 80033b4:	b002      	add	sp, #8
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c0:	231e      	movs	r3, #30
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a84      	ldr	r2, [pc, #528]	; (80035f8 <UART_SetConfig+0x240>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	0019      	movs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a7f      	ldr	r2, [pc, #508]	; (80035fc <UART_SetConfig+0x244>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	4313      	orrs	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a76      	ldr	r2, [pc, #472]	; (8003600 <UART_SetConfig+0x248>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003434:	4b73      	ldr	r3, [pc, #460]	; (8003604 <UART_SetConfig+0x24c>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2203      	movs	r2, #3
 800343a:	4013      	ands	r3, r2
 800343c:	2b03      	cmp	r3, #3
 800343e:	d00d      	beq.n	800345c <UART_SetConfig+0xa4>
 8003440:	d81b      	bhi.n	800347a <UART_SetConfig+0xc2>
 8003442:	2b02      	cmp	r3, #2
 8003444:	d014      	beq.n	8003470 <UART_SetConfig+0xb8>
 8003446:	d818      	bhi.n	800347a <UART_SetConfig+0xc2>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <UART_SetConfig+0x9a>
 800344c:	2b01      	cmp	r3, #1
 800344e:	d00a      	beq.n	8003466 <UART_SetConfig+0xae>
 8003450:	e013      	b.n	800347a <UART_SetConfig+0xc2>
 8003452:	231f      	movs	r3, #31
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e012      	b.n	8003482 <UART_SetConfig+0xca>
 800345c:	231f      	movs	r3, #31
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e00d      	b.n	8003482 <UART_SetConfig+0xca>
 8003466:	231f      	movs	r3, #31
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e008      	b.n	8003482 <UART_SetConfig+0xca>
 8003470:	231f      	movs	r3, #31
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	2208      	movs	r2, #8
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e003      	b.n	8003482 <UART_SetConfig+0xca>
 800347a:	231f      	movs	r3, #31
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2210      	movs	r2, #16
 8003480:	701a      	strb	r2, [r3, #0]
 8003482:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	429a      	cmp	r2, r3
 800348e:	d15d      	bne.n	800354c <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003490:	231f      	movs	r3, #31
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d015      	beq.n	80034c6 <UART_SetConfig+0x10e>
 800349a:	dc18      	bgt.n	80034ce <UART_SetConfig+0x116>
 800349c:	2b04      	cmp	r3, #4
 800349e:	d00d      	beq.n	80034bc <UART_SetConfig+0x104>
 80034a0:	dc15      	bgt.n	80034ce <UART_SetConfig+0x116>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <UART_SetConfig+0xf4>
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d005      	beq.n	80034b6 <UART_SetConfig+0xfe>
 80034aa:	e010      	b.n	80034ce <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7ff faaa 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 80034b0:	0003      	movs	r3, r0
 80034b2:	61bb      	str	r3, [r7, #24]
        break;
 80034b4:	e012      	b.n	80034dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034b6:	4b54      	ldr	r3, [pc, #336]	; (8003608 <UART_SetConfig+0x250>)
 80034b8:	61bb      	str	r3, [r7, #24]
        break;
 80034ba:	e00f      	b.n	80034dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034bc:	f7ff fa34 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 80034c0:	0003      	movs	r3, r0
 80034c2:	61bb      	str	r3, [r7, #24]
        break;
 80034c4:	e00a      	b.n	80034dc <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	61bb      	str	r3, [r7, #24]
        break;
 80034cc:	e006      	b.n	80034dc <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034d2:	231e      	movs	r3, #30
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
        break;
 80034da:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d100      	bne.n	80034e4 <UART_SetConfig+0x12c>
 80034e2:	e07b      	b.n	80035dc <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	005a      	lsls	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	085b      	lsrs	r3, r3, #1
 80034ee:	18d2      	adds	r2, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	0019      	movs	r1, r3
 80034f6:	0010      	movs	r0, r2
 80034f8:	f7fc fe18 	bl	800012c <__udivsi3>
 80034fc:	0003      	movs	r3, r0
 80034fe:	b29b      	uxth	r3, r3
 8003500:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b0f      	cmp	r3, #15
 8003506:	d91c      	bls.n	8003542 <UART_SetConfig+0x18a>
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	025b      	lsls	r3, r3, #9
 800350e:	429a      	cmp	r2, r3
 8003510:	d217      	bcs.n	8003542 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	b29a      	uxth	r2, r3
 8003516:	200e      	movs	r0, #14
 8003518:	183b      	adds	r3, r7, r0
 800351a:	210f      	movs	r1, #15
 800351c:	438a      	bics	r2, r1
 800351e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	2207      	movs	r2, #7
 8003528:	4013      	ands	r3, r2
 800352a:	b299      	uxth	r1, r3
 800352c:	183b      	adds	r3, r7, r0
 800352e:	183a      	adds	r2, r7, r0
 8003530:	8812      	ldrh	r2, [r2, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	183a      	adds	r2, r7, r0
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	e04c      	b.n	80035dc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003542:	231e      	movs	r3, #30
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e047      	b.n	80035dc <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 800354c:	231f      	movs	r3, #31
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b08      	cmp	r3, #8
 8003554:	d015      	beq.n	8003582 <UART_SetConfig+0x1ca>
 8003556:	dc18      	bgt.n	800358a <UART_SetConfig+0x1d2>
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00d      	beq.n	8003578 <UART_SetConfig+0x1c0>
 800355c:	dc15      	bgt.n	800358a <UART_SetConfig+0x1d2>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <UART_SetConfig+0x1b0>
 8003562:	2b02      	cmp	r3, #2
 8003564:	d005      	beq.n	8003572 <UART_SetConfig+0x1ba>
 8003566:	e010      	b.n	800358a <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff fa4c 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 800356c:	0003      	movs	r3, r0
 800356e:	61bb      	str	r3, [r7, #24]
        break;
 8003570:	e012      	b.n	8003598 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003572:	4b25      	ldr	r3, [pc, #148]	; (8003608 <UART_SetConfig+0x250>)
 8003574:	61bb      	str	r3, [r7, #24]
        break;
 8003576:	e00f      	b.n	8003598 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003578:	f7ff f9d6 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 800357c:	0003      	movs	r3, r0
 800357e:	61bb      	str	r3, [r7, #24]
        break;
 8003580:	e00a      	b.n	8003598 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	61bb      	str	r3, [r7, #24]
        break;
 8003588:	e006      	b.n	8003598 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800358e:	231e      	movs	r3, #30
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
        break;
 8003596:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01e      	beq.n	80035dc <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	085a      	lsrs	r2, r3, #1
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	18d2      	adds	r2, r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0019      	movs	r1, r3
 80035ae:	0010      	movs	r0, r2
 80035b0:	f7fc fdbc 	bl	800012c <__udivsi3>
 80035b4:	0003      	movs	r3, r0
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b0f      	cmp	r3, #15
 80035be:	d909      	bls.n	80035d4 <UART_SetConfig+0x21c>
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	025b      	lsls	r3, r3, #9
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d204      	bcs.n	80035d4 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	e003      	b.n	80035dc <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80035d4:	231e      	movs	r3, #30
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035e8:	231e      	movs	r3, #30
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	781b      	ldrb	r3, [r3, #0]
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b008      	add	sp, #32
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	ffff69f3 	.word	0xffff69f3
 80035fc:	ffffcfff 	.word	0xffffcfff
 8003600:	fffff4ff 	.word	0xfffff4ff
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200

0800360c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d00b      	beq.n	8003636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a4a      	ldr	r2, [pc, #296]	; (8003750 <UART_AdvFeatureConfig+0x144>)
 8003626:	4013      	ands	r3, r2
 8003628:	0019      	movs	r1, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	2202      	movs	r2, #2
 800363c:	4013      	ands	r3, r2
 800363e:	d00b      	beq.n	8003658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	4a43      	ldr	r2, [pc, #268]	; (8003754 <UART_AdvFeatureConfig+0x148>)
 8003648:	4013      	ands	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2204      	movs	r2, #4
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a3b      	ldr	r2, [pc, #236]	; (8003758 <UART_AdvFeatureConfig+0x14c>)
 800366a:	4013      	ands	r3, r2
 800366c:	0019      	movs	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	2208      	movs	r2, #8
 8003680:	4013      	ands	r3, r2
 8003682:	d00b      	beq.n	800369c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a34      	ldr	r2, [pc, #208]	; (800375c <UART_AdvFeatureConfig+0x150>)
 800368c:	4013      	ands	r3, r2
 800368e:	0019      	movs	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	2210      	movs	r2, #16
 80036a2:	4013      	ands	r3, r2
 80036a4:	d00b      	beq.n	80036be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <UART_AdvFeatureConfig+0x154>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2220      	movs	r2, #32
 80036c4:	4013      	ands	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a25      	ldr	r2, [pc, #148]	; (8003764 <UART_AdvFeatureConfig+0x158>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2240      	movs	r2, #64	; 0x40
 80036e6:	4013      	ands	r3, r2
 80036e8:	d01d      	beq.n	8003726 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <UART_AdvFeatureConfig+0x15c>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	0019      	movs	r1, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003706:	2380      	movs	r3, #128	; 0x80
 8003708:	035b      	lsls	r3, r3, #13
 800370a:	429a      	cmp	r2, r3
 800370c:	d10b      	bne.n	8003726 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a15      	ldr	r2, [pc, #84]	; (800376c <UART_AdvFeatureConfig+0x160>)
 8003716:	4013      	ands	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	4013      	ands	r3, r2
 800372e:	d00b      	beq.n	8003748 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <UART_AdvFeatureConfig+0x164>)
 8003738:	4013      	ands	r3, r2
 800373a:	0019      	movs	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fffdffff 	.word	0xfffdffff
 8003754:	fffeffff 	.word	0xfffeffff
 8003758:	fffbffff 	.word	0xfffbffff
 800375c:	ffff7fff 	.word	0xffff7fff
 8003760:	ffffefff 	.word	0xffffefff
 8003764:	ffffdfff 	.word	0xffffdfff
 8003768:	ffefffff 	.word	0xffefffff
 800376c:	ff9fffff 	.word	0xff9fffff
 8003770:	fff7ffff 	.word	0xfff7ffff

08003774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	2100      	movs	r1, #0
 8003782:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003784:	f7fd fc7e 	bl	8001084 <HAL_GetTick>
 8003788:	0003      	movs	r3, r0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2208      	movs	r2, #8
 8003794:	4013      	ands	r3, r2
 8003796:	2b08      	cmp	r3, #8
 8003798:	d10c      	bne.n	80037b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	0391      	lsls	r1, r2, #14
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4a17      	ldr	r2, [pc, #92]	; (8003800 <UART_CheckIdleState+0x8c>)
 80037a4:	9200      	str	r2, [sp, #0]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f000 f82c 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d001      	beq.n	80037b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e021      	b.n	80037f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2204      	movs	r2, #4
 80037bc:	4013      	ands	r3, r2
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d10c      	bne.n	80037dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	03d1      	lsls	r1, r2, #15
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <UART_CheckIdleState+0x8c>)
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f000 f818 	bl	8003804 <UART_WaitOnFlagUntilTimeout>
 80037d4:	1e03      	subs	r3, r0, #0
 80037d6:	d001      	beq.n	80037dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e00d      	b.n	80037f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2274      	movs	r2, #116	; 0x74
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	01ffffff 	.word	0x01ffffff

08003804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b094      	sub	sp, #80	; 0x50
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003814:	e0a3      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003818:	3301      	adds	r3, #1
 800381a:	d100      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0x1a>
 800381c:	e09f      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381e:	f7fd fc31 	bl	8001084 <HAL_GetTick>
 8003822:	0002      	movs	r2, r0
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382a:	429a      	cmp	r2, r3
 800382c:	d302      	bcc.n	8003834 <UART_WaitOnFlagUntilTimeout+0x30>
 800382e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003830:	2b00      	cmp	r3, #0
 8003832:	d13d      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
 800383e:	2301      	movs	r3, #1
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	494c      	ldr	r1, [pc, #304]	; (8003988 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003856:	400a      	ands	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003866:	f3ef 8310 	mrs	r3, PRIMASK
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	643b      	str	r3, [r7, #64]	; 0x40
 8003870:	2301      	movs	r3, #1
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003892:	f383 8810 	msr	PRIMASK, r3
}
 8003896:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2274      	movs	r2, #116	; 0x74
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e067      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2204      	movs	r2, #4
 80038b8:	4013      	ands	r3, r2
 80038ba:	d050      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	401a      	ands	r2, r3
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d146      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2280      	movs	r2, #128	; 0x80
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	613b      	str	r3, [r7, #16]
  return(result);
 80038e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e4:	2301      	movs	r3, #1
 80038e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4923      	ldr	r1, [pc, #140]	; (8003988 <UART_WaitOnFlagUntilTimeout+0x184>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003902:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800390c:	f3ef 8310 	mrs	r3, PRIMASK
 8003910:	61fb      	str	r3, [r7, #28]
  return(result);
 8003912:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003914:	64bb      	str	r3, [r7, #72]	; 0x48
 8003916:	2301      	movs	r3, #1
 8003918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			; (mov r8, r8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2101      	movs	r1, #1
 800392e:	438a      	bics	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2280      	movs	r2, #128	; 0x80
 800394e:	2120      	movs	r1, #32
 8003950:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2274      	movs	r2, #116	; 0x74
 8003956:	2100      	movs	r1, #0
 8003958:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e010      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	425a      	negs	r2, r3
 800396e:	4153      	adcs	r3, r2
 8003970:	b2db      	uxtb	r3, r3
 8003972:	001a      	movs	r2, r3
 8003974:	1dfb      	adds	r3, r7, #7
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d100      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x17a>
 800397c:	e74b      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b014      	add	sp, #80	; 0x50
 8003986:	bd80      	pop	{r7, pc}
 8003988:	fffffe5f 	.word	0xfffffe5f

0800398c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b090      	sub	sp, #64	; 0x40
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1dba      	adds	r2, r7, #6
 80039a4:	2158      	movs	r1, #88	; 0x58
 80039a6:	8812      	ldrh	r2, [r2, #0]
 80039a8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2280      	movs	r2, #128	; 0x80
 80039ae:	2100      	movs	r1, #0
 80039b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2222      	movs	r2, #34	; 0x22
 80039b6:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02b      	beq.n	8003a18 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a3f      	ldr	r2, [pc, #252]	; (8003ac4 <UART_Start_Receive_DMA+0x138>)
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a3e      	ldr	r2, [pc, #248]	; (8003ac8 <UART_Start_Receive_DMA+0x13c>)
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a3d      	ldr	r2, [pc, #244]	; (8003acc <UART_Start_Receive_DMA+0x140>)
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	2200      	movs	r2, #0
 80039de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3324      	adds	r3, #36	; 0x24
 80039ea:	0019      	movs	r1, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	001a      	movs	r2, r3
 80039f2:	1dbb      	adds	r3, r7, #6
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f7fd fc99 	bl	800132c <HAL_DMA_Start_IT>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d00c      	beq.n	8003a18 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2280      	movs	r2, #128	; 0x80
 8003a02:	2110      	movs	r1, #16
 8003a04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2274      	movs	r2, #116	; 0x74
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e050      	b.n	8003aba <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2274      	movs	r2, #116	; 0x74
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a20:	f3ef 8310 	mrs	r3, PRIMASK
 8003a24:	613b      	str	r3, [r7, #16]
  return(result);
 8003a26:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f383 8810 	msr	PRIMASK, r3
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0049      	lsls	r1, r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a5a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5e:	2301      	movs	r3, #1
 8003a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a86:	f3ef 8310 	mrs	r3, PRIMASK
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a90:	2301      	movs	r3, #1
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	f383 8810 	msr	PRIMASK, r3
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2140      	movs	r1, #64	; 0x40
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	0018      	movs	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b010      	add	sp, #64	; 0x40
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	08003bdd 	.word	0x08003bdd
 8003ac8:	08003d01 	.word	0x08003d01
 8003acc:	08003d3d 	.word	0x08003d3d

08003ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ade:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	21c0      	movs	r1, #192	; 0xc0
 8003afa:	438a      	bics	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003b10:	46c0      	nop			; (mov r8, r8)
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b006      	add	sp, #24
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08e      	sub	sp, #56	; 0x38
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b20:	f3ef 8310 	mrs	r3, PRIMASK
 8003b24:	617b      	str	r3, [r7, #20]
  return(result);
 8003b26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b28:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f383 8810 	msr	PRIMASK, r3
}
 8003b34:	46c0      	nop			; (mov r8, r8)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4925      	ldr	r1, [pc, #148]	; (8003bd8 <UART_EndRxTransfer+0xc0>)
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b52:	f3ef 8310 	mrs	r3, PRIMASK
 8003b56:	623b      	str	r3, [r7, #32]
  return(result);
 8003b58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2101      	movs	r1, #1
 8003b74:	438a      	bics	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	f383 8810 	msr	PRIMASK, r3
}
 8003b82:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d118      	bne.n	8003bbe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	2301      	movs	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2110      	movs	r1, #16
 8003bae:	438a      	bics	r2, r1
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b00e      	add	sp, #56	; 0x38
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	fffffedf 	.word	0xfffffedf

08003bdc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b094      	sub	sp, #80	; 0x50
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d06e      	beq.n	8003cd0 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8003bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf4:	225a      	movs	r2, #90	; 0x5a
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c00:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c04:	2301      	movs	r3, #1
 8003c06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4938      	ldr	r1, [pc, #224]	; (8003cfc <UART_DMAReceiveCplt+0x120>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f383 8810 	msr	PRIMASK, r3
}
 8003c2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	2301      	movs	r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	f383 8810 	msr	PRIMASK, r3
}
 8003c5c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	643b      	str	r3, [r7, #64]	; 0x40
 8003c68:	2301      	movs	r3, #1
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2140      	movs	r1, #64	; 0x40
 8003c80:	438a      	bics	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c92:	2220      	movs	r2, #32
 8003c94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d118      	bne.n	8003cd0 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2110      	movs	r1, #16
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f383 8810 	msr	PRIMASK, r3
}
 8003cce:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d108      	bne.n	8003cea <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	2258      	movs	r2, #88	; 0x58
 8003cdc:	5a9a      	ldrh	r2, [r3, r2]
 8003cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fc ff42 	bl	8000b6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ce8:	e003      	b.n	8003cf2 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fb4b 	bl	8003388 <HAL_UART_RxCpltCallback>
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b014      	add	sp, #80	; 0x50
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	fffffeff 	.word	0xfffffeff

08003d00 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d10a      	bne.n	8003d2c <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2258      	movs	r2, #88	; 0x58
 8003d1a:	5a9b      	ldrh	r3, [r3, r2]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7fc ff21 	bl	8000b6c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d2a:	e003      	b.n	8003d34 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff fb32 	bl	8003398 <HAL_UART_RxHalfCpltCallback>
}
 8003d34:	46c0      	nop			; (mov r8, r8)
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d4e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d10a      	bne.n	8003d7a <UART_DMAError+0x3e>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b21      	cmp	r3, #33	; 0x21
 8003d68:	d107      	bne.n	8003d7a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2252      	movs	r2, #82	; 0x52
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7ff feab 	bl	8003ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d10a      	bne.n	8003d9e <UART_DMAError+0x62>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b22      	cmp	r3, #34	; 0x22
 8003d8c:	d107      	bne.n	8003d9e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	225a      	movs	r2, #90	; 0x5a
 8003d92:	2100      	movs	r1, #0
 8003d94:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff febd 	bl	8003b18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2280      	movs	r2, #128	; 0x80
 8003da2:	589b      	ldr	r3, [r3, r2]
 8003da4:	2210      	movs	r2, #16
 8003da6:	431a      	orrs	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff faf9 	bl	80033a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	46bd      	mov	sp, r7
 8003dba:	b006      	add	sp, #24
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	225a      	movs	r2, #90	; 0x5a
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2252      	movs	r2, #82	; 0x52
 8003dd8:	2100      	movs	r1, #0
 8003dda:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fae2 	bl	80033a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b004      	add	sp, #16
 8003dea:	bd80      	pop	{r7, pc}

08003dec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df4:	f3ef 8310 	mrs	r3, PRIMASK
 8003df8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	2301      	movs	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	438a      	bics	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7ff fa9f 	bl	8003378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e52:	b5b0      	push	{r4, r5, r7, lr}
 8003e54:	b08a      	sub	sp, #40	; 0x28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	1dbb      	adds	r3, r7, #6
 8003e5e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d15e      	bne.n	8003f26 <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8003e6e:	1dbb      	adds	r3, r7, #6
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e056      	b.n	8003f28 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	015b      	lsls	r3, r3, #5
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d109      	bne.n	8003e9a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d105      	bne.n	8003e9a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4013      	ands	r3, r2
 8003e94:	d001      	beq.n	8003e9a <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e046      	b.n	8003f28 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2274      	movs	r2, #116	; 0x74
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d101      	bne.n	8003ea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	e03f      	b.n	8003f28 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2274      	movs	r2, #116	; 0x74
 8003eac:	2101      	movs	r1, #1
 8003eae:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003eb6:	2527      	movs	r5, #39	; 0x27
 8003eb8:	197c      	adds	r4, r7, r5
 8003eba:	1dbb      	adds	r3, r7, #6
 8003ebc:	881a      	ldrh	r2, [r3, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7ff fd62 	bl	800398c <UART_Start_Receive_DMA>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003ecc:	197b      	adds	r3, r7, r5
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d124      	bne.n	8003f1e <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d11c      	bne.n	8003f16 <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8003eea:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	2301      	movs	r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2110      	movs	r1, #16
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	e003      	b.n	8003f1e <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003f16:	2327      	movs	r3, #39	; 0x27
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8003f1e:	2327      	movs	r3, #39	; 0x27
 8003f20:	18fb      	adds	r3, r7, r3
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	e000      	b.n	8003f28 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b00a      	add	sp, #40	; 0x28
 8003f2e:	bdb0      	pop	{r4, r5, r7, pc}

08003f30 <__errno>:
 8003f30:	4b01      	ldr	r3, [pc, #4]	; (8003f38 <__errno+0x8>)
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	4770      	bx	lr
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	20000010 	.word	0x20000010

08003f3c <__libc_init_array>:
 8003f3c:	b570      	push	{r4, r5, r6, lr}
 8003f3e:	2600      	movs	r6, #0
 8003f40:	4d0c      	ldr	r5, [pc, #48]	; (8003f74 <__libc_init_array+0x38>)
 8003f42:	4c0d      	ldr	r4, [pc, #52]	; (8003f78 <__libc_init_array+0x3c>)
 8003f44:	1b64      	subs	r4, r4, r5
 8003f46:	10a4      	asrs	r4, r4, #2
 8003f48:	42a6      	cmp	r6, r4
 8003f4a:	d109      	bne.n	8003f60 <__libc_init_array+0x24>
 8003f4c:	2600      	movs	r6, #0
 8003f4e:	f000 fc8b 	bl	8004868 <_init>
 8003f52:	4d0a      	ldr	r5, [pc, #40]	; (8003f7c <__libc_init_array+0x40>)
 8003f54:	4c0a      	ldr	r4, [pc, #40]	; (8003f80 <__libc_init_array+0x44>)
 8003f56:	1b64      	subs	r4, r4, r5
 8003f58:	10a4      	asrs	r4, r4, #2
 8003f5a:	42a6      	cmp	r6, r4
 8003f5c:	d105      	bne.n	8003f6a <__libc_init_array+0x2e>
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
 8003f60:	00b3      	lsls	r3, r6, #2
 8003f62:	58eb      	ldr	r3, [r5, r3]
 8003f64:	4798      	blx	r3
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7ee      	b.n	8003f48 <__libc_init_array+0xc>
 8003f6a:	00b3      	lsls	r3, r6, #2
 8003f6c:	58eb      	ldr	r3, [r5, r3]
 8003f6e:	4798      	blx	r3
 8003f70:	3601      	adds	r6, #1
 8003f72:	e7f2      	b.n	8003f5a <__libc_init_array+0x1e>
 8003f74:	0800494c 	.word	0x0800494c
 8003f78:	0800494c 	.word	0x0800494c
 8003f7c:	0800494c 	.word	0x0800494c
 8003f80:	08004950 	.word	0x08004950

08003f84 <memcpy>:
 8003f84:	2300      	movs	r3, #0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d100      	bne.n	8003f8e <memcpy+0xa>
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	5ccc      	ldrb	r4, [r1, r3]
 8003f90:	54c4      	strb	r4, [r0, r3]
 8003f92:	3301      	adds	r3, #1
 8003f94:	e7f8      	b.n	8003f88 <memcpy+0x4>

08003f96 <memset>:
 8003f96:	0003      	movs	r3, r0
 8003f98:	1882      	adds	r2, r0, r2
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d100      	bne.n	8003fa0 <memset+0xa>
 8003f9e:	4770      	bx	lr
 8003fa0:	7019      	strb	r1, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	e7f9      	b.n	8003f9a <memset+0x4>
	...

08003fa8 <siprintf>:
 8003fa8:	b40e      	push	{r1, r2, r3}
 8003faa:	b500      	push	{lr}
 8003fac:	490b      	ldr	r1, [pc, #44]	; (8003fdc <siprintf+0x34>)
 8003fae:	b09c      	sub	sp, #112	; 0x70
 8003fb0:	ab1d      	add	r3, sp, #116	; 0x74
 8003fb2:	9002      	str	r0, [sp, #8]
 8003fb4:	9006      	str	r0, [sp, #24]
 8003fb6:	9107      	str	r1, [sp, #28]
 8003fb8:	9104      	str	r1, [sp, #16]
 8003fba:	4809      	ldr	r0, [pc, #36]	; (8003fe0 <siprintf+0x38>)
 8003fbc:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <siprintf+0x3c>)
 8003fbe:	cb04      	ldmia	r3!, {r2}
 8003fc0:	9105      	str	r1, [sp, #20]
 8003fc2:	6800      	ldr	r0, [r0, #0]
 8003fc4:	a902      	add	r1, sp, #8
 8003fc6:	9301      	str	r3, [sp, #4]
 8003fc8:	f000 f870 	bl	80040ac <_svfiprintf_r>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9a02      	ldr	r2, [sp, #8]
 8003fd0:	7013      	strb	r3, [r2, #0]
 8003fd2:	b01c      	add	sp, #112	; 0x70
 8003fd4:	bc08      	pop	{r3}
 8003fd6:	b003      	add	sp, #12
 8003fd8:	4718      	bx	r3
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	7fffffff 	.word	0x7fffffff
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	ffff0208 	.word	0xffff0208

08003fe8 <__ssputs_r>:
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	688e      	ldr	r6, [r1, #8]
 8003fec:	b085      	sub	sp, #20
 8003fee:	0007      	movs	r7, r0
 8003ff0:	000c      	movs	r4, r1
 8003ff2:	9203      	str	r2, [sp, #12]
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	429e      	cmp	r6, r3
 8003ff8:	d83c      	bhi.n	8004074 <__ssputs_r+0x8c>
 8003ffa:	2390      	movs	r3, #144	; 0x90
 8003ffc:	898a      	ldrh	r2, [r1, #12]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	421a      	tst	r2, r3
 8004002:	d034      	beq.n	800406e <__ssputs_r+0x86>
 8004004:	6909      	ldr	r1, [r1, #16]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6960      	ldr	r0, [r4, #20]
 800400a:	1a5b      	subs	r3, r3, r1
 800400c:	9302      	str	r3, [sp, #8]
 800400e:	2303      	movs	r3, #3
 8004010:	4343      	muls	r3, r0
 8004012:	0fdd      	lsrs	r5, r3, #31
 8004014:	18ed      	adds	r5, r5, r3
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	9802      	ldr	r0, [sp, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	181b      	adds	r3, r3, r0
 800401e:	106d      	asrs	r5, r5, #1
 8004020:	42ab      	cmp	r3, r5
 8004022:	d900      	bls.n	8004026 <__ssputs_r+0x3e>
 8004024:	001d      	movs	r5, r3
 8004026:	0553      	lsls	r3, r2, #21
 8004028:	d532      	bpl.n	8004090 <__ssputs_r+0xa8>
 800402a:	0029      	movs	r1, r5
 800402c:	0038      	movs	r0, r7
 800402e:	f000 fb49 	bl	80046c4 <_malloc_r>
 8004032:	1e06      	subs	r6, r0, #0
 8004034:	d109      	bne.n	800404a <__ssputs_r+0x62>
 8004036:	230c      	movs	r3, #12
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	2340      	movs	r3, #64	; 0x40
 800403c:	2001      	movs	r0, #1
 800403e:	89a2      	ldrh	r2, [r4, #12]
 8004040:	4240      	negs	r0, r0
 8004042:	4313      	orrs	r3, r2
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	b005      	add	sp, #20
 8004048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800404a:	9a02      	ldr	r2, [sp, #8]
 800404c:	6921      	ldr	r1, [r4, #16]
 800404e:	f7ff ff99 	bl	8003f84 <memcpy>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <__ssputs_r+0xc0>)
 8004056:	401a      	ands	r2, r3
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	4313      	orrs	r3, r2
 800405c:	81a3      	strh	r3, [r4, #12]
 800405e:	9b02      	ldr	r3, [sp, #8]
 8004060:	6126      	str	r6, [r4, #16]
 8004062:	18f6      	adds	r6, r6, r3
 8004064:	6026      	str	r6, [r4, #0]
 8004066:	6165      	str	r5, [r4, #20]
 8004068:	9e01      	ldr	r6, [sp, #4]
 800406a:	1aed      	subs	r5, r5, r3
 800406c:	60a5      	str	r5, [r4, #8]
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	429e      	cmp	r6, r3
 8004072:	d900      	bls.n	8004076 <__ssputs_r+0x8e>
 8004074:	9e01      	ldr	r6, [sp, #4]
 8004076:	0032      	movs	r2, r6
 8004078:	9903      	ldr	r1, [sp, #12]
 800407a:	6820      	ldr	r0, [r4, #0]
 800407c:	f000 faa3 	bl	80045c6 <memmove>
 8004080:	68a3      	ldr	r3, [r4, #8]
 8004082:	2000      	movs	r0, #0
 8004084:	1b9b      	subs	r3, r3, r6
 8004086:	60a3      	str	r3, [r4, #8]
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	199e      	adds	r6, r3, r6
 800408c:	6026      	str	r6, [r4, #0]
 800408e:	e7da      	b.n	8004046 <__ssputs_r+0x5e>
 8004090:	002a      	movs	r2, r5
 8004092:	0038      	movs	r0, r7
 8004094:	f000 fb8c 	bl	80047b0 <_realloc_r>
 8004098:	1e06      	subs	r6, r0, #0
 800409a:	d1e0      	bne.n	800405e <__ssputs_r+0x76>
 800409c:	0038      	movs	r0, r7
 800409e:	6921      	ldr	r1, [r4, #16]
 80040a0:	f000 faa4 	bl	80045ec <_free_r>
 80040a4:	e7c7      	b.n	8004036 <__ssputs_r+0x4e>
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	fffffb7f 	.word	0xfffffb7f

080040ac <_svfiprintf_r>:
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	b0a1      	sub	sp, #132	; 0x84
 80040b0:	9003      	str	r0, [sp, #12]
 80040b2:	001d      	movs	r5, r3
 80040b4:	898b      	ldrh	r3, [r1, #12]
 80040b6:	000f      	movs	r7, r1
 80040b8:	0016      	movs	r6, r2
 80040ba:	061b      	lsls	r3, r3, #24
 80040bc:	d511      	bpl.n	80040e2 <_svfiprintf_r+0x36>
 80040be:	690b      	ldr	r3, [r1, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10e      	bne.n	80040e2 <_svfiprintf_r+0x36>
 80040c4:	2140      	movs	r1, #64	; 0x40
 80040c6:	f000 fafd 	bl	80046c4 <_malloc_r>
 80040ca:	6038      	str	r0, [r7, #0]
 80040cc:	6138      	str	r0, [r7, #16]
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d105      	bne.n	80040de <_svfiprintf_r+0x32>
 80040d2:	230c      	movs	r3, #12
 80040d4:	9a03      	ldr	r2, [sp, #12]
 80040d6:	3801      	subs	r0, #1
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	b021      	add	sp, #132	; 0x84
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040de:	2340      	movs	r3, #64	; 0x40
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	2300      	movs	r3, #0
 80040e4:	ac08      	add	r4, sp, #32
 80040e6:	6163      	str	r3, [r4, #20]
 80040e8:	3320      	adds	r3, #32
 80040ea:	7663      	strb	r3, [r4, #25]
 80040ec:	3310      	adds	r3, #16
 80040ee:	76a3      	strb	r3, [r4, #26]
 80040f0:	9507      	str	r5, [sp, #28]
 80040f2:	0035      	movs	r5, r6
 80040f4:	782b      	ldrb	r3, [r5, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <_svfiprintf_r+0x52>
 80040fa:	2b25      	cmp	r3, #37	; 0x25
 80040fc:	d147      	bne.n	800418e <_svfiprintf_r+0xe2>
 80040fe:	1bab      	subs	r3, r5, r6
 8004100:	9305      	str	r3, [sp, #20]
 8004102:	42b5      	cmp	r5, r6
 8004104:	d00c      	beq.n	8004120 <_svfiprintf_r+0x74>
 8004106:	0032      	movs	r2, r6
 8004108:	0039      	movs	r1, r7
 800410a:	9803      	ldr	r0, [sp, #12]
 800410c:	f7ff ff6c 	bl	8003fe8 <__ssputs_r>
 8004110:	1c43      	adds	r3, r0, #1
 8004112:	d100      	bne.n	8004116 <_svfiprintf_r+0x6a>
 8004114:	e0ae      	b.n	8004274 <_svfiprintf_r+0x1c8>
 8004116:	6962      	ldr	r2, [r4, #20]
 8004118:	9b05      	ldr	r3, [sp, #20]
 800411a:	4694      	mov	ip, r2
 800411c:	4463      	add	r3, ip
 800411e:	6163      	str	r3, [r4, #20]
 8004120:	782b      	ldrb	r3, [r5, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d100      	bne.n	8004128 <_svfiprintf_r+0x7c>
 8004126:	e0a5      	b.n	8004274 <_svfiprintf_r+0x1c8>
 8004128:	2201      	movs	r2, #1
 800412a:	2300      	movs	r3, #0
 800412c:	4252      	negs	r2, r2
 800412e:	6062      	str	r2, [r4, #4]
 8004130:	a904      	add	r1, sp, #16
 8004132:	3254      	adds	r2, #84	; 0x54
 8004134:	1852      	adds	r2, r2, r1
 8004136:	1c6e      	adds	r6, r5, #1
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	60e3      	str	r3, [r4, #12]
 800413c:	60a3      	str	r3, [r4, #8]
 800413e:	7013      	strb	r3, [r2, #0]
 8004140:	65a3      	str	r3, [r4, #88]	; 0x58
 8004142:	2205      	movs	r2, #5
 8004144:	7831      	ldrb	r1, [r6, #0]
 8004146:	4854      	ldr	r0, [pc, #336]	; (8004298 <_svfiprintf_r+0x1ec>)
 8004148:	f000 fa32 	bl	80045b0 <memchr>
 800414c:	1c75      	adds	r5, r6, #1
 800414e:	2800      	cmp	r0, #0
 8004150:	d11f      	bne.n	8004192 <_svfiprintf_r+0xe6>
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	06d3      	lsls	r3, r2, #27
 8004156:	d504      	bpl.n	8004162 <_svfiprintf_r+0xb6>
 8004158:	2353      	movs	r3, #83	; 0x53
 800415a:	a904      	add	r1, sp, #16
 800415c:	185b      	adds	r3, r3, r1
 800415e:	2120      	movs	r1, #32
 8004160:	7019      	strb	r1, [r3, #0]
 8004162:	0713      	lsls	r3, r2, #28
 8004164:	d504      	bpl.n	8004170 <_svfiprintf_r+0xc4>
 8004166:	2353      	movs	r3, #83	; 0x53
 8004168:	a904      	add	r1, sp, #16
 800416a:	185b      	adds	r3, r3, r1
 800416c:	212b      	movs	r1, #43	; 0x2b
 800416e:	7019      	strb	r1, [r3, #0]
 8004170:	7833      	ldrb	r3, [r6, #0]
 8004172:	2b2a      	cmp	r3, #42	; 0x2a
 8004174:	d016      	beq.n	80041a4 <_svfiprintf_r+0xf8>
 8004176:	0035      	movs	r5, r6
 8004178:	2100      	movs	r1, #0
 800417a:	200a      	movs	r0, #10
 800417c:	68e3      	ldr	r3, [r4, #12]
 800417e:	782a      	ldrb	r2, [r5, #0]
 8004180:	1c6e      	adds	r6, r5, #1
 8004182:	3a30      	subs	r2, #48	; 0x30
 8004184:	2a09      	cmp	r2, #9
 8004186:	d94e      	bls.n	8004226 <_svfiprintf_r+0x17a>
 8004188:	2900      	cmp	r1, #0
 800418a:	d111      	bne.n	80041b0 <_svfiprintf_r+0x104>
 800418c:	e017      	b.n	80041be <_svfiprintf_r+0x112>
 800418e:	3501      	adds	r5, #1
 8004190:	e7b0      	b.n	80040f4 <_svfiprintf_r+0x48>
 8004192:	4b41      	ldr	r3, [pc, #260]	; (8004298 <_svfiprintf_r+0x1ec>)
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	1ac0      	subs	r0, r0, r3
 8004198:	2301      	movs	r3, #1
 800419a:	4083      	lsls	r3, r0
 800419c:	4313      	orrs	r3, r2
 800419e:	002e      	movs	r6, r5
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	e7ce      	b.n	8004142 <_svfiprintf_r+0x96>
 80041a4:	9b07      	ldr	r3, [sp, #28]
 80041a6:	1d19      	adds	r1, r3, #4
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	9107      	str	r1, [sp, #28]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	db01      	blt.n	80041b4 <_svfiprintf_r+0x108>
 80041b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041b2:	e004      	b.n	80041be <_svfiprintf_r+0x112>
 80041b4:	425b      	negs	r3, r3
 80041b6:	60e3      	str	r3, [r4, #12]
 80041b8:	2302      	movs	r3, #2
 80041ba:	4313      	orrs	r3, r2
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	782b      	ldrb	r3, [r5, #0]
 80041c0:	2b2e      	cmp	r3, #46	; 0x2e
 80041c2:	d10a      	bne.n	80041da <_svfiprintf_r+0x12e>
 80041c4:	786b      	ldrb	r3, [r5, #1]
 80041c6:	2b2a      	cmp	r3, #42	; 0x2a
 80041c8:	d135      	bne.n	8004236 <_svfiprintf_r+0x18a>
 80041ca:	9b07      	ldr	r3, [sp, #28]
 80041cc:	3502      	adds	r5, #2
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	9207      	str	r2, [sp, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db2b      	blt.n	8004230 <_svfiprintf_r+0x184>
 80041d8:	9309      	str	r3, [sp, #36]	; 0x24
 80041da:	4e30      	ldr	r6, [pc, #192]	; (800429c <_svfiprintf_r+0x1f0>)
 80041dc:	2203      	movs	r2, #3
 80041de:	0030      	movs	r0, r6
 80041e0:	7829      	ldrb	r1, [r5, #0]
 80041e2:	f000 f9e5 	bl	80045b0 <memchr>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d006      	beq.n	80041f8 <_svfiprintf_r+0x14c>
 80041ea:	2340      	movs	r3, #64	; 0x40
 80041ec:	1b80      	subs	r0, r0, r6
 80041ee:	4083      	lsls	r3, r0
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	3501      	adds	r5, #1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	6023      	str	r3, [r4, #0]
 80041f8:	7829      	ldrb	r1, [r5, #0]
 80041fa:	2206      	movs	r2, #6
 80041fc:	4828      	ldr	r0, [pc, #160]	; (80042a0 <_svfiprintf_r+0x1f4>)
 80041fe:	1c6e      	adds	r6, r5, #1
 8004200:	7621      	strb	r1, [r4, #24]
 8004202:	f000 f9d5 	bl	80045b0 <memchr>
 8004206:	2800      	cmp	r0, #0
 8004208:	d03c      	beq.n	8004284 <_svfiprintf_r+0x1d8>
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <_svfiprintf_r+0x1f8>)
 800420c:	2b00      	cmp	r3, #0
 800420e:	d125      	bne.n	800425c <_svfiprintf_r+0x1b0>
 8004210:	2207      	movs	r2, #7
 8004212:	9b07      	ldr	r3, [sp, #28]
 8004214:	3307      	adds	r3, #7
 8004216:	4393      	bics	r3, r2
 8004218:	3308      	adds	r3, #8
 800421a:	9307      	str	r3, [sp, #28]
 800421c:	6963      	ldr	r3, [r4, #20]
 800421e:	9a04      	ldr	r2, [sp, #16]
 8004220:	189b      	adds	r3, r3, r2
 8004222:	6163      	str	r3, [r4, #20]
 8004224:	e765      	b.n	80040f2 <_svfiprintf_r+0x46>
 8004226:	4343      	muls	r3, r0
 8004228:	0035      	movs	r5, r6
 800422a:	2101      	movs	r1, #1
 800422c:	189b      	adds	r3, r3, r2
 800422e:	e7a6      	b.n	800417e <_svfiprintf_r+0xd2>
 8004230:	2301      	movs	r3, #1
 8004232:	425b      	negs	r3, r3
 8004234:	e7d0      	b.n	80041d8 <_svfiprintf_r+0x12c>
 8004236:	2300      	movs	r3, #0
 8004238:	200a      	movs	r0, #10
 800423a:	001a      	movs	r2, r3
 800423c:	3501      	adds	r5, #1
 800423e:	6063      	str	r3, [r4, #4]
 8004240:	7829      	ldrb	r1, [r5, #0]
 8004242:	1c6e      	adds	r6, r5, #1
 8004244:	3930      	subs	r1, #48	; 0x30
 8004246:	2909      	cmp	r1, #9
 8004248:	d903      	bls.n	8004252 <_svfiprintf_r+0x1a6>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0c5      	beq.n	80041da <_svfiprintf_r+0x12e>
 800424e:	9209      	str	r2, [sp, #36]	; 0x24
 8004250:	e7c3      	b.n	80041da <_svfiprintf_r+0x12e>
 8004252:	4342      	muls	r2, r0
 8004254:	0035      	movs	r5, r6
 8004256:	2301      	movs	r3, #1
 8004258:	1852      	adds	r2, r2, r1
 800425a:	e7f1      	b.n	8004240 <_svfiprintf_r+0x194>
 800425c:	ab07      	add	r3, sp, #28
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	003a      	movs	r2, r7
 8004262:	0021      	movs	r1, r4
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <_svfiprintf_r+0x1fc>)
 8004266:	9803      	ldr	r0, [sp, #12]
 8004268:	e000      	b.n	800426c <_svfiprintf_r+0x1c0>
 800426a:	bf00      	nop
 800426c:	9004      	str	r0, [sp, #16]
 800426e:	9b04      	ldr	r3, [sp, #16]
 8004270:	3301      	adds	r3, #1
 8004272:	d1d3      	bne.n	800421c <_svfiprintf_r+0x170>
 8004274:	89bb      	ldrh	r3, [r7, #12]
 8004276:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004278:	065b      	lsls	r3, r3, #25
 800427a:	d400      	bmi.n	800427e <_svfiprintf_r+0x1d2>
 800427c:	e72d      	b.n	80040da <_svfiprintf_r+0x2e>
 800427e:	2001      	movs	r0, #1
 8004280:	4240      	negs	r0, r0
 8004282:	e72a      	b.n	80040da <_svfiprintf_r+0x2e>
 8004284:	ab07      	add	r3, sp, #28
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	003a      	movs	r2, r7
 800428a:	0021      	movs	r1, r4
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <_svfiprintf_r+0x1fc>)
 800428e:	9803      	ldr	r0, [sp, #12]
 8004290:	f000 f87c 	bl	800438c <_printf_i>
 8004294:	e7ea      	b.n	800426c <_svfiprintf_r+0x1c0>
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	08004918 	.word	0x08004918
 800429c:	0800491e 	.word	0x0800491e
 80042a0:	08004922 	.word	0x08004922
 80042a4:	00000000 	.word	0x00000000
 80042a8:	08003fe9 	.word	0x08003fe9

080042ac <_printf_common>:
 80042ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042ae:	0015      	movs	r5, r2
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	688a      	ldr	r2, [r1, #8]
 80042b4:	690b      	ldr	r3, [r1, #16]
 80042b6:	000c      	movs	r4, r1
 80042b8:	9000      	str	r0, [sp, #0]
 80042ba:	4293      	cmp	r3, r2
 80042bc:	da00      	bge.n	80042c0 <_printf_common+0x14>
 80042be:	0013      	movs	r3, r2
 80042c0:	0022      	movs	r2, r4
 80042c2:	602b      	str	r3, [r5, #0]
 80042c4:	3243      	adds	r2, #67	; 0x43
 80042c6:	7812      	ldrb	r2, [r2, #0]
 80042c8:	2a00      	cmp	r2, #0
 80042ca:	d001      	beq.n	80042d0 <_printf_common+0x24>
 80042cc:	3301      	adds	r3, #1
 80042ce:	602b      	str	r3, [r5, #0]
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	d502      	bpl.n	80042dc <_printf_common+0x30>
 80042d6:	682b      	ldr	r3, [r5, #0]
 80042d8:	3302      	adds	r3, #2
 80042da:	602b      	str	r3, [r5, #0]
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	2306      	movs	r3, #6
 80042e0:	0017      	movs	r7, r2
 80042e2:	401f      	ands	r7, r3
 80042e4:	421a      	tst	r2, r3
 80042e6:	d027      	beq.n	8004338 <_printf_common+0x8c>
 80042e8:	0023      	movs	r3, r4
 80042ea:	3343      	adds	r3, #67	; 0x43
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	1e5a      	subs	r2, r3, #1
 80042f0:	4193      	sbcs	r3, r2
 80042f2:	6822      	ldr	r2, [r4, #0]
 80042f4:	0692      	lsls	r2, r2, #26
 80042f6:	d430      	bmi.n	800435a <_printf_common+0xae>
 80042f8:	0022      	movs	r2, r4
 80042fa:	9901      	ldr	r1, [sp, #4]
 80042fc:	9800      	ldr	r0, [sp, #0]
 80042fe:	9e08      	ldr	r6, [sp, #32]
 8004300:	3243      	adds	r2, #67	; 0x43
 8004302:	47b0      	blx	r6
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d025      	beq.n	8004354 <_printf_common+0xa8>
 8004308:	2306      	movs	r3, #6
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	682a      	ldr	r2, [r5, #0]
 800430e:	68e1      	ldr	r1, [r4, #12]
 8004310:	2500      	movs	r5, #0
 8004312:	4003      	ands	r3, r0
 8004314:	2b04      	cmp	r3, #4
 8004316:	d103      	bne.n	8004320 <_printf_common+0x74>
 8004318:	1a8d      	subs	r5, r1, r2
 800431a:	43eb      	mvns	r3, r5
 800431c:	17db      	asrs	r3, r3, #31
 800431e:	401d      	ands	r5, r3
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	6922      	ldr	r2, [r4, #16]
 8004324:	4293      	cmp	r3, r2
 8004326:	dd01      	ble.n	800432c <_printf_common+0x80>
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	18ed      	adds	r5, r5, r3
 800432c:	2700      	movs	r7, #0
 800432e:	42bd      	cmp	r5, r7
 8004330:	d120      	bne.n	8004374 <_printf_common+0xc8>
 8004332:	2000      	movs	r0, #0
 8004334:	e010      	b.n	8004358 <_printf_common+0xac>
 8004336:	3701      	adds	r7, #1
 8004338:	68e3      	ldr	r3, [r4, #12]
 800433a:	682a      	ldr	r2, [r5, #0]
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	42bb      	cmp	r3, r7
 8004340:	ddd2      	ble.n	80042e8 <_printf_common+0x3c>
 8004342:	0022      	movs	r2, r4
 8004344:	2301      	movs	r3, #1
 8004346:	9901      	ldr	r1, [sp, #4]
 8004348:	9800      	ldr	r0, [sp, #0]
 800434a:	9e08      	ldr	r6, [sp, #32]
 800434c:	3219      	adds	r2, #25
 800434e:	47b0      	blx	r6
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d1f0      	bne.n	8004336 <_printf_common+0x8a>
 8004354:	2001      	movs	r0, #1
 8004356:	4240      	negs	r0, r0
 8004358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800435a:	2030      	movs	r0, #48	; 0x30
 800435c:	18e1      	adds	r1, r4, r3
 800435e:	3143      	adds	r1, #67	; 0x43
 8004360:	7008      	strb	r0, [r1, #0]
 8004362:	0021      	movs	r1, r4
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	3145      	adds	r1, #69	; 0x45
 8004368:	7809      	ldrb	r1, [r1, #0]
 800436a:	18a2      	adds	r2, r4, r2
 800436c:	3243      	adds	r2, #67	; 0x43
 800436e:	3302      	adds	r3, #2
 8004370:	7011      	strb	r1, [r2, #0]
 8004372:	e7c1      	b.n	80042f8 <_printf_common+0x4c>
 8004374:	0022      	movs	r2, r4
 8004376:	2301      	movs	r3, #1
 8004378:	9901      	ldr	r1, [sp, #4]
 800437a:	9800      	ldr	r0, [sp, #0]
 800437c:	9e08      	ldr	r6, [sp, #32]
 800437e:	321a      	adds	r2, #26
 8004380:	47b0      	blx	r6
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d0e6      	beq.n	8004354 <_printf_common+0xa8>
 8004386:	3701      	adds	r7, #1
 8004388:	e7d1      	b.n	800432e <_printf_common+0x82>
	...

0800438c <_printf_i>:
 800438c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438e:	b08b      	sub	sp, #44	; 0x2c
 8004390:	9206      	str	r2, [sp, #24]
 8004392:	000a      	movs	r2, r1
 8004394:	3243      	adds	r2, #67	; 0x43
 8004396:	9307      	str	r3, [sp, #28]
 8004398:	9005      	str	r0, [sp, #20]
 800439a:	9204      	str	r2, [sp, #16]
 800439c:	7e0a      	ldrb	r2, [r1, #24]
 800439e:	000c      	movs	r4, r1
 80043a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80043a2:	2a78      	cmp	r2, #120	; 0x78
 80043a4:	d807      	bhi.n	80043b6 <_printf_i+0x2a>
 80043a6:	2a62      	cmp	r2, #98	; 0x62
 80043a8:	d809      	bhi.n	80043be <_printf_i+0x32>
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d100      	bne.n	80043b0 <_printf_i+0x24>
 80043ae:	e0c1      	b.n	8004534 <_printf_i+0x1a8>
 80043b0:	2a58      	cmp	r2, #88	; 0x58
 80043b2:	d100      	bne.n	80043b6 <_printf_i+0x2a>
 80043b4:	e08c      	b.n	80044d0 <_printf_i+0x144>
 80043b6:	0026      	movs	r6, r4
 80043b8:	3642      	adds	r6, #66	; 0x42
 80043ba:	7032      	strb	r2, [r6, #0]
 80043bc:	e022      	b.n	8004404 <_printf_i+0x78>
 80043be:	0010      	movs	r0, r2
 80043c0:	3863      	subs	r0, #99	; 0x63
 80043c2:	2815      	cmp	r0, #21
 80043c4:	d8f7      	bhi.n	80043b6 <_printf_i+0x2a>
 80043c6:	f7fb fea7 	bl	8000118 <__gnu_thumb1_case_shi>
 80043ca:	0016      	.short	0x0016
 80043cc:	fff6001f 	.word	0xfff6001f
 80043d0:	fff6fff6 	.word	0xfff6fff6
 80043d4:	001ffff6 	.word	0x001ffff6
 80043d8:	fff6fff6 	.word	0xfff6fff6
 80043dc:	fff6fff6 	.word	0xfff6fff6
 80043e0:	003600a8 	.word	0x003600a8
 80043e4:	fff6009a 	.word	0xfff6009a
 80043e8:	00b9fff6 	.word	0x00b9fff6
 80043ec:	0036fff6 	.word	0x0036fff6
 80043f0:	fff6fff6 	.word	0xfff6fff6
 80043f4:	009e      	.short	0x009e
 80043f6:	0026      	movs	r6, r4
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	3642      	adds	r6, #66	; 0x42
 80043fc:	1d11      	adds	r1, r2, #4
 80043fe:	6019      	str	r1, [r3, #0]
 8004400:	6813      	ldr	r3, [r2, #0]
 8004402:	7033      	strb	r3, [r6, #0]
 8004404:	2301      	movs	r3, #1
 8004406:	e0a7      	b.n	8004558 <_printf_i+0x1cc>
 8004408:	6808      	ldr	r0, [r1, #0]
 800440a:	6819      	ldr	r1, [r3, #0]
 800440c:	1d0a      	adds	r2, r1, #4
 800440e:	0605      	lsls	r5, r0, #24
 8004410:	d50b      	bpl.n	800442a <_printf_i+0x9e>
 8004412:	680d      	ldr	r5, [r1, #0]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	2d00      	cmp	r5, #0
 8004418:	da03      	bge.n	8004422 <_printf_i+0x96>
 800441a:	232d      	movs	r3, #45	; 0x2d
 800441c:	9a04      	ldr	r2, [sp, #16]
 800441e:	426d      	negs	r5, r5
 8004420:	7013      	strb	r3, [r2, #0]
 8004422:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <_printf_i+0x21c>)
 8004424:	270a      	movs	r7, #10
 8004426:	9303      	str	r3, [sp, #12]
 8004428:	e01b      	b.n	8004462 <_printf_i+0xd6>
 800442a:	680d      	ldr	r5, [r1, #0]
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	0641      	lsls	r1, r0, #25
 8004430:	d5f1      	bpl.n	8004416 <_printf_i+0x8a>
 8004432:	b22d      	sxth	r5, r5
 8004434:	e7ef      	b.n	8004416 <_printf_i+0x8a>
 8004436:	680d      	ldr	r5, [r1, #0]
 8004438:	6819      	ldr	r1, [r3, #0]
 800443a:	1d08      	adds	r0, r1, #4
 800443c:	6018      	str	r0, [r3, #0]
 800443e:	062e      	lsls	r6, r5, #24
 8004440:	d501      	bpl.n	8004446 <_printf_i+0xba>
 8004442:	680d      	ldr	r5, [r1, #0]
 8004444:	e003      	b.n	800444e <_printf_i+0xc2>
 8004446:	066d      	lsls	r5, r5, #25
 8004448:	d5fb      	bpl.n	8004442 <_printf_i+0xb6>
 800444a:	680d      	ldr	r5, [r1, #0]
 800444c:	b2ad      	uxth	r5, r5
 800444e:	4b56      	ldr	r3, [pc, #344]	; (80045a8 <_printf_i+0x21c>)
 8004450:	2708      	movs	r7, #8
 8004452:	9303      	str	r3, [sp, #12]
 8004454:	2a6f      	cmp	r2, #111	; 0x6f
 8004456:	d000      	beq.n	800445a <_printf_i+0xce>
 8004458:	3702      	adds	r7, #2
 800445a:	0023      	movs	r3, r4
 800445c:	2200      	movs	r2, #0
 800445e:	3343      	adds	r3, #67	; 0x43
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	6863      	ldr	r3, [r4, #4]
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db03      	blt.n	8004472 <_printf_i+0xe6>
 800446a:	2204      	movs	r2, #4
 800446c:	6821      	ldr	r1, [r4, #0]
 800446e:	4391      	bics	r1, r2
 8004470:	6021      	str	r1, [r4, #0]
 8004472:	2d00      	cmp	r5, #0
 8004474:	d102      	bne.n	800447c <_printf_i+0xf0>
 8004476:	9e04      	ldr	r6, [sp, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <_printf_i+0x10a>
 800447c:	9e04      	ldr	r6, [sp, #16]
 800447e:	0028      	movs	r0, r5
 8004480:	0039      	movs	r1, r7
 8004482:	f7fb fed9 	bl	8000238 <__aeabi_uidivmod>
 8004486:	9b03      	ldr	r3, [sp, #12]
 8004488:	3e01      	subs	r6, #1
 800448a:	5c5b      	ldrb	r3, [r3, r1]
 800448c:	7033      	strb	r3, [r6, #0]
 800448e:	002b      	movs	r3, r5
 8004490:	0005      	movs	r5, r0
 8004492:	429f      	cmp	r7, r3
 8004494:	d9f3      	bls.n	800447e <_printf_i+0xf2>
 8004496:	2f08      	cmp	r7, #8
 8004498:	d109      	bne.n	80044ae <_printf_i+0x122>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	07db      	lsls	r3, r3, #31
 800449e:	d506      	bpl.n	80044ae <_printf_i+0x122>
 80044a0:	6863      	ldr	r3, [r4, #4]
 80044a2:	6922      	ldr	r2, [r4, #16]
 80044a4:	4293      	cmp	r3, r2
 80044a6:	dc02      	bgt.n	80044ae <_printf_i+0x122>
 80044a8:	2330      	movs	r3, #48	; 0x30
 80044aa:	3e01      	subs	r6, #1
 80044ac:	7033      	strb	r3, [r6, #0]
 80044ae:	9b04      	ldr	r3, [sp, #16]
 80044b0:	1b9b      	subs	r3, r3, r6
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	9b07      	ldr	r3, [sp, #28]
 80044b6:	0021      	movs	r1, r4
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	9805      	ldr	r0, [sp, #20]
 80044bc:	9b06      	ldr	r3, [sp, #24]
 80044be:	aa09      	add	r2, sp, #36	; 0x24
 80044c0:	f7ff fef4 	bl	80042ac <_printf_common>
 80044c4:	1c43      	adds	r3, r0, #1
 80044c6:	d14c      	bne.n	8004562 <_printf_i+0x1d6>
 80044c8:	2001      	movs	r0, #1
 80044ca:	4240      	negs	r0, r0
 80044cc:	b00b      	add	sp, #44	; 0x2c
 80044ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d0:	3145      	adds	r1, #69	; 0x45
 80044d2:	700a      	strb	r2, [r1, #0]
 80044d4:	4a34      	ldr	r2, [pc, #208]	; (80045a8 <_printf_i+0x21c>)
 80044d6:	9203      	str	r2, [sp, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	ca20      	ldmia	r2!, {r5}
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	0608      	lsls	r0, r1, #24
 80044e2:	d516      	bpl.n	8004512 <_printf_i+0x186>
 80044e4:	07cb      	lsls	r3, r1, #31
 80044e6:	d502      	bpl.n	80044ee <_printf_i+0x162>
 80044e8:	2320      	movs	r3, #32
 80044ea:	4319      	orrs	r1, r3
 80044ec:	6021      	str	r1, [r4, #0]
 80044ee:	2710      	movs	r7, #16
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	d1b2      	bne.n	800445a <_printf_i+0xce>
 80044f4:	2320      	movs	r3, #32
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	439a      	bics	r2, r3
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	e7ad      	b.n	800445a <_printf_i+0xce>
 80044fe:	2220      	movs	r2, #32
 8004500:	6809      	ldr	r1, [r1, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	6022      	str	r2, [r4, #0]
 8004506:	0022      	movs	r2, r4
 8004508:	2178      	movs	r1, #120	; 0x78
 800450a:	3245      	adds	r2, #69	; 0x45
 800450c:	7011      	strb	r1, [r2, #0]
 800450e:	4a27      	ldr	r2, [pc, #156]	; (80045ac <_printf_i+0x220>)
 8004510:	e7e1      	b.n	80044d6 <_printf_i+0x14a>
 8004512:	0648      	lsls	r0, r1, #25
 8004514:	d5e6      	bpl.n	80044e4 <_printf_i+0x158>
 8004516:	b2ad      	uxth	r5, r5
 8004518:	e7e4      	b.n	80044e4 <_printf_i+0x158>
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	680d      	ldr	r5, [r1, #0]
 800451e:	1d10      	adds	r0, r2, #4
 8004520:	6949      	ldr	r1, [r1, #20]
 8004522:	6018      	str	r0, [r3, #0]
 8004524:	6813      	ldr	r3, [r2, #0]
 8004526:	062e      	lsls	r6, r5, #24
 8004528:	d501      	bpl.n	800452e <_printf_i+0x1a2>
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	e002      	b.n	8004534 <_printf_i+0x1a8>
 800452e:	066d      	lsls	r5, r5, #25
 8004530:	d5fb      	bpl.n	800452a <_printf_i+0x19e>
 8004532:	8019      	strh	r1, [r3, #0]
 8004534:	2300      	movs	r3, #0
 8004536:	9e04      	ldr	r6, [sp, #16]
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	e7bb      	b.n	80044b4 <_printf_i+0x128>
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	1d11      	adds	r1, r2, #4
 8004540:	6019      	str	r1, [r3, #0]
 8004542:	6816      	ldr	r6, [r2, #0]
 8004544:	2100      	movs	r1, #0
 8004546:	0030      	movs	r0, r6
 8004548:	6862      	ldr	r2, [r4, #4]
 800454a:	f000 f831 	bl	80045b0 <memchr>
 800454e:	2800      	cmp	r0, #0
 8004550:	d001      	beq.n	8004556 <_printf_i+0x1ca>
 8004552:	1b80      	subs	r0, r0, r6
 8004554:	6060      	str	r0, [r4, #4]
 8004556:	6863      	ldr	r3, [r4, #4]
 8004558:	6123      	str	r3, [r4, #16]
 800455a:	2300      	movs	r3, #0
 800455c:	9a04      	ldr	r2, [sp, #16]
 800455e:	7013      	strb	r3, [r2, #0]
 8004560:	e7a8      	b.n	80044b4 <_printf_i+0x128>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	0032      	movs	r2, r6
 8004566:	9906      	ldr	r1, [sp, #24]
 8004568:	9805      	ldr	r0, [sp, #20]
 800456a:	9d07      	ldr	r5, [sp, #28]
 800456c:	47a8      	blx	r5
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	d0aa      	beq.n	80044c8 <_printf_i+0x13c>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	079b      	lsls	r3, r3, #30
 8004576:	d415      	bmi.n	80045a4 <_printf_i+0x218>
 8004578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457a:	68e0      	ldr	r0, [r4, #12]
 800457c:	4298      	cmp	r0, r3
 800457e:	daa5      	bge.n	80044cc <_printf_i+0x140>
 8004580:	0018      	movs	r0, r3
 8004582:	e7a3      	b.n	80044cc <_printf_i+0x140>
 8004584:	0022      	movs	r2, r4
 8004586:	2301      	movs	r3, #1
 8004588:	9906      	ldr	r1, [sp, #24]
 800458a:	9805      	ldr	r0, [sp, #20]
 800458c:	9e07      	ldr	r6, [sp, #28]
 800458e:	3219      	adds	r2, #25
 8004590:	47b0      	blx	r6
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	d098      	beq.n	80044c8 <_printf_i+0x13c>
 8004596:	3501      	adds	r5, #1
 8004598:	68e3      	ldr	r3, [r4, #12]
 800459a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	42ab      	cmp	r3, r5
 80045a0:	dcf0      	bgt.n	8004584 <_printf_i+0x1f8>
 80045a2:	e7e9      	b.n	8004578 <_printf_i+0x1ec>
 80045a4:	2500      	movs	r5, #0
 80045a6:	e7f7      	b.n	8004598 <_printf_i+0x20c>
 80045a8:	08004929 	.word	0x08004929
 80045ac:	0800493a 	.word	0x0800493a

080045b0 <memchr>:
 80045b0:	b2c9      	uxtb	r1, r1
 80045b2:	1882      	adds	r2, r0, r2
 80045b4:	4290      	cmp	r0, r2
 80045b6:	d101      	bne.n	80045bc <memchr+0xc>
 80045b8:	2000      	movs	r0, #0
 80045ba:	4770      	bx	lr
 80045bc:	7803      	ldrb	r3, [r0, #0]
 80045be:	428b      	cmp	r3, r1
 80045c0:	d0fb      	beq.n	80045ba <memchr+0xa>
 80045c2:	3001      	adds	r0, #1
 80045c4:	e7f6      	b.n	80045b4 <memchr+0x4>

080045c6 <memmove>:
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4288      	cmp	r0, r1
 80045ca:	d902      	bls.n	80045d2 <memmove+0xc>
 80045cc:	188b      	adds	r3, r1, r2
 80045ce:	4298      	cmp	r0, r3
 80045d0:	d303      	bcc.n	80045da <memmove+0x14>
 80045d2:	2300      	movs	r3, #0
 80045d4:	e007      	b.n	80045e6 <memmove+0x20>
 80045d6:	5c8b      	ldrb	r3, [r1, r2]
 80045d8:	5483      	strb	r3, [r0, r2]
 80045da:	3a01      	subs	r2, #1
 80045dc:	d2fb      	bcs.n	80045d6 <memmove+0x10>
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	5ccc      	ldrb	r4, [r1, r3]
 80045e2:	54c4      	strb	r4, [r0, r3]
 80045e4:	3301      	adds	r3, #1
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d1fa      	bne.n	80045e0 <memmove+0x1a>
 80045ea:	e7f8      	b.n	80045de <memmove+0x18>

080045ec <_free_r>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	0005      	movs	r5, r0
 80045f0:	2900      	cmp	r1, #0
 80045f2:	d010      	beq.n	8004616 <_free_r+0x2a>
 80045f4:	1f0c      	subs	r4, r1, #4
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da00      	bge.n	80045fe <_free_r+0x12>
 80045fc:	18e4      	adds	r4, r4, r3
 80045fe:	0028      	movs	r0, r5
 8004600:	f000 f918 	bl	8004834 <__malloc_lock>
 8004604:	4a1d      	ldr	r2, [pc, #116]	; (800467c <_free_r+0x90>)
 8004606:	6813      	ldr	r3, [r2, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <_free_r+0x2c>
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	6014      	str	r4, [r2, #0]
 8004610:	0028      	movs	r0, r5
 8004612:	f000 f917 	bl	8004844 <__malloc_unlock>
 8004616:	bd70      	pop	{r4, r5, r6, pc}
 8004618:	42a3      	cmp	r3, r4
 800461a:	d908      	bls.n	800462e <_free_r+0x42>
 800461c:	6821      	ldr	r1, [r4, #0]
 800461e:	1860      	adds	r0, r4, r1
 8004620:	4283      	cmp	r3, r0
 8004622:	d1f3      	bne.n	800460c <_free_r+0x20>
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	1841      	adds	r1, r0, r1
 800462a:	6021      	str	r1, [r4, #0]
 800462c:	e7ee      	b.n	800460c <_free_r+0x20>
 800462e:	001a      	movs	r2, r3
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <_free_r+0x4e>
 8004636:	42a3      	cmp	r3, r4
 8004638:	d9f9      	bls.n	800462e <_free_r+0x42>
 800463a:	6811      	ldr	r1, [r2, #0]
 800463c:	1850      	adds	r0, r2, r1
 800463e:	42a0      	cmp	r0, r4
 8004640:	d10b      	bne.n	800465a <_free_r+0x6e>
 8004642:	6820      	ldr	r0, [r4, #0]
 8004644:	1809      	adds	r1, r1, r0
 8004646:	1850      	adds	r0, r2, r1
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	4283      	cmp	r3, r0
 800464c:	d1e0      	bne.n	8004610 <_free_r+0x24>
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	1841      	adds	r1, r0, r1
 8004654:	6011      	str	r1, [r2, #0]
 8004656:	6053      	str	r3, [r2, #4]
 8004658:	e7da      	b.n	8004610 <_free_r+0x24>
 800465a:	42a0      	cmp	r0, r4
 800465c:	d902      	bls.n	8004664 <_free_r+0x78>
 800465e:	230c      	movs	r3, #12
 8004660:	602b      	str	r3, [r5, #0]
 8004662:	e7d5      	b.n	8004610 <_free_r+0x24>
 8004664:	6821      	ldr	r1, [r4, #0]
 8004666:	1860      	adds	r0, r4, r1
 8004668:	4283      	cmp	r3, r0
 800466a:	d103      	bne.n	8004674 <_free_r+0x88>
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1841      	adds	r1, r0, r1
 8004672:	6021      	str	r1, [r4, #0]
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	6054      	str	r4, [r2, #4]
 8004678:	e7ca      	b.n	8004610 <_free_r+0x24>
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	2000035c 	.word	0x2000035c

08004680 <sbrk_aligned>:
 8004680:	b570      	push	{r4, r5, r6, lr}
 8004682:	4e0f      	ldr	r6, [pc, #60]	; (80046c0 <sbrk_aligned+0x40>)
 8004684:	000d      	movs	r5, r1
 8004686:	6831      	ldr	r1, [r6, #0]
 8004688:	0004      	movs	r4, r0
 800468a:	2900      	cmp	r1, #0
 800468c:	d102      	bne.n	8004694 <sbrk_aligned+0x14>
 800468e:	f000 f8bf 	bl	8004810 <_sbrk_r>
 8004692:	6030      	str	r0, [r6, #0]
 8004694:	0029      	movs	r1, r5
 8004696:	0020      	movs	r0, r4
 8004698:	f000 f8ba 	bl	8004810 <_sbrk_r>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d00a      	beq.n	80046b6 <sbrk_aligned+0x36>
 80046a0:	2303      	movs	r3, #3
 80046a2:	1cc5      	adds	r5, r0, #3
 80046a4:	439d      	bics	r5, r3
 80046a6:	42a8      	cmp	r0, r5
 80046a8:	d007      	beq.n	80046ba <sbrk_aligned+0x3a>
 80046aa:	1a29      	subs	r1, r5, r0
 80046ac:	0020      	movs	r0, r4
 80046ae:	f000 f8af 	bl	8004810 <_sbrk_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	d101      	bne.n	80046ba <sbrk_aligned+0x3a>
 80046b6:	2501      	movs	r5, #1
 80046b8:	426d      	negs	r5, r5
 80046ba:	0028      	movs	r0, r5
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000360 	.word	0x20000360

080046c4 <_malloc_r>:
 80046c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c6:	2203      	movs	r2, #3
 80046c8:	1ccb      	adds	r3, r1, #3
 80046ca:	4393      	bics	r3, r2
 80046cc:	3308      	adds	r3, #8
 80046ce:	0006      	movs	r6, r0
 80046d0:	001f      	movs	r7, r3
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d232      	bcs.n	800473c <_malloc_r+0x78>
 80046d6:	270c      	movs	r7, #12
 80046d8:	42b9      	cmp	r1, r7
 80046da:	d831      	bhi.n	8004740 <_malloc_r+0x7c>
 80046dc:	0030      	movs	r0, r6
 80046de:	f000 f8a9 	bl	8004834 <__malloc_lock>
 80046e2:	4d32      	ldr	r5, [pc, #200]	; (80047ac <_malloc_r+0xe8>)
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	001c      	movs	r4, r3
 80046e8:	2c00      	cmp	r4, #0
 80046ea:	d12e      	bne.n	800474a <_malloc_r+0x86>
 80046ec:	0039      	movs	r1, r7
 80046ee:	0030      	movs	r0, r6
 80046f0:	f7ff ffc6 	bl	8004680 <sbrk_aligned>
 80046f4:	0004      	movs	r4, r0
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d11e      	bne.n	8004738 <_malloc_r+0x74>
 80046fa:	682c      	ldr	r4, [r5, #0]
 80046fc:	0025      	movs	r5, r4
 80046fe:	2d00      	cmp	r5, #0
 8004700:	d14a      	bne.n	8004798 <_malloc_r+0xd4>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	0029      	movs	r1, r5
 8004706:	18e3      	adds	r3, r4, r3
 8004708:	0030      	movs	r0, r6
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	f000 f880 	bl	8004810 <_sbrk_r>
 8004710:	9b01      	ldr	r3, [sp, #4]
 8004712:	4283      	cmp	r3, r0
 8004714:	d143      	bne.n	800479e <_malloc_r+0xda>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	3703      	adds	r7, #3
 800471a:	1aff      	subs	r7, r7, r3
 800471c:	2303      	movs	r3, #3
 800471e:	439f      	bics	r7, r3
 8004720:	3708      	adds	r7, #8
 8004722:	2f0c      	cmp	r7, #12
 8004724:	d200      	bcs.n	8004728 <_malloc_r+0x64>
 8004726:	270c      	movs	r7, #12
 8004728:	0039      	movs	r1, r7
 800472a:	0030      	movs	r0, r6
 800472c:	f7ff ffa8 	bl	8004680 <sbrk_aligned>
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d034      	beq.n	800479e <_malloc_r+0xda>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	19df      	adds	r7, r3, r7
 8004738:	6027      	str	r7, [r4, #0]
 800473a:	e013      	b.n	8004764 <_malloc_r+0xa0>
 800473c:	2b00      	cmp	r3, #0
 800473e:	dacb      	bge.n	80046d8 <_malloc_r+0x14>
 8004740:	230c      	movs	r3, #12
 8004742:	2500      	movs	r5, #0
 8004744:	6033      	str	r3, [r6, #0]
 8004746:	0028      	movs	r0, r5
 8004748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	1bd1      	subs	r1, r2, r7
 800474e:	d420      	bmi.n	8004792 <_malloc_r+0xce>
 8004750:	290b      	cmp	r1, #11
 8004752:	d917      	bls.n	8004784 <_malloc_r+0xc0>
 8004754:	19e2      	adds	r2, r4, r7
 8004756:	6027      	str	r7, [r4, #0]
 8004758:	42a3      	cmp	r3, r4
 800475a:	d111      	bne.n	8004780 <_malloc_r+0xbc>
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	6863      	ldr	r3, [r4, #4]
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	6053      	str	r3, [r2, #4]
 8004764:	0030      	movs	r0, r6
 8004766:	0025      	movs	r5, r4
 8004768:	f000 f86c 	bl	8004844 <__malloc_unlock>
 800476c:	2207      	movs	r2, #7
 800476e:	350b      	adds	r5, #11
 8004770:	1d23      	adds	r3, r4, #4
 8004772:	4395      	bics	r5, r2
 8004774:	1aea      	subs	r2, r5, r3
 8004776:	429d      	cmp	r5, r3
 8004778:	d0e5      	beq.n	8004746 <_malloc_r+0x82>
 800477a:	1b5b      	subs	r3, r3, r5
 800477c:	50a3      	str	r3, [r4, r2]
 800477e:	e7e2      	b.n	8004746 <_malloc_r+0x82>
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	e7ec      	b.n	800475e <_malloc_r+0x9a>
 8004784:	6862      	ldr	r2, [r4, #4]
 8004786:	42a3      	cmp	r3, r4
 8004788:	d101      	bne.n	800478e <_malloc_r+0xca>
 800478a:	602a      	str	r2, [r5, #0]
 800478c:	e7ea      	b.n	8004764 <_malloc_r+0xa0>
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	e7e8      	b.n	8004764 <_malloc_r+0xa0>
 8004792:	0023      	movs	r3, r4
 8004794:	6864      	ldr	r4, [r4, #4]
 8004796:	e7a7      	b.n	80046e8 <_malloc_r+0x24>
 8004798:	002c      	movs	r4, r5
 800479a:	686d      	ldr	r5, [r5, #4]
 800479c:	e7af      	b.n	80046fe <_malloc_r+0x3a>
 800479e:	230c      	movs	r3, #12
 80047a0:	0030      	movs	r0, r6
 80047a2:	6033      	str	r3, [r6, #0]
 80047a4:	f000 f84e 	bl	8004844 <__malloc_unlock>
 80047a8:	e7cd      	b.n	8004746 <_malloc_r+0x82>
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	2000035c 	.word	0x2000035c

080047b0 <_realloc_r>:
 80047b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b2:	0007      	movs	r7, r0
 80047b4:	000e      	movs	r6, r1
 80047b6:	0014      	movs	r4, r2
 80047b8:	2900      	cmp	r1, #0
 80047ba:	d105      	bne.n	80047c8 <_realloc_r+0x18>
 80047bc:	0011      	movs	r1, r2
 80047be:	f7ff ff81 	bl	80046c4 <_malloc_r>
 80047c2:	0005      	movs	r5, r0
 80047c4:	0028      	movs	r0, r5
 80047c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	d103      	bne.n	80047d4 <_realloc_r+0x24>
 80047cc:	f7ff ff0e 	bl	80045ec <_free_r>
 80047d0:	0025      	movs	r5, r4
 80047d2:	e7f7      	b.n	80047c4 <_realloc_r+0x14>
 80047d4:	f000 f83e 	bl	8004854 <_malloc_usable_size_r>
 80047d8:	9001      	str	r0, [sp, #4]
 80047da:	4284      	cmp	r4, r0
 80047dc:	d803      	bhi.n	80047e6 <_realloc_r+0x36>
 80047de:	0035      	movs	r5, r6
 80047e0:	0843      	lsrs	r3, r0, #1
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	d3ee      	bcc.n	80047c4 <_realloc_r+0x14>
 80047e6:	0021      	movs	r1, r4
 80047e8:	0038      	movs	r0, r7
 80047ea:	f7ff ff6b 	bl	80046c4 <_malloc_r>
 80047ee:	1e05      	subs	r5, r0, #0
 80047f0:	d0e8      	beq.n	80047c4 <_realloc_r+0x14>
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	0022      	movs	r2, r4
 80047f6:	429c      	cmp	r4, r3
 80047f8:	d900      	bls.n	80047fc <_realloc_r+0x4c>
 80047fa:	001a      	movs	r2, r3
 80047fc:	0031      	movs	r1, r6
 80047fe:	0028      	movs	r0, r5
 8004800:	f7ff fbc0 	bl	8003f84 <memcpy>
 8004804:	0031      	movs	r1, r6
 8004806:	0038      	movs	r0, r7
 8004808:	f7ff fef0 	bl	80045ec <_free_r>
 800480c:	e7da      	b.n	80047c4 <_realloc_r+0x14>
	...

08004810 <_sbrk_r>:
 8004810:	2300      	movs	r3, #0
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	4d06      	ldr	r5, [pc, #24]	; (8004830 <_sbrk_r+0x20>)
 8004816:	0004      	movs	r4, r0
 8004818:	0008      	movs	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fc fb72 	bl	8000f04 <_sbrk>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d103      	bne.n	800482c <_sbrk_r+0x1c>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d000      	beq.n	800482c <_sbrk_r+0x1c>
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	20000364 	.word	0x20000364

08004834 <__malloc_lock>:
 8004834:	b510      	push	{r4, lr}
 8004836:	4802      	ldr	r0, [pc, #8]	; (8004840 <__malloc_lock+0xc>)
 8004838:	f000 f814 	bl	8004864 <__retarget_lock_acquire_recursive>
 800483c:	bd10      	pop	{r4, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	20000368 	.word	0x20000368

08004844 <__malloc_unlock>:
 8004844:	b510      	push	{r4, lr}
 8004846:	4802      	ldr	r0, [pc, #8]	; (8004850 <__malloc_unlock+0xc>)
 8004848:	f000 f80d 	bl	8004866 <__retarget_lock_release_recursive>
 800484c:	bd10      	pop	{r4, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	20000368 	.word	0x20000368

08004854 <_malloc_usable_size_r>:
 8004854:	1f0b      	subs	r3, r1, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	1f18      	subs	r0, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	da01      	bge.n	8004862 <_malloc_usable_size_r+0xe>
 800485e:	580b      	ldr	r3, [r1, r0]
 8004860:	18c0      	adds	r0, r0, r3
 8004862:	4770      	bx	lr

08004864 <__retarget_lock_acquire_recursive>:
 8004864:	4770      	bx	lr

08004866 <__retarget_lock_release_recursive>:
 8004866:	4770      	bx	lr

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr
