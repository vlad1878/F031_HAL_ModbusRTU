
F031_HAl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bfc  08004bfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004bfc  08004bfc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bfc  08004bfc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bfc  08004bfc  00014bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c00  08004c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000074  08004c78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08004c78  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da13  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002299  00000000  00000000  0002daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002fd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  00030848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c81  00000000  00000000  00031260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebfd  00000000  00000000  00041ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060729  00000000  00000000  00050ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a1c  00000000  00000000  000b1258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b00 	.word	0x08004b00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004b00 	.word	0x08004b00

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_f2iz>:
 8000244:	0241      	lsls	r1, r0, #9
 8000246:	0042      	lsls	r2, r0, #1
 8000248:	0fc3      	lsrs	r3, r0, #31
 800024a:	0a49      	lsrs	r1, r1, #9
 800024c:	2000      	movs	r0, #0
 800024e:	0e12      	lsrs	r2, r2, #24
 8000250:	2a7e      	cmp	r2, #126	; 0x7e
 8000252:	dd03      	ble.n	800025c <__aeabi_f2iz+0x18>
 8000254:	2a9d      	cmp	r2, #157	; 0x9d
 8000256:	dd02      	ble.n	800025e <__aeabi_f2iz+0x1a>
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <__aeabi_f2iz+0x3c>)
 800025a:	1898      	adds	r0, r3, r2
 800025c:	4770      	bx	lr
 800025e:	2080      	movs	r0, #128	; 0x80
 8000260:	0400      	lsls	r0, r0, #16
 8000262:	4301      	orrs	r1, r0
 8000264:	2a95      	cmp	r2, #149	; 0x95
 8000266:	dc07      	bgt.n	8000278 <__aeabi_f2iz+0x34>
 8000268:	2096      	movs	r0, #150	; 0x96
 800026a:	1a82      	subs	r2, r0, r2
 800026c:	40d1      	lsrs	r1, r2
 800026e:	4248      	negs	r0, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d1f3      	bne.n	800025c <__aeabi_f2iz+0x18>
 8000274:	0008      	movs	r0, r1
 8000276:	e7f1      	b.n	800025c <__aeabi_f2iz+0x18>
 8000278:	3a96      	subs	r2, #150	; 0x96
 800027a:	4091      	lsls	r1, r2
 800027c:	e7f7      	b.n	800026e <__aeabi_f2iz+0x2a>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	7fffffff 	.word	0x7fffffff

08000284 <ModbusRTU_CRC16_Calculate>:
uint8_t ModbusRTU_tx_buffer[ModbusRTU_TX_BUFFER_SIZE] = {0, };
uint8_t ModbusRTU_rx_buffer[ModbusRTU_RX_BUFFER_SIZE] = {0, };

extern UART_HandleTypeDef huart1;

uint16_t ModbusRTU_CRC16_Calculate(uint8_t *data, uint8_t lenght, uint8_t byte_order) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	0008      	movs	r0, r1
 800028e:	0011      	movs	r1, r2
 8000290:	1cfb      	adds	r3, r7, #3
 8000292:	1c02      	adds	r2, r0, #0
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	1cbb      	adds	r3, r7, #2
 8000298:	1c0a      	adds	r2, r1, #0
 800029a:	701a      	strb	r2, [r3, #0]
	uint16_t crc = 0xFFFF;
 800029c:	230e      	movs	r3, #14
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	2201      	movs	r2, #1
 80002a2:	4252      	negs	r2, r2
 80002a4:	801a      	strh	r2, [r3, #0]
	while (lenght--) {
 80002a6:	e028      	b.n	80002fa <ModbusRTU_CRC16_Calculate+0x76>
		crc ^= *data++;
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	1c5a      	adds	r2, r3, #1
 80002ac:	607a      	str	r2, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	b299      	uxth	r1, r3
 80002b2:	220e      	movs	r2, #14
 80002b4:	18bb      	adds	r3, r7, r2
 80002b6:	18ba      	adds	r2, r7, r2
 80002b8:	8812      	ldrh	r2, [r2, #0]
 80002ba:	404a      	eors	r2, r1
 80002bc:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
 80002c2:	e017      	b.n	80002f4 <ModbusRTU_CRC16_Calculate+0x70>
			if (crc & 0x01) {
 80002c4:	210e      	movs	r1, #14
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	881b      	ldrh	r3, [r3, #0]
 80002ca:	2201      	movs	r2, #1
 80002cc:	4013      	ands	r3, r2
 80002ce:	d008      	beq.n	80002e2 <ModbusRTU_CRC16_Calculate+0x5e>
				crc = (crc >> 1u) ^ 0xA001;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	085b      	lsrs	r3, r3, #1
 80002d6:	b29a      	uxth	r2, r3
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	4941      	ldr	r1, [pc, #260]	; (80003e0 <ModbusRTU_CRC16_Calculate+0x15c>)
 80002dc:	404a      	eors	r2, r1
 80002de:	801a      	strh	r2, [r3, #0]
 80002e0:	e005      	b.n	80002ee <ModbusRTU_CRC16_Calculate+0x6a>
			} else {
				crc = crc >> 1u;
 80002e2:	220e      	movs	r2, #14
 80002e4:	18bb      	adds	r3, r7, r2
 80002e6:	18ba      	adds	r2, r7, r2
 80002e8:	8812      	ldrh	r2, [r2, #0]
 80002ea:	0852      	lsrs	r2, r2, #1
 80002ec:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	3301      	adds	r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	2b07      	cmp	r3, #7
 80002f8:	dde4      	ble.n	80002c4 <ModbusRTU_CRC16_Calculate+0x40>
	while (lenght--) {
 80002fa:	1cfb      	adds	r3, r7, #3
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	1cfa      	adds	r2, r7, #3
 8000300:	1e59      	subs	r1, r3, #1
 8000302:	7011      	strb	r1, [r2, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1cf      	bne.n	80002a8 <ModbusRTU_CRC16_Calculate+0x24>
			}
		}
	}
	switch (byte_order) {
 8000308:	1cbb      	adds	r3, r7, #2
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b03      	cmp	r3, #3
 800030e:	d038      	beq.n	8000382 <ModbusRTU_CRC16_Calculate+0xfe>
 8000310:	dc5e      	bgt.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
 8000312:	2b02      	cmp	r3, #2
 8000314:	d013      	beq.n	800033e <ModbusRTU_CRC16_Calculate+0xba>
 8000316:	dc5b      	bgt.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
 8000318:	2b00      	cmp	r3, #0
 800031a:	d058      	beq.n	80003ce <ModbusRTU_CRC16_Calculate+0x14a>
 800031c:	2b01      	cmp	r3, #1
 800031e:	d157      	bne.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
	case (0): //1234(младшим регистром вперед, младшим байтом вперед),
		break;
	case (1): //3412(старшим регистром вперед, младшим байтом вперед),
		crc = (crc << 8u) | (crc >> 8u);
 8000320:	210e      	movs	r1, #14
 8000322:	187b      	adds	r3, r7, r1
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	021b      	lsls	r3, r3, #8
 8000328:	b21a      	sxth	r2, r3
 800032a:	187b      	adds	r3, r7, r1
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	0a1b      	lsrs	r3, r3, #8
 8000330:	b29b      	uxth	r3, r3
 8000332:	b21b      	sxth	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b21a      	sxth	r2, r3
 8000338:	187b      	adds	r3, r7, r1
 800033a:	801a      	strh	r2, [r3, #0]
		break;
 800033c:	e048      	b.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
	case (2): //2143(младшим регистром вперед, старшим байтом вперед),
		crc = (((crc >> 8u) & 0x0F) << 12u) | ((crc >> 12u) << 8u) | ((crc << 12u) << 4u) | ((crc >> 4u) & 0x00F);
 800033e:	200e      	movs	r0, #14
 8000340:	183b      	adds	r3, r7, r0
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	031b      	lsls	r3, r3, #12
 800034a:	b21a      	sxth	r2, r3
 800034c:	183b      	adds	r3, r7, r0
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	0b1b      	lsrs	r3, r3, #12
 8000352:	b29b      	uxth	r3, r3
 8000354:	021b      	lsls	r3, r3, #8
 8000356:	b21b      	sxth	r3, r3
 8000358:	4313      	orrs	r3, r2
 800035a:	b21a      	sxth	r2, r3
 800035c:	183b      	adds	r3, r7, r0
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	041b      	lsls	r3, r3, #16
 8000362:	b21b      	sxth	r3, r3
 8000364:	4313      	orrs	r3, r2
 8000366:	b21a      	sxth	r2, r3
 8000368:	183b      	adds	r3, r7, r0
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	b29b      	uxth	r3, r3
 8000370:	b21b      	sxth	r3, r3
 8000372:	210f      	movs	r1, #15
 8000374:	400b      	ands	r3, r1
 8000376:	b21b      	sxth	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	b21a      	sxth	r2, r3
 800037c:	183b      	adds	r3, r7, r0
 800037e:	801a      	strh	r2, [r3, #0]
		break;
 8000380:	e026      	b.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
	case (3): //4321(старшим регистром вперед, старшим байтом вперед).
		crc = (((crc >> 8u) & 0x0F) << 4u) | (crc >> 12u) | ((crc << 12u) << 12u) | (((crc >> 4u) & 0x00F) << 8u);
 8000382:	200e      	movs	r0, #14
 8000384:	183b      	adds	r3, r7, r0
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	011b      	lsls	r3, r3, #4
 800038e:	b21b      	sxth	r3, r3
 8000390:	22ff      	movs	r2, #255	; 0xff
 8000392:	4013      	ands	r3, r2
 8000394:	b21a      	sxth	r2, r3
 8000396:	183b      	adds	r3, r7, r0
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	0b1b      	lsrs	r3, r3, #12
 800039c:	b29b      	uxth	r3, r3
 800039e:	b21b      	sxth	r3, r3
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b21a      	sxth	r2, r3
 80003a4:	183b      	adds	r3, r7, r0
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	061b      	lsls	r3, r3, #24
 80003aa:	b21b      	sxth	r3, r3
 80003ac:	4313      	orrs	r3, r2
 80003ae:	b21a      	sxth	r2, r3
 80003b0:	183b      	adds	r3, r7, r0
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	091b      	lsrs	r3, r3, #4
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	021b      	lsls	r3, r3, #8
 80003ba:	b219      	sxth	r1, r3
 80003bc:	23f0      	movs	r3, #240	; 0xf0
 80003be:	011b      	lsls	r3, r3, #4
 80003c0:	400b      	ands	r3, r1
 80003c2:	b21b      	sxth	r3, r3
 80003c4:	4313      	orrs	r3, r2
 80003c6:	b21a      	sxth	r2, r3
 80003c8:	183b      	adds	r3, r7, r0
 80003ca:	801a      	strh	r2, [r3, #0]
		break;
 80003cc:	e000      	b.n	80003d0 <ModbusRTU_CRC16_Calculate+0x14c>
		break;
 80003ce:	46c0      	nop			; (mov r8, r8)
	}
	return crc;
 80003d0:	230e      	movs	r3, #14
 80003d2:	18fb      	adds	r3, r7, r3
 80003d4:	881b      	ldrh	r3, [r3, #0]
}
 80003d6:	0018      	movs	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	b004      	add	sp, #16
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	ffffa001 	.word	0xffffa001

080003e4 <ModbusRTU_Read_Holding_Registers_0x03>:
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
}

void ModbusRTU_Read_Holding_Registers_0x03(uint8_t Slave_ID, uint16_t Read_adress, uint8_t Quantity, uint8_t Slave_byte_order){
 80003e4:	b5b0      	push	{r4, r5, r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	0005      	movs	r5, r0
 80003ec:	000c      	movs	r4, r1
 80003ee:	0010      	movs	r0, r2
 80003f0:	0019      	movs	r1, r3
 80003f2:	1dfb      	adds	r3, r7, #7
 80003f4:	1c2a      	adds	r2, r5, #0
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	1c22      	adds	r2, r4, #0
 80003fc:	801a      	strh	r2, [r3, #0]
 80003fe:	1dbb      	adds	r3, r7, #6
 8000400:	1c02      	adds	r2, r0, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	1cfb      	adds	r3, r7, #3
 8000406:	1c0a      	adds	r2, r1, #0
 8000408:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[0] = Slave_ID;
 800040a:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 800040c:	1dfa      	adds	r2, r7, #7
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[1] = 0x03;
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000414:	2203      	movs	r2, #3
 8000416:	705a      	strb	r2, [r3, #1]
	ModbusRTU_tx_buffer[2] = (uint16_t)Read_adress >> 8u;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	0a1b      	lsrs	r3, r3, #8
 800041e:	b29b      	uxth	r3, r3
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b15      	ldr	r3, [pc, #84]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000424:	709a      	strb	r2, [r3, #2]
	ModbusRTU_tx_buffer[3] = (uint16_t)Read_adress & 0x00ff;
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	881b      	ldrh	r3, [r3, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 800042e:	70da      	strb	r2, [r3, #3]
	ModbusRTU_tx_buffer[4] = 0x00;
 8000430:	4b11      	ldr	r3, [pc, #68]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000432:	2200      	movs	r2, #0
 8000434:	711a      	strb	r2, [r3, #4]
	ModbusRTU_tx_buffer[5] = Quantity;
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000438:	1dba      	adds	r2, r7, #6
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	715a      	strb	r2, [r3, #5]
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
 800043e:	250e      	movs	r5, #14
 8000440:	197c      	adds	r4, r7, r5
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	781a      	ldrb	r2, [r3, #0]
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000448:	2106      	movs	r1, #6
 800044a:	0018      	movs	r0, r3
 800044c:	f7ff ff1a 	bl	8000284 <ModbusRTU_CRC16_Calculate>
 8000450:	0003      	movs	r3, r0
 8000452:	8023      	strh	r3, [r4, #0]
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
 8000454:	0029      	movs	r1, r5
 8000456:	187b      	adds	r3, r7, r1
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	0a1b      	lsrs	r3, r3, #8
 800045c:	b29b      	uxth	r3, r3
 800045e:	b2da      	uxtb	r2, r3
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 8000462:	719a      	strb	r2, [r3, #6]
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
 8000464:	187b      	adds	r3, r7, r1
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	b2da      	uxtb	r2, r3
 800046a:	4b03      	ldr	r3, [pc, #12]	; (8000478 <ModbusRTU_Read_Holding_Registers_0x03+0x94>)
 800046c:	71da      	strb	r2, [r3, #7]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b004      	add	sp, #16
 8000474:	bdb0      	pop	{r4, r5, r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	20000090 	.word	0x20000090

0800047c <ModbusRTU_Write_Single_Register_0x06>:
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
}

void ModbusRTU_Write_Single_Register_0x06(uint8_t Slave_ID, uint16_t Write_adress, uint16_t Data, uint8_t Slave_byte_order){
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	0005      	movs	r5, r0
 8000484:	000c      	movs	r4, r1
 8000486:	0010      	movs	r0, r2
 8000488:	0019      	movs	r1, r3
 800048a:	1dfb      	adds	r3, r7, #7
 800048c:	1c2a      	adds	r2, r5, #0
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	1c22      	adds	r2, r4, #0
 8000494:	801a      	strh	r2, [r3, #0]
 8000496:	1cbb      	adds	r3, r7, #2
 8000498:	1c02      	adds	r2, r0, #0
 800049a:	801a      	strh	r2, [r3, #0]
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	1c0a      	adds	r2, r1, #0
 80004a0:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[0] = Slave_ID;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004a4:	1dfa      	adds	r2, r7, #7
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	701a      	strb	r2, [r3, #0]
	ModbusRTU_tx_buffer[1] = 0x06;
 80004aa:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004ac:	2206      	movs	r2, #6
 80004ae:	705a      	strb	r2, [r3, #1]
	ModbusRTU_tx_buffer[2] = (uint16_t)Write_adress >> 8u;
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	b29b      	uxth	r3, r3
 80004b8:	b2da      	uxtb	r2, r3
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004bc:	709a      	strb	r2, [r3, #2]
	ModbusRTU_tx_buffer[3] = (uint16_t)Write_adress & 0x00ff;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	b2da      	uxtb	r2, r3
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004c6:	70da      	strb	r2, [r3, #3]
	ModbusRTU_tx_buffer[4] = (uint16_t)Data >> 8u;
 80004c8:	1cbb      	adds	r3, r7, #2
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	0a1b      	lsrs	r3, r3, #8
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004d4:	711a      	strb	r2, [r3, #4]
	ModbusRTU_tx_buffer[5] = (uint16_t)Data & 0x00ff;
 80004d6:	1cbb      	adds	r3, r7, #2
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004de:	715a      	strb	r2, [r3, #5]
	uint16_t CRC16 = ModbusRTU_CRC16_Calculate(ModbusRTU_tx_buffer, 6, Slave_byte_order);
 80004e0:	250e      	movs	r5, #14
 80004e2:	197c      	adds	r4, r7, r5
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	781a      	ldrb	r2, [r3, #0]
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 80004ea:	2106      	movs	r1, #6
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff fec9 	bl	8000284 <ModbusRTU_CRC16_Calculate>
 80004f2:	0003      	movs	r3, r0
 80004f4:	8023      	strh	r3, [r4, #0]
	ModbusRTU_tx_buffer[6] = (uint16_t)CRC16 >> 8u;
 80004f6:	0029      	movs	r1, r5
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	b29b      	uxth	r3, r3
 8000500:	b2da      	uxtb	r2, r3
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 8000504:	719a      	strb	r2, [r3, #6]
	ModbusRTU_tx_buffer[7] = (uint16_t)CRC16 & 0x00ff;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	881b      	ldrh	r3, [r3, #0]
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b02      	ldr	r3, [pc, #8]	; (8000518 <ModbusRTU_Write_Single_Register_0x06+0x9c>)
 800050e:	71da      	strb	r2, [r3, #7]
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b004      	add	sp, #16
 8000516:	bdb0      	pop	{r4, r5, r7, pc}
 8000518:	20000090 	.word	0x20000090

0800051c <lcd1602_Send_init_Data>:
char tx_buffer_lcd[40] = {0, };
uint8_t global_buffer = 0;

/// Функция предназначена для отправки байта данных по шине i2c. Содержит в себе Delay. Без него инициализация дисплея не проходит.
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_init_Data(uint8_t *init_Data) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af02      	add	r7, sp, #8
 8000522:	6078      	str	r0, [r7, #4]
	if (backlight) {
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <lcd1602_Send_init_Data+0x80>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <lcd1602_Send_init_Data+0x20>
		*init_Data |= 0x08; //Включить подсветку
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2208      	movs	r2, #8
 8000532:	4313      	orrs	r3, r2
 8000534:	b2da      	uxtb	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	701a      	strb	r2, [r3, #0]
 800053a:	e006      	b.n	800054a <lcd1602_Send_init_Data+0x2e>
	} else {
		*init_Data &= ~0x08; //Выключить подсветку
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2208      	movs	r2, #8
 8000542:	4393      	bics	r3, r2
 8000544:	b2da      	uxtb	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	701a      	strb	r2, [r3, #0]
	}
	*init_Data |= 0x04; // Устанавливаем стробирующий сигнал E в 1
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2204      	movs	r2, #4
 8000550:	4313      	orrs	r3, r2
 8000552:	b2da      	uxtb	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	4811      	ldr	r0, [pc, #68]	; (80005a0 <lcd1602_Send_init_Data+0x84>)
 800055c:	230a      	movs	r3, #10
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2301      	movs	r3, #1
 8000562:	214e      	movs	r1, #78	; 0x4e
 8000564:	f001 fc18 	bl	8001d98 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000568:	2005      	movs	r0, #5
 800056a:	f000 fee1 	bl	8001330 <HAL_Delay>
	*init_Data &= ~0x04; // Устанавливаем стробирующий сигнал E в 0
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2204      	movs	r2, #4
 8000574:	4393      	bics	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, init_Data, 1, 10);
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4808      	ldr	r0, [pc, #32]	; (80005a0 <lcd1602_Send_init_Data+0x84>)
 8000580:	230a      	movs	r3, #10
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	214e      	movs	r1, #78	; 0x4e
 8000588:	f001 fc06 	bl	8001d98 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800058c:	2005      	movs	r0, #5
 800058e:	f000 fecf 	bl	8001330 <HAL_Delay>
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	20000000 	.word	0x20000000
 80005a0:	200001f8 	.word	0x200001f8

080005a4 <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	6078      	str	r0, [r7, #4]

	if (backlight) {
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <lcd1602_Send_data+0x74>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d007      	beq.n	80005c4 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2208      	movs	r2, #8
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	e006      	b.n	80005d2 <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2208      	movs	r2, #8
 80005ca:	4393      	bics	r3, r2
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2204      	movs	r2, #4
 80005d8:	4313      	orrs	r3, r2
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <lcd1602_Send_data+0x78>)
 80005e4:	230a      	movs	r3, #10
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2301      	movs	r3, #1
 80005ea:	214e      	movs	r1, #78	; 0x4e
 80005ec:	f001 fbd4 	bl	8001d98 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2204      	movs	r2, #4
 80005f6:	4393      	bics	r3, r2
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <lcd1602_Send_data+0x78>)
 8000602:	230a      	movs	r3, #10
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	214e      	movs	r1, #78	; 0x4e
 800060a:	f001 fbc5 	bl	8001d98 <HAL_I2C_Master_Transmit>
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000000 	.word	0x20000000
 800061c:	200001f8 	.word	0x200001f8

08000620 <lcd1602_Init>:

void lcd1602_Init(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	/*========Power on========*/
	uint8_t tx_buffer = 0x30;
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	2230      	movs	r2, #48	; 0x30
 800062a:	701a      	strb	r2, [r3, #0]
	/*========Wait for more than 15 ms after Vcc rises to 4.5V========*/
	HAL_Delay(15);
 800062c:	200f      	movs	r0, #15
 800062e:	f000 fe7f 	bl	8001330 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff71 	bl	800051c <lcd1602_Send_init_Data>
	/*========Wait for more 4.1 ms========*/
	HAL_Delay(5);
 800063a:	2005      	movs	r0, #5
 800063c:	f000 fe78 	bl	8001330 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff6a 	bl	800051c <lcd1602_Send_init_Data>
	/*========Wait for more 100 microsec========*/
	HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 fe71 	bl	8001330 <HAL_Delay>
	/*========BF can not be checked before this instruction.========*/
	/*========Function set ( Interface is 8 bits long.========*/
	lcd1602_Send_init_Data(&tx_buffer);
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff ff63 	bl	800051c <lcd1602_Send_init_Data>

	/*========Включаем 4х-битный интерфейс========*/
	tx_buffer = 0x20;
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	2220      	movs	r2, #32
 800065a:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff ff5c 	bl	800051c <lcd1602_Send_init_Data>
	/*========Включаем 4х-битный интерфейс========*/

	/*======2 строки, шрифт 5х8======*/
	tx_buffer = 0x20;
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	2220      	movs	r2, #32
 8000668:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ff55 	bl	800051c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	2280      	movs	r2, #128	; 0x80
 8000676:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff ff4e 	bl	800051c <lcd1602_Send_init_Data>
	/*======2 строки, шрифт 5х8======*/

	/*========Выключить дисплей========*/
	tx_buffer = 0x00;
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff ff47 	bl	800051c <lcd1602_Send_init_Data>
	tx_buffer = 0x80;
 800068e:	1dfb      	adds	r3, r7, #7
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 8000694:	1dfb      	adds	r3, r7, #7
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff ff40 	bl	800051c <lcd1602_Send_init_Data>
	/*========Выключить дисплей========*/

	/*========Очистить дисплей========*/
	tx_buffer = 0x00;
 800069c:	1dfb      	adds	r3, r7, #7
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	0018      	movs	r0, r3
 80006a6:	f7ff ff39 	bl	800051c <lcd1602_Send_init_Data>
	tx_buffer = 0x10;
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	2210      	movs	r2, #16
 80006ae:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff ff32 	bl	800051c <lcd1602_Send_init_Data>
	/*========Очистить дисплей========*/

	/*========Режим сдвига курсора========*/
	tx_buffer = 0x00;
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff2b 	bl	800051c <lcd1602_Send_init_Data>
	tx_buffer = 0x30;
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	2230      	movs	r2, #48	; 0x30
 80006ca:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ff24 	bl	800051c <lcd1602_Send_init_Data>
	/*========Режим сдвига курсора========*/

	/*========Инициализация завершена. Включить дисплей========*/
	tx_buffer = 0x00;
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff ff1d 	bl	800051c <lcd1602_Send_init_Data>
	tx_buffer = 0xC0;
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	22c0      	movs	r2, #192	; 0xc0
 80006e6:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_init_Data(&tx_buffer);
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff16 	bl	800051c <lcd1602_Send_init_Data>
	/*========Инициализация завершена. Включить дисплей========*/
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b002      	add	sp, #8
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <lcd1602_Print_symbol>:

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	0002      	movs	r2, r0
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	701a      	strb	r2, [r3, #0]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	b25b      	sxtb	r3, r3
 800070a:	220f      	movs	r2, #15
 800070c:	4393      	bics	r3, r2
 800070e:	b25b      	sxtb	r3, r3
 8000710:	2209      	movs	r2, #9
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	b2da      	uxtb	r2, r3
 8000718:	240f      	movs	r4, #15
 800071a:	193b      	adds	r3, r7, r4
 800071c:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800071e:	193b      	adds	r3, r7, r4
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff3f 	bl	80005a4 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	b25b      	sxtb	r3, r3
 800072e:	2209      	movs	r2, #9
 8000730:	4313      	orrs	r3, r2
 8000732:	b25b      	sxtb	r3, r3
 8000734:	b2da      	uxtb	r2, r3
 8000736:	193b      	adds	r3, r7, r4
 8000738:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff ff31 	bl	80005a4 <lcd1602_Send_data>
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b005      	add	sp, #20
 8000748:	bd90      	pop	{r4, r7, pc}

0800074a <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 800074a:	b580      	push	{r7, lr}
 800074c:	b084      	sub	sp, #16
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e009      	b.n	800076c <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffc9 	bl	80006f8 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff fcca 	bl	8000108 <strlen>
 8000774:	0002      	movs	r2, r0
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	429a      	cmp	r2, r3
 800077a:	d8ed      	bhi.n	8000758 <lcd1602_Print_text+0xe>
	}
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	b004      	add	sp, #16
 8000784:	bd80      	pop	{r7, pc}

08000786 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000786:	b5b0      	push	{r4, r5, r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	0002      	movs	r2, r0
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	1dbb      	adds	r3, r7, #6
 8000794:	1c0a      	adds	r2, r1, #0
 8000796:	701a      	strb	r2, [r3, #0]
	uint8_t command, adr;
	if (y > 3)
 8000798:	1dbb      	adds	r3, r7, #6
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d902      	bls.n	80007a6 <lcd1602_SetCursor+0x20>
		y = 3;
 80007a0:	1dbb      	adds	r3, r7, #6
 80007a2:	2203      	movs	r2, #3
 80007a4:	701a      	strb	r2, [r3, #0]
	if (x > 39)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b27      	cmp	r3, #39	; 0x27
 80007ac:	d902      	bls.n	80007b4 <lcd1602_SetCursor+0x2e>
		x = 39;
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	2227      	movs	r2, #39	; 0x27
 80007b2:	701a      	strb	r2, [r3, #0]
	if (y == 0) {
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <lcd1602_SetCursor+0x40>
		adr = x;
 80007bc:	230f      	movs	r3, #15
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	1dfa      	adds	r2, r7, #7
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	701a      	strb	r2, [r3, #0]
	}
	if (y == 1) {
 80007c6:	1dbb      	adds	r3, r7, #6
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d105      	bne.n	80007da <lcd1602_SetCursor+0x54>
		adr = x + 0x40;
 80007ce:	230f      	movs	r3, #15
 80007d0:	18fb      	adds	r3, r7, r3
 80007d2:	1dfa      	adds	r2, r7, #7
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	3240      	adds	r2, #64	; 0x40
 80007d8:	701a      	strb	r2, [r3, #0]
	}
	if (y == 2) {
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d105      	bne.n	80007ee <lcd1602_SetCursor+0x68>
		adr = x + 0x14;
 80007e2:	230f      	movs	r3, #15
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	3214      	adds	r2, #20
 80007ec:	701a      	strb	r2, [r3, #0]
	}
	if (y == 3) {
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d105      	bne.n	8000802 <lcd1602_SetCursor+0x7c>
		adr = x + 0x54;
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	1dfa      	adds	r2, r7, #7
 80007fc:	7812      	ldrb	r2, [r2, #0]
 80007fe:	3254      	adds	r2, #84	; 0x54
 8000800:	701a      	strb	r2, [r3, #0]
	}
	command = ((adr & 0xf0) | 0x80);
 8000802:	250f      	movs	r5, #15
 8000804:	197b      	adds	r3, r7, r5
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	b25b      	sxtb	r3, r3
 800080a:	2270      	movs	r2, #112	; 0x70
 800080c:	4013      	ands	r3, r2
 800080e:	b25b      	sxtb	r3, r3
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	4252      	negs	r2, r2
 8000814:	4313      	orrs	r3, r2
 8000816:	b25b      	sxtb	r3, r3
 8000818:	b2da      	uxtb	r2, r3
 800081a:	240e      	movs	r4, #14
 800081c:	193b      	adds	r3, r7, r4
 800081e:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff febe 	bl	80005a4 <lcd1602_Send_data>

	command = (adr << 4);
 8000828:	197b      	adds	r3, r7, r5
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	b2da      	uxtb	r2, r3
 8000830:	193b      	adds	r3, r7, r4
 8000832:	701a      	strb	r2, [r3, #0]
	lcd1602_Send_data(&command);
 8000834:	193b      	adds	r3, r7, r4
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff feb4 	bl	80005a4 <lcd1602_Send_data>

}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bdb0      	pop	{r4, r5, r7, pc}

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084a:	f000 fd0d 	bl	8001268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084e:	f000 f903 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 f9f3 	bl	8000c3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000856:	f000 f9d3 	bl	8000c00 <MX_DMA_Init>
  MX_I2C1_Init();
 800085a:	f000 f961 	bl	8000b20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800085e:	f000 f99f 	bl	8000ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  t_ModbusRTU_tx = HAL_GetTick();
 8000862:	f000 fd5b 	bl	800131c <HAL_GetTick>
 8000866:	0002      	movs	r2, r0
 8000868:	4b70      	ldr	r3, [pc, #448]	; (8000a2c <main+0x1e8>)
 800086a:	601a      	str	r2, [r3, #0]
  t_ModbusRTU_tx_2 = HAL_GetTick();
 800086c:	f000 fd56 	bl	800131c <HAL_GetTick>
 8000870:	0002      	movs	r2, r0
 8000872:	4b6f      	ldr	r3, [pc, #444]	; (8000a30 <main+0x1ec>)
 8000874:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 8000876:	496f      	ldr	r1, [pc, #444]	; (8000a34 <main+0x1f0>)
 8000878:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <main+0x1f4>)
 800087a:	2240      	movs	r2, #64	; 0x40
 800087c:	0018      	movs	r0, r3
 800087e:	f003 fc34 	bl	80040ea <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000882:	4b6e      	ldr	r3, [pc, #440]	; (8000a3c <main+0x1f8>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b6c      	ldr	r3, [pc, #432]	; (8000a3c <main+0x1f8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2104      	movs	r1, #4
 800088e:	438a      	bics	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
  Write_SP_value_RE72(i);
 8000892:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <main+0x1fc>)
 8000894:	2200      	movs	r2, #0
 8000896:	5e9b      	ldrsh	r3, [r3, r2]
 8000898:	b29b      	uxth	r3, r3
 800089a:	0018      	movs	r0, r3
 800089c:	f000 fb16 	bl	8000ecc <Write_SP_value_RE72>
  lcd1602_Init();
 80008a0:	f7ff febe 	bl	8000620 <lcd1602_Init>
  lcd1602_SetCursor(0, 0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff6d 	bl	8000786 <lcd1602_SetCursor>
  for(int i = 0; i < 20; i++){
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	e07e      	b.n	80009b0 <main+0x16c>
	  static uint8_t val = 0;
	  switch(val){
 80008b2:	4b64      	ldr	r3, [pc, #400]	; (8000a44 <main+0x200>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b03      	cmp	r3, #3
 80008b8:	d056      	beq.n	8000968 <main+0x124>
 80008ba:	dc6f      	bgt.n	800099c <main+0x158>
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d039      	beq.n	8000934 <main+0xf0>
 80008c0:	dc6c      	bgt.n	800099c <main+0x158>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <main+0x88>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d01a      	beq.n	8000900 <main+0xbc>
 80008ca:	e067      	b.n	800099c <main+0x158>
	  case 0:
		  	lcd1602_SetCursor(0, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff ff59 	bl	8000786 <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Initialization.   ");
 80008d4:	4a5c      	ldr	r2, [pc, #368]	; (8000a48 <main+0x204>)
 80008d6:	4b5d      	ldr	r3, [pc, #372]	; (8000a4c <main+0x208>)
 80008d8:	0011      	movs	r1, r2
 80008da:	0018      	movs	r0, r3
 80008dc:	f003 fcb0 	bl	8004240 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80008e0:	4b5a      	ldr	r3, [pc, #360]	; (8000a4c <main+0x208>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f7ff ff31 	bl	800074a <lcd1602_Print_text>
			HAL_Delay(300);
 80008e8:	2396      	movs	r3, #150	; 0x96
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fd1f 	bl	8001330 <HAL_Delay>
			val++;
 80008f2:	4b54      	ldr	r3, [pc, #336]	; (8000a44 <main+0x200>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b52      	ldr	r3, [pc, #328]	; (8000a44 <main+0x200>)
 80008fc:	701a      	strb	r2, [r3, #0]
			break;
 80008fe:	e04d      	b.n	800099c <main+0x158>
	  case 1:
		    lcd1602_SetCursor(0, 0);
 8000900:	2100      	movs	r1, #0
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff3f 	bl	8000786 <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Initialization..   ");
 8000908:	4a51      	ldr	r2, [pc, #324]	; (8000a50 <main+0x20c>)
 800090a:	4b50      	ldr	r3, [pc, #320]	; (8000a4c <main+0x208>)
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f003 fc96 	bl	8004240 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <main+0x208>)
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff ff17 	bl	800074a <lcd1602_Print_text>
			HAL_Delay(300);
 800091c:	2396      	movs	r3, #150	; 0x96
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fd05 	bl	8001330 <HAL_Delay>
			val++;
 8000926:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <main+0x200>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3301      	adds	r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b45      	ldr	r3, [pc, #276]	; (8000a44 <main+0x200>)
 8000930:	701a      	strb	r2, [r3, #0]
			break;
 8000932:	e033      	b.n	800099c <main+0x158>
	  case 2:
		    lcd1602_SetCursor(0, 0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff25 	bl	8000786 <lcd1602_SetCursor>
		  	sprintf(tx_buffer_lcd, "Initialization...   ");
 800093c:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <main+0x210>)
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <main+0x208>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 fc7c 	bl	8004240 <siprintf>
		    lcd1602_Print_text(tx_buffer_lcd);
 8000948:	4b40      	ldr	r3, [pc, #256]	; (8000a4c <main+0x208>)
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fefd 	bl	800074a <lcd1602_Print_text>
		    HAL_Delay(300);
 8000950:	2396      	movs	r3, #150	; 0x96
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fceb 	bl	8001330 <HAL_Delay>
		    val++;
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <main+0x200>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <main+0x200>)
 8000964:	701a      	strb	r2, [r3, #0]
		    break;
 8000966:	e019      	b.n	800099c <main+0x158>
	  case 3:
		    lcd1602_SetCursor(0, 0);
 8000968:	2100      	movs	r1, #0
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff ff0b 	bl	8000786 <lcd1602_SetCursor>
		  	sprintf(tx_buffer_lcd, "Initialization.   ");
 8000970:	4a35      	ldr	r2, [pc, #212]	; (8000a48 <main+0x204>)
 8000972:	4b36      	ldr	r3, [pc, #216]	; (8000a4c <main+0x208>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f003 fc62 	bl	8004240 <siprintf>
		    lcd1602_Print_text(tx_buffer_lcd);
 800097c:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <main+0x208>)
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fee3 	bl	800074a <lcd1602_Print_text>
		    HAL_Delay(300);
 8000984:	2396      	movs	r3, #150	; 0x96
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	0018      	movs	r0, r3
 800098a:	f000 fcd1 	bl	8001330 <HAL_Delay>
		    val++;
 800098e:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <main+0x200>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <main+0x200>)
 8000998:	701a      	strb	r2, [r3, #0]
		    break;
 800099a:	46c0      	nop			; (mov r8, r8)
	  }
	  if(val == 3){
 800099c:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <main+0x200>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d102      	bne.n	80009aa <main+0x166>
		  val = 0;
 80009a4:	4b27      	ldr	r3, [pc, #156]	; (8000a44 <main+0x200>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 20; i++){
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3301      	adds	r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b13      	cmp	r3, #19
 80009b4:	dc00      	bgt.n	80009b8 <main+0x174>
 80009b6:	e77c      	b.n	80008b2 <main+0x6e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_Data_ModbusRTU();
 80009b8:	f000 faba 	bl	8000f30 <Display_Data_ModbusRTU>
	  if((HAL_GetTick() - t_ModbusRTU_tx) >= 1000){
 80009bc:	f000 fcae 	bl	800131c <HAL_GetTick>
 80009c0:	0002      	movs	r2, r0
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <main+0x1e8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	1ad2      	subs	r2, r2, r3
 80009c8:	23fa      	movs	r3, #250	; 0xfa
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d308      	bcc.n	80009e2 <main+0x19e>
		  t_ModbusRTU_tx = HAL_GetTick();
 80009d0:	f000 fca4 	bl	800131c <HAL_GetTick>
 80009d4:	0002      	movs	r2, r0
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <main+0x1e8>)
 80009d8:	601a      	str	r2, [r3, #0]
		  Read_SP_value_RE72();
 80009da:	f000 fa33 	bl	8000e44 <Read_SP_value_RE72>
		  Read_PV_value_RE72();
 80009de:	f000 f9ed 	bl	8000dbc <Read_PV_value_RE72>

	  }
	  if((HAL_GetTick() - t_ModbusRTU_tx_2) >= 300){
 80009e2:	f000 fc9b 	bl	800131c <HAL_GetTick>
 80009e6:	0002      	movs	r2, r0
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <main+0x1ec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	1ad2      	subs	r2, r2, r3
 80009ee:	2396      	movs	r3, #150	; 0x96
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3e0      	bcc.n	80009b8 <main+0x174>
		  Write_SP_value_RE72(i);
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <main+0x1fc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	5e9b      	ldrsh	r3, [r3, r2]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fa64 	bl	8000ecc <Write_SP_value_RE72>
		  i++;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <main+0x1fc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	5e9b      	ldrsh	r3, [r3, r2]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <main+0x1fc>)
 8000a14:	801a      	strh	r2, [r3, #0]
		  if(i >= 500){
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <main+0x1fc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	5e9a      	ldrsh	r2, [r3, r2]
 8000a1c:	23fa      	movs	r3, #250	; 0xfa
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbc9      	blt.n	80009b8 <main+0x174>
			  i = 0;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <main+0x1fc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	801a      	strh	r2, [r3, #0]
	  Display_Data_ModbusRTU();
 8000a2a:	e7c5      	b.n	80009b8 <main+0x174>
 8000a2c:	2000030c 	.word	0x2000030c
 8000a30:	20000310 	.word	0x20000310
 8000a34:	20000314 	.word	0x20000314
 8000a38:	20000244 	.word	0x20000244
 8000a3c:	200002c8 	.word	0x200002c8
 8000a40:	20000364 	.word	0x20000364
 8000a44:	20000366 	.word	0x20000366
 8000a48:	08004b18 	.word	0x08004b18
 8000a4c:	200001d0 	.word	0x200001d0
 8000a50:	08004b2c 	.word	0x08004b2c
 8000a54:	08004b40 	.word	0x08004b40

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b095      	sub	sp, #84	; 0x54
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	2420      	movs	r4, #32
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	0018      	movs	r0, r3
 8000a64:	2330      	movs	r3, #48	; 0x30
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	f003 fbe0 	bl	800422e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6e:	2310      	movs	r3, #16
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	0018      	movs	r0, r3
 8000a74:	2310      	movs	r3, #16
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f003 fbd8 	bl	800422e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7e:	003b      	movs	r3, r7
 8000a80:	0018      	movs	r0, r3
 8000a82:	2310      	movs	r3, #16
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f003 fbd1 	bl	800422e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	0021      	movs	r1, r4
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2202      	movs	r2, #2
 8000a92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2201      	movs	r2, #1
 8000a98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	22a0      	movs	r2, #160	; 0xa0
 8000ab0:	0392      	lsls	r2, r2, #14
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	0018      	movs	r0, r3
 8000abe:	f001 fc97 	bl	80023f0 <HAL_RCC_OscConfig>
 8000ac2:	1e03      	subs	r3, r0, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ac6:	f000 fa43 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	2110      	movs	r1, #16
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2207      	movs	r2, #7
 8000ad0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 ff9b 	bl	8002a24 <HAL_RCC_ClockConfig>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000af2:	f000 fa2d 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000af6:	003b      	movs	r3, r7
 8000af8:	2221      	movs	r2, #33	; 0x21
 8000afa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000b02:	003b      	movs	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	003b      	movs	r3, r7
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 f8dc 	bl	8002cc8 <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b14:	f000 fa1c 	bl	8000f50 <Error_Handler>
  }
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b015      	add	sp, #84	; 0x54
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_I2C1_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b2c:	4a1b      	ldr	r2, [pc, #108]	; (8000b9c <MX_I2C1_Init+0x7c>)
 8000b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 f885 	bl	8001c6c <HAL_I2C_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b66:	f000 f9f3 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 fba6 	bl	80022c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b74:	1e03      	subs	r3, r0, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b78:	f000 f9ea 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <MX_I2C1_Init+0x74>)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fbe9 	bl	8002358 <HAL_I2CEx_ConfigDigitalFilter>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f9e1 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001f8 	.word	0x200001f8
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	0000020b 	.word	0x0000020b

08000ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART1_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bac:	2296      	movs	r2, #150	; 0x96
 8000bae:	0192      	lsls	r2, r2, #6
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 f93d 	bl	8002e64 <HAL_UART_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f9af 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000244 	.word	0x20000244
 8000bfc:	40013800 	.word	0x40013800

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c08:	695a      	ldr	r2, [r3, #20]
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	615a      	str	r2, [r3, #20]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	2201      	movs	r2, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	200a      	movs	r0, #10
 8000c24:	f000 fc54 	bl	80014d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000c28:	200a      	movs	r0, #10
 8000c2a:	f000 fc66 	bl	80014fa <HAL_NVIC_EnableIRQ>

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40021000 	.word	0x40021000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	240c      	movs	r4, #12
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	0018      	movs	r0, r3
 8000c48:	2314      	movs	r3, #20
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	f003 faee 	bl	800422e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0289      	lsls	r1, r1, #10
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c62:	695a      	ldr	r2, [r3, #20]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	029b      	lsls	r3, r3, #10
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c70:	695a      	ldr	r2, [r3, #20]
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	02c9      	lsls	r1, r1, #11
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_GPIO_Init+0x88>)
 8000c7e:	695a      	ldr	r2, [r3, #20]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	02db      	lsls	r3, r3, #11
 8000c84:	4013      	ands	r3, r2
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(User_Led_GPIO_Port, User_Led_Pin, GPIO_PIN_RESET);
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_GPIO_Init+0x8c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2108      	movs	r1, #8
 8000c90:	0018      	movs	r0, r3
 8000c92:	f000 ffcd 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Led_Pin */
  GPIO_InitStruct.Pin = User_Led_Pin;
 8000c96:	0021      	movs	r1, r4
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(User_Led_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <MX_GPIO_Init+0x8c>)
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0010      	movs	r0, r2
 8000cb8:	f000 fe52 	bl	8001960 <HAL_GPIO_Init>

}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b009      	add	sp, #36	; 0x24
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400

08000ccc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	000a      	movs	r2, r1
 8000cd6:	1cbb      	adds	r3, r7, #2
 8000cd8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1){
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a0b      	ldr	r2, [pc, #44]	; (8000d0c <HAL_UARTEx_RxEventCallback+0x40>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d10f      	bne.n	8000d04 <HAL_UARTEx_RxEventCallback+0x38>
		memcpy(ModbusRTU_rx_buffer, uart_dma_rx_buffer, Size);
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	4909      	ldr	r1, [pc, #36]	; (8000d10 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_UARTEx_RxEventCallback+0x48>)
 8000cec:	0018      	movs	r0, r3
 8000cee:	f003 fa95 	bl	800421c <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_dma_rx_buffer, UART_DMA_RX_BUFFER_SIZE);
 8000cf2:	4907      	ldr	r1, [pc, #28]	; (8000d10 <HAL_UARTEx_RxEventCallback+0x44>)
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f003 f9f6 	bl	80040ea <HAL_UARTEx_ReceiveToIdle_DMA>
		display_flag = 1;
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_UARTEx_RxEventCallback+0x50>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
	}
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b002      	add	sp, #8
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	20000314 	.word	0x20000314
 8000d14:	200000d0 	.word	0x200000d0
 8000d18:	20000244 	.word	0x20000244
 8000d1c:	20000354 	.word	0x20000354

08000d20 <Read_Two_Registers_RE72>:
		ModbusRTU_Read_Holding_Registers_0x03(RE72_ADRESS, Register, 1, RE72_BYTE_ORDER);
		HAL_UART_Transmit(&huart1, ModbusRTU_tx_buffer, 8, 1000);
	}
}

void Read_Two_Registers_RE72(uint16_t Register, uint8_t Function_code){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	801a      	strh	r2, [r3, #0]
 8000d2c:	1d7b      	adds	r3, r7, #5
 8000d2e:	1c0a      	adds	r2, r1, #0
 8000d30:	701a      	strb	r2, [r3, #0]
	if(Function_code == 0x03){
 8000d32:	1d7b      	adds	r3, r7, #5
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d10d      	bne.n	8000d56 <Read_Two_Registers_RE72+0x36>
		ModbusRTU_Read_Holding_Registers_0x03(RE72_ADRESS, Register, 2, RE72_BYTE_ORDER);
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	8819      	ldrh	r1, [r3, #0]
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2202      	movs	r2, #2
 8000d42:	2058      	movs	r0, #88	; 0x58
 8000d44:	f7ff fb4e 	bl	80003e4 <ModbusRTU_Read_Holding_Registers_0x03>
		HAL_UART_Transmit(&huart1, ModbusRTU_tx_buffer, 8, 1000);
 8000d48:	23fa      	movs	r3, #250	; 0xfa
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4904      	ldr	r1, [pc, #16]	; (8000d60 <Read_Two_Registers_RE72+0x40>)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <Read_Two_Registers_RE72+0x44>)
 8000d50:	2208      	movs	r2, #8
 8000d52:	f002 f8db 	bl	8002f0c <HAL_UART_Transmit>
	}
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	20000090 	.word	0x20000090
 8000d64:	20000244 	.word	0x20000244

08000d68 <Write_Register_RE72>:

void Write_Register_RE72(uint16_t Register, uint8_t Function_code, uint16_t Data_To_Write){
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	0004      	movs	r4, r0
 8000d70:	0008      	movs	r0, r1
 8000d72:	0011      	movs	r1, r2
 8000d74:	1dbb      	adds	r3, r7, #6
 8000d76:	1c22      	adds	r2, r4, #0
 8000d78:	801a      	strh	r2, [r3, #0]
 8000d7a:	1d7b      	adds	r3, r7, #5
 8000d7c:	1c02      	adds	r2, r0, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	1c0a      	adds	r2, r1, #0
 8000d84:	801a      	strh	r2, [r3, #0]
	if(Function_code == 0x06){
 8000d86:	1d7b      	adds	r3, r7, #5
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d10e      	bne.n	8000dac <Write_Register_RE72+0x44>
		ModbusRTU_Write_Single_Register_0x06(RE72_ADRESS, Register, Data_To_Write, RE72_BYTE_ORDER);
 8000d8e:	1cbb      	adds	r3, r7, #2
 8000d90:	881a      	ldrh	r2, [r3, #0]
 8000d92:	1dbb      	adds	r3, r7, #6
 8000d94:	8819      	ldrh	r1, [r3, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2058      	movs	r0, #88	; 0x58
 8000d9a:	f7ff fb6f 	bl	800047c <ModbusRTU_Write_Single_Register_0x06>
		HAL_UART_Transmit(&huart1, ModbusRTU_tx_buffer, 8, 1000);
 8000d9e:	23fa      	movs	r3, #250	; 0xfa
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4904      	ldr	r1, [pc, #16]	; (8000db4 <Write_Register_RE72+0x4c>)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <Write_Register_RE72+0x50>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	f002 f8b0 	bl	8002f0c <HAL_UART_Transmit>
	}
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b003      	add	sp, #12
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	20000090 	.word	0x20000090
 8000db8:	20000244 	.word	0x20000244

08000dbc <Read_PV_value_RE72>:

void Read_PV_value_RE72(){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	 Read_Two_Registers_RE72(RE72_PV, RE72_FUNCTION_READ_REGISTER);
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <Read_PV_value_RE72+0x70>)
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f7ff ffab 	bl	8000d20 <Read_Two_Registers_RE72>
	 conversation_int_to_float.val_int = ((uint32_t)ModbusRTU_rx_buffer[3] << 24) | ((uint32_t)ModbusRTU_rx_buffer[4] << 16) | ((uint32_t)ModbusRTU_rx_buffer[5] << 8) | ((uint32_t)ModbusRTU_rx_buffer[6]);
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <Read_PV_value_RE72+0x74>)
 8000dcc:	78db      	ldrb	r3, [r3, #3]
 8000dce:	061a      	lsls	r2, r3, #24
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <Read_PV_value_RE72+0x74>)
 8000dd2:	791b      	ldrb	r3, [r3, #4]
 8000dd4:	041b      	lsls	r3, r3, #16
 8000dd6:	431a      	orrs	r2, r3
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <Read_PV_value_RE72+0x74>)
 8000dda:	795b      	ldrb	r3, [r3, #5]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	4313      	orrs	r3, r2
 8000de0:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <Read_PV_value_RE72+0x74>)
 8000de2:	7992      	ldrb	r2, [r2, #6]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	001a      	movs	r2, r3
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <Read_PV_value_RE72+0x78>)
 8000dea:	601a      	str	r2, [r3, #0]
	 RE72_PV_int = conversation_int_to_float.result_float;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <Read_PV_value_RE72+0x78>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	1c18      	adds	r0, r3, #0
 8000df2:	f7ff fa27 	bl	8000244 <__aeabi_f2iz>
 8000df6:	0002      	movs	r2, r0
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <Read_PV_value_RE72+0x7c>)
 8000dfa:	601a      	str	r2, [r3, #0]
	 lcd1602_SetCursor(0, 1);
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fcc1 	bl	8000786 <lcd1602_SetCursor>
	 sprintf(tx_buffer_lcd, "PV value is %u           ", RE72_PV_int);
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <Read_PV_value_RE72+0x7c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <Read_PV_value_RE72+0x80>)
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <Read_PV_value_RE72+0x84>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f003 fa17 	bl	8004240 <siprintf>
	 lcd1602_Print_text(tx_buffer_lcd);
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <Read_PV_value_RE72+0x84>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fc98 	bl	800074a <lcd1602_Print_text>
	 HAL_Delay(300);
 8000e1a:	2396      	movs	r3, #150	; 0x96
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fa86 	bl	8001330 <HAL_Delay>
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	00001d4c 	.word	0x00001d4c
 8000e30:	200000d0 	.word	0x200000d0
 8000e34:	20000358 	.word	0x20000358
 8000e38:	20000360 	.word	0x20000360
 8000e3c:	08004b58 	.word	0x08004b58
 8000e40:	200001d0 	.word	0x200001d0

08000e44 <Read_SP_value_RE72>:

void Read_SP_value_RE72(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	Read_Two_Registers_RE72(RE72_SP, RE72_FUNCTION_READ_REGISTER);
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <Read_SP_value_RE72+0x70>)
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff67 	bl	8000d20 <Read_Two_Registers_RE72>
	conversation_int_to_float.val_int = ((uint32_t)ModbusRTU_rx_buffer[3] << 24) | ((uint32_t)ModbusRTU_rx_buffer[4] << 16) | ((uint32_t)ModbusRTU_rx_buffer[5] << 8) | ((uint32_t)ModbusRTU_rx_buffer[6]);
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <Read_SP_value_RE72+0x74>)
 8000e54:	78db      	ldrb	r3, [r3, #3]
 8000e56:	061a      	lsls	r2, r3, #24
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <Read_SP_value_RE72+0x74>)
 8000e5a:	791b      	ldrb	r3, [r3, #4]
 8000e5c:	041b      	lsls	r3, r3, #16
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <Read_SP_value_RE72+0x74>)
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	4313      	orrs	r3, r2
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <Read_SP_value_RE72+0x74>)
 8000e6a:	7992      	ldrb	r2, [r2, #6]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	001a      	movs	r2, r3
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <Read_SP_value_RE72+0x78>)
 8000e72:	601a      	str	r2, [r3, #0]
	RE72_SP_int = conversation_int_to_float.result_float;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <Read_SP_value_RE72+0x78>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1c18      	adds	r0, r3, #0
 8000e7a:	f7ff f9e3 	bl	8000244 <__aeabi_f2iz>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <Read_SP_value_RE72+0x7c>)
 8000e82:	601a      	str	r2, [r3, #0]
	lcd1602_SetCursor(0, 0);
 8000e84:	2100      	movs	r1, #0
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fc7d 	bl	8000786 <lcd1602_SetCursor>
	sprintf(tx_buffer_lcd, "SP value is %u           ", RE72_SP_int);
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <Read_SP_value_RE72+0x7c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <Read_SP_value_RE72+0x80>)
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <Read_SP_value_RE72+0x84>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f003 f9d3 	bl	8004240 <siprintf>
	lcd1602_Print_text(tx_buffer_lcd);
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <Read_SP_value_RE72+0x84>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f7ff fc54 	bl	800074a <lcd1602_Print_text>
	HAL_Delay(300);
 8000ea2:	2396      	movs	r3, #150	; 0x96
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fa42 	bl	8001330 <HAL_Delay>
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	00001d4e 	.word	0x00001d4e
 8000eb8:	200000d0 	.word	0x200000d0
 8000ebc:	20000358 	.word	0x20000358
 8000ec0:	2000035c 	.word	0x2000035c
 8000ec4:	08004b74 	.word	0x08004b74
 8000ec8:	200001d0 	.word	0x200001d0

08000ecc <Write_SP_value_RE72>:
void Write_SP_value_RE72(uint16_t value){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	801a      	strh	r2, [r3, #0]
	Write_Register_RE72(RE72_SP_change, RE72_FUNCTION_READ_REGISTER, (value * 10));
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	1c1a      	adds	r2, r3, #0
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	18d3      	adds	r3, r2, r3
 8000ee2:	18db      	adds	r3, r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	480f      	ldr	r0, [pc, #60]	; (8000f24 <Write_SP_value_RE72+0x58>)
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2103      	movs	r1, #3
 8000eec:	f7ff ff3c 	bl	8000d68 <Write_Register_RE72>
	HAL_Delay(300);
 8000ef0:	2396      	movs	r3, #150	; 0x96
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f000 fa1b 	bl	8001330 <HAL_Delay>
	memset(uart_dma_rx_buffer, 0, UART_DMA_RX_BUFFER_SIZE);
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <Write_SP_value_RE72+0x5c>)
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	2100      	movs	r1, #0
 8000f00:	0018      	movs	r0, r3
 8000f02:	f003 f994 	bl	800422e <memset>
	memset(ModbusRTU_rx_buffer, 0, ModbusRTU_RX_BUFFER_SIZE);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <Write_SP_value_RE72+0x60>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f003 f98e 	bl	800422e <memset>
	HAL_Delay(300);
 8000f12:	2396      	movs	r3, #150	; 0x96
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 fa0a 	bl	8001330 <HAL_Delay>
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	00000ff4 	.word	0x00000ff4
 8000f28:	20000314 	.word	0x20000314
 8000f2c:	200000d0 	.word	0x200000d0

08000f30 <Display_Data_ModbusRTU>:

void Display_Data_ModbusRTU(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	if(display_flag){
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <Display_Data_ModbusRTU+0x1c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <Display_Data_ModbusRTU+0x14>
		//sprintf(tx_buffer_lcd, "ModbusRTU rx:    ");
		//lcd1602_Print_text(tx_buffer_lcd);
		//lcd1602_SetCursor(0, 1);
		//sprintf(tx_buffer_lcd, "0x%04x%04x   ", ModbusRTU_rx_buffer[3], ModbusRTU_rx_buffer[4]);
		//lcd1602_Print_text(tx_buffer_lcd);
		display_flag = 0;
 8000f3e:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <Display_Data_ModbusRTU+0x1c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
	}
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000354 	.word	0x20000354

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	619a      	str	r2, [r3, #24]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	69da      	ldr	r2, [r3, #28]
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0549      	lsls	r1, r1, #21
 8000f84:	430a      	orrs	r2, r1
 8000f86:	61da      	str	r2, [r3, #28]
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	055b      	lsls	r3, r3, #21
 8000f90:	4013      	ands	r3, r2
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08b      	sub	sp, #44	; 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2414      	movs	r4, #20
 8000fae:	193b      	adds	r3, r7, r4
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	2314      	movs	r3, #20
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	f003 f939 	bl	800422e <memset>
  if(hi2c->Instance==I2C1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_I2C_MspInit+0x94>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d133      	bne.n	800102e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <HAL_I2C_MspInit+0x98>)
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_I2C_MspInit+0x98>)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0289      	lsls	r1, r1, #10
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	615a      	str	r2, [r3, #20]
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_I2C_MspInit+0x98>)
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	029b      	lsls	r3, r3, #10
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fe2:	193b      	adds	r3, r7, r4
 8000fe4:	22c0      	movs	r2, #192	; 0xc0
 8000fe6:	00d2      	lsls	r2, r2, #3
 8000fe8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fea:	0021      	movs	r1, r4
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	2212      	movs	r2, #18
 8000ff0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff8:	187b      	adds	r3, r7, r1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffe:	187b      	adds	r3, r7, r1
 8001000:	2204      	movs	r2, #4
 8001002:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	187a      	adds	r2, r7, r1
 8001006:	2390      	movs	r3, #144	; 0x90
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f000 fca7 	bl	8001960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_I2C_MspInit+0x98>)
 8001014:	69da      	ldr	r2, [r3, #28]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_I2C_MspInit+0x98>)
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0389      	lsls	r1, r1, #14
 800101c:	430a      	orrs	r2, r1
 800101e:	61da      	str	r2, [r3, #28]
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_I2C_MspInit+0x98>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	039b      	lsls	r3, r3, #14
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b00b      	add	sp, #44	; 0x2c
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	40005400 	.word	0x40005400
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b08b      	sub	sp, #44	; 0x2c
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	2414      	movs	r4, #20
 800104a:	193b      	adds	r3, r7, r4
 800104c:	0018      	movs	r0, r3
 800104e:	2314      	movs	r3, #20
 8001050:	001a      	movs	r2, r3
 8001052:	2100      	movs	r1, #0
 8001054:	f003 f8eb 	bl	800422e <memset>
  if(huart->Instance==USART1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <HAL_UART_MspInit+0xec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d160      	bne.n	8001124 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001062:	4b33      	ldr	r3, [pc, #204]	; (8001130 <HAL_UART_MspInit+0xf0>)
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	4b32      	ldr	r3, [pc, #200]	; (8001130 <HAL_UART_MspInit+0xf0>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	01c9      	lsls	r1, r1, #7
 800106c:	430a      	orrs	r2, r1
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_UART_MspInit+0xf0>)
 8001072:	699a      	ldr	r2, [r3, #24]
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	01db      	lsls	r3, r3, #7
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_UART_MspInit+0xf0>)
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <HAL_UART_MspInit+0xf0>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0289      	lsls	r1, r1, #10
 8001088:	430a      	orrs	r2, r1
 800108a:	615a      	str	r2, [r3, #20]
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <HAL_UART_MspInit+0xf0>)
 800108e:	695a      	ldr	r2, [r3, #20]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109a:	0021      	movs	r1, r4
 800109c:	187b      	adds	r3, r7, r1
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2202      	movs	r2, #2
 80010a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	2203      	movs	r2, #3
 80010b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2201      	movs	r2, #1
 80010b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	187a      	adds	r2, r7, r1
 80010bc:	2390      	movs	r3, #144	; 0x90
 80010be:	05db      	lsls	r3, r3, #23
 80010c0:	0011      	movs	r1, r2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 fc4c 	bl	8001960 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_UART_MspInit+0xf8>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_UART_MspInit+0xf4>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fa1a 	bl	8001534 <HAL_DMA_Init>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001104:	f7ff ff24 	bl	8000f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_UART_MspInit+0xf4>)
 800110c:	671a      	str	r2, [r3, #112]	; 0x70
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_UART_MspInit+0xf4>)
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	201b      	movs	r0, #27
 800111a:	f000 f9d9 	bl	80014d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800111e:	201b      	movs	r0, #27
 8001120:	f000 f9eb 	bl	80014fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b00b      	add	sp, #44	; 0x2c
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	40013800 	.word	0x40013800
 8001130:	40021000 	.word	0x40021000
 8001134:	200002c8 	.word	0x200002c8
 8001138:	40020030 	.word	0x40020030

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001160:	f000 f8ca 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001172:	0018      	movs	r0, r3
 8001174:	f000 fb09 	bl	800178a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	200002c8 	.word	0x200002c8

08001184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <USART1_IRQHandler+0x14>)
 800118a:	0018      	movs	r0, r3
 800118c:	f001 ff68 	bl	8003060 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000244 	.word	0x20000244

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	18d3      	adds	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f002 fffc 	bl	80041c8 <__errno>
 80011d0:	0003      	movs	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	425b      	negs	r3, r3
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	18d2      	adds	r2, r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	0018      	movs	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b006      	add	sp, #24
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20001000 	.word	0x20001000
 80011fc:	00000400 	.word	0x00000400
 8001200:	20000368 	.word	0x20000368
 8001204:	20000380 	.word	0x20000380

08001208 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001216:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <LoopForever+0x6>)
  ldr r1, =_edata
 800121a:	490e      	ldr	r1, [pc, #56]	; (8001254 <LoopForever+0xa>)
  ldr r2, =_sidata
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <LoopForever+0xe>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a0b      	ldr	r2, [pc, #44]	; (800125c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001230:	4c0b      	ldr	r4, [pc, #44]	; (8001260 <LoopForever+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800123e:	f7ff ffe3 	bl	8001208 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001242:	f002 ffc7 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001246:	f7ff fafd 	bl	8000844 <main>

0800124a <LoopForever>:

LoopForever:
    b LoopForever
 800124a:	e7fe      	b.n	800124a <LoopForever>
  ldr   r0, =_estack
 800124c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001258:	08004c04 	.word	0x08004c04
  ldr r2, =_sbss
 800125c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001260:	20000380 	.word	0x20000380

08001264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_IRQHandler>
	...

08001268 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <HAL_Init+0x24>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_Init+0x24>)
 8001272:	2110      	movs	r1, #16
 8001274:	430a      	orrs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f809 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127e:	f7ff fe6d 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	40022000 	.word	0x40022000

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_InitTick+0x5c>)
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_InitTick+0x60>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	0019      	movs	r1, r3
 80012a2:	23fa      	movs	r3, #250	; 0xfa
 80012a4:	0098      	lsls	r0, r3, #2
 80012a6:	f7fe ff41 	bl	800012c <__udivsi3>
 80012aa:	0003      	movs	r3, r0
 80012ac:	0019      	movs	r1, r3
 80012ae:	0020      	movs	r0, r4
 80012b0:	f7fe ff3c 	bl	800012c <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 f92f 	bl	800151a <HAL_SYSTICK_Config>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e00f      	b.n	80012e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d80b      	bhi.n	80012e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 f8fc 	bl	80014d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_InitTick+0x64>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b003      	add	sp, #12
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	20000004 	.word	0x20000004
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	001a      	movs	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	18d2      	adds	r2, r2, r3
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	601a      	str	r2, [r3, #0]
}
 800130c:	46c0      	nop			; (mov r8, r8)
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	2000000c 	.word	0x2000000c
 8001318:	2000036c 	.word	0x2000036c

0800131c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	2000036c 	.word	0x2000036c

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fff0 	bl	800131c <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	3301      	adds	r3, #1
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	001a      	movs	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	189b      	adds	r3, r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	f7ff ffe0 	bl	800131c <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000000c 	.word	0x2000000c

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	0002      	movs	r2, r0
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001384:	1dfb      	adds	r3, r7, #7
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b7f      	cmp	r3, #127	; 0x7f
 800138a:	d809      	bhi.n	80013a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138c:	1dfb      	adds	r3, r7, #7
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	001a      	movs	r2, r3
 8001392:	231f      	movs	r3, #31
 8001394:	401a      	ands	r2, r3
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <__NVIC_EnableIRQ+0x30>)
 8001398:	2101      	movs	r1, #1
 800139a:	4091      	lsls	r1, r2
 800139c:	000a      	movs	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
  }
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	0002      	movs	r2, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b7f      	cmp	r3, #127	; 0x7f
 80013c0:	d828      	bhi.n	8001414 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <__NVIC_SetPriority+0xd4>)
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	33c0      	adds	r3, #192	; 0xc0
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	589b      	ldr	r3, [r3, r2]
 80013d2:	1dfa      	adds	r2, r7, #7
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	0011      	movs	r1, r2
 80013d8:	2203      	movs	r2, #3
 80013da:	400a      	ands	r2, r1
 80013dc:	00d2      	lsls	r2, r2, #3
 80013de:	21ff      	movs	r1, #255	; 0xff
 80013e0:	4091      	lsls	r1, r2
 80013e2:	000a      	movs	r2, r1
 80013e4:	43d2      	mvns	r2, r2
 80013e6:	401a      	ands	r2, r3
 80013e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	401a      	ands	r2, r3
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	0018      	movs	r0, r3
 80013f8:	2303      	movs	r3, #3
 80013fa:	4003      	ands	r3, r0
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <__NVIC_SetPriority+0xd4>)
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	430a      	orrs	r2, r1
 800140c:	33c0      	adds	r3, #192	; 0xc0
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001412:	e031      	b.n	8001478 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <__NVIC_SetPriority+0xd8>)
 8001416:	1dfb      	adds	r3, r7, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	0019      	movs	r1, r3
 800141c:	230f      	movs	r3, #15
 800141e:	400b      	ands	r3, r1
 8001420:	3b08      	subs	r3, #8
 8001422:	089b      	lsrs	r3, r3, #2
 8001424:	3306      	adds	r3, #6
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	3304      	adds	r3, #4
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1dfa      	adds	r2, r7, #7
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	0011      	movs	r1, r2
 8001434:	2203      	movs	r2, #3
 8001436:	400a      	ands	r2, r1
 8001438:	00d2      	lsls	r2, r2, #3
 800143a:	21ff      	movs	r1, #255	; 0xff
 800143c:	4091      	lsls	r1, r2
 800143e:	000a      	movs	r2, r1
 8001440:	43d2      	mvns	r2, r2
 8001442:	401a      	ands	r2, r3
 8001444:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	019b      	lsls	r3, r3, #6
 800144a:	22ff      	movs	r2, #255	; 0xff
 800144c:	401a      	ands	r2, r3
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	0018      	movs	r0, r3
 8001454:	2303      	movs	r3, #3
 8001456:	4003      	ands	r3, r0
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <__NVIC_SetPriority+0xd8>)
 800145e:	1dfb      	adds	r3, r7, #7
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	001c      	movs	r4, r3
 8001464:	230f      	movs	r3, #15
 8001466:	4023      	ands	r3, r4
 8001468:	3b08      	subs	r3, #8
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	430a      	orrs	r2, r1
 800146e:	3306      	adds	r3, #6
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	18c3      	adds	r3, r0, r3
 8001474:	3304      	adds	r3, #4
 8001476:	601a      	str	r2, [r3, #0]
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b003      	add	sp, #12
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	e000e100 	.word	0xe000e100
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1e5a      	subs	r2, r3, #1
 8001494:	2380      	movs	r3, #128	; 0x80
 8001496:	045b      	lsls	r3, r3, #17
 8001498:	429a      	cmp	r2, r3
 800149a:	d301      	bcc.n	80014a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149c:	2301      	movs	r3, #1
 800149e:	e010      	b.n	80014c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <SysTick_Config+0x44>)
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	3a01      	subs	r2, #1
 80014a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a8:	2301      	movs	r3, #1
 80014aa:	425b      	negs	r3, r3
 80014ac:	2103      	movs	r1, #3
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7ff ff7c 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x44>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x44>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	210f      	movs	r1, #15
 80014dc:	187b      	adds	r3, r7, r1
 80014de:	1c02      	adds	r2, r0, #0
 80014e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	187b      	adds	r3, r7, r1
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f7ff ff5d 	bl	80013ac <__NVIC_SetPriority>
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	0002      	movs	r2, r0
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	b25b      	sxtb	r3, r3
 800150c:	0018      	movs	r0, r3
 800150e:	f7ff ff33 	bl	8001378 <__NVIC_EnableIRQ>
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b002      	add	sp, #8
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	0018      	movs	r0, r3
 8001526:	f7ff ffaf 	bl	8001488 <SysTick_Config>
 800152a:	0003      	movs	r3, r0
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e036      	b.n	80015b8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2221      	movs	r2, #33	; 0x21
 800154e:	2102      	movs	r1, #2
 8001550:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_DMA_Init+0x8c>)
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800156a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	0018      	movs	r0, r3
 800159c:	f000 f9c4 	bl	8001928 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2221      	movs	r2, #33	; 0x21
 80015aa:	2101      	movs	r1, #1
 80015ac:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}  
 80015b8:	0018      	movs	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b004      	add	sp, #16
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	ffffc00f 	.word	0xffffc00f

080015c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
 80015d0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2317      	movs	r3, #23
 80015d4:	18fb      	adds	r3, r7, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	5c9b      	ldrb	r3, [r3, r2]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Start_IT+0x24>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e04f      	b.n	8001688 <HAL_DMA_Start_IT+0xc4>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2220      	movs	r2, #32
 80015ec:	2101      	movs	r1, #1
 80015ee:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2221      	movs	r2, #33	; 0x21
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d13a      	bne.n	8001672 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2221      	movs	r2, #33	; 0x21
 8001600:	2102      	movs	r1, #2
 8001602:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f954 	bl	80018ce <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	210e      	movs	r1, #14
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00f      	b.n	8001660 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	210a      	movs	r1, #10
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2104      	movs	r1, #4
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e007      	b.n	8001682 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2220      	movs	r2, #32
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800167a:	2317      	movs	r3, #23
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	2202      	movs	r2, #2
 8001680:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8001682:	2317      	movs	r3, #23
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	781b      	ldrb	r3, [r3, #0]
} 
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b006      	add	sp, #24
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2221      	movs	r2, #33	; 0x21
 800169c:	5c9b      	ldrb	r3, [r3, r2]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d008      	beq.n	80016b6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2204      	movs	r2, #4
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2220      	movs	r2, #32
 80016ae:	2100      	movs	r1, #0
 80016b0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e020      	b.n	80016f8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	210e      	movs	r1, #14
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	2101      	movs	r1, #1
 80016e0:	4091      	lsls	r1, r2
 80016e2:	000a      	movs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2221      	movs	r2, #33	; 0x21
 80016ea:	2101      	movs	r1, #1
 80016ec:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	2100      	movs	r1, #0
 80016f4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	210f      	movs	r1, #15
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2221      	movs	r2, #33	; 0x21
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d006      	beq.n	800172a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2204      	movs	r2, #4
 8001720:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001722:	187b      	adds	r3, r7, r1
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	e028      	b.n	800177c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	210e      	movs	r1, #14
 8001736:	438a      	bics	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2101      	movs	r1, #1
 8001746:	438a      	bics	r2, r1
 8001748:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	2101      	movs	r1, #1
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2221      	movs	r2, #33	; 0x21
 800175e:	2101      	movs	r1, #1
 8001760:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176e:	2b00      	cmp	r3, #0
 8001770:	d004      	beq.n	800177c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	0010      	movs	r0, r2
 800177a:	4798      	blx	r3
    } 
  }
  return status;
 800177c:	230f      	movs	r3, #15
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	781b      	ldrb	r3, [r3, #0]
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b004      	add	sp, #16
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2204      	movs	r2, #4
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	d024      	beq.n	80017fc <HAL_DMA_IRQHandler+0x72>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d020      	beq.n	80017fc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2220      	movs	r2, #32
 80017c2:	4013      	ands	r3, r2
 80017c4:	d107      	bne.n	80017d6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2104      	movs	r1, #4
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017de:	2104      	movs	r1, #4
 80017e0:	4091      	lsls	r1, r2
 80017e2:	000a      	movs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x66>
 80017ee:	e06a      	b.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	0010      	movs	r0, r2
 80017f8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	e064      	b.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	2202      	movs	r2, #2
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4013      	ands	r3, r2
 800180a:	d02b      	beq.n	8001864 <HAL_DMA_IRQHandler+0xda>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2202      	movs	r2, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d027      	beq.n	8001864 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2220      	movs	r2, #32
 800181c:	4013      	ands	r3, r2
 800181e:	d10b      	bne.n	8001838 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	210a      	movs	r1, #10
 800182c:	438a      	bics	r2, r1
 800182e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2221      	movs	r2, #33	; 0x21
 8001834:	2101      	movs	r1, #1
 8001836:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	2102      	movs	r1, #2
 8001842:	4091      	lsls	r1, r2
 8001844:	000a      	movs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	2100      	movs	r1, #0
 800184e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d036      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	0010      	movs	r0, r2
 8001860:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001862:	e030      	b.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	2208      	movs	r2, #8
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	d028      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2208      	movs	r2, #8
 8001878:	4013      	ands	r3, r2
 800187a:	d024      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	210e      	movs	r1, #14
 8001888:	438a      	bics	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	2101      	movs	r1, #1
 8001896:	4091      	lsls	r1, r2
 8001898:	000a      	movs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2221      	movs	r2, #33	; 0x21
 80018a6:	2101      	movs	r1, #1
 80018a8:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2220      	movs	r2, #32
 80018ae:	2100      	movs	r1, #0
 80018b0:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	0010      	movs	r0, r2
 80018c2:	4798      	blx	r3
    }
   }
}  
 80018c4:	e7ff      	b.n	80018c6 <HAL_DMA_IRQHandler+0x13c>
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}

080018ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	2101      	movs	r1, #1
 80018e6:	4091      	lsls	r1, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d108      	bne.n	800190e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800190c:	e007      	b.n	800191e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	60da      	str	r2, [r3, #12]
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a08      	ldr	r2, [pc, #32]	; (8001958 <DMA_CalcBaseAndBitshift+0x30>)
 8001936:	4694      	mov	ip, r2
 8001938:	4463      	add	r3, ip
 800193a:	2114      	movs	r1, #20
 800193c:	0018      	movs	r0, r3
 800193e:	f7fe fbf5 	bl	800012c <__udivsi3>
 8001942:	0003      	movs	r3, r0
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <DMA_CalcBaseAndBitshift+0x34>)
 800194e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}
 8001958:	bffdfff8 	.word	0xbffdfff8
 800195c:	40020000 	.word	0x40020000

08001960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800196e:	e149      	b.n	8001c04 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	4091      	lsls	r1, r2
 800197a:	000a      	movs	r2, r1
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d100      	bne.n	8001988 <HAL_GPIO_Init+0x28>
 8001986:	e13a      	b.n	8001bfe <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2203      	movs	r2, #3
 800198e:	4013      	ands	r3, r2
 8001990:	2b01      	cmp	r3, #1
 8001992:	d005      	beq.n	80019a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800199c:	2b02      	cmp	r3, #2
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	2201      	movs	r2, #1
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2203      	movs	r2, #3
 8001a08:	4013      	ands	r3, r2
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d017      	beq.n	8001a3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2203      	movs	r2, #3
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d123      	bne.n	8001a92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	08da      	lsrs	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3208      	adds	r2, #8
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	58d3      	ldr	r3, [r2, r3]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2207      	movs	r2, #7
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	220f      	movs	r2, #15
 8001a62:	409a      	lsls	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	43da      	mvns	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2107      	movs	r1, #7
 8001a76:	400b      	ands	r3, r1
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	0013      	movs	r3, r2
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	6939      	ldr	r1, [r7, #16]
 8001a90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	23c0      	movs	r3, #192	; 0xc0
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d100      	bne.n	8001ad4 <HAL_GPIO_Init+0x174>
 8001ad2:	e094      	b.n	8001bfe <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad4:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001ada:	2101      	movs	r1, #1
 8001adc:	430a      	orrs	r2, r1
 8001ade:	619a      	str	r2, [r3, #24]
 8001ae0:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <HAL_GPIO_Init+0x2bc>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aec:	4a4c      	ldr	r2, [pc, #304]	; (8001c20 <HAL_GPIO_Init+0x2c0>)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	589b      	ldr	r3, [r3, r2]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2203      	movs	r2, #3
 8001afe:	4013      	ands	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	409a      	lsls	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	2390      	movs	r3, #144	; 0x90
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x1d6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a41      	ldr	r2, [pc, #260]	; (8001c24 <HAL_GPIO_Init+0x2c4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x1d2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a40      	ldr	r2, [pc, #256]	; (8001c28 <HAL_GPIO_Init+0x2c8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x1ce>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x1d8>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x1d8>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x1d8>
 8001b36:	2300      	movs	r3, #0
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x2c0>)
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b56:	4b35      	ldr	r3, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	025b      	lsls	r3, r3, #9
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43da      	mvns	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	029b      	lsls	r3, r3, #10
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba4:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	035b      	lsls	r3, r3, #13
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bce:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	4013      	ands	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_GPIO_Init+0x2cc>)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	40da      	lsrs	r2, r3
 8001c0c:	1e13      	subs	r3, r2, #0
 8001c0e:	d000      	beq.n	8001c12 <HAL_GPIO_Init+0x2b2>
 8001c10:	e6ae      	b.n	8001970 <HAL_GPIO_Init+0x10>
  } 
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b006      	add	sp, #24
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	1c02      	adds	r2, r0, #0
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	1c7b      	adds	r3, r7, #1
 8001c44:	1c0a      	adds	r2, r1, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e082      	b.n	8001d84 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2241      	movs	r2, #65	; 0x41
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d107      	bne.n	8001c9a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2240      	movs	r2, #64	; 0x40
 8001c8e:	2100      	movs	r1, #0
 8001c90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff f985 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2241      	movs	r2, #65	; 0x41
 8001c9e:	2124      	movs	r1, #36	; 0x24
 8001ca0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2101      	movs	r1, #1
 8001cae:	438a      	bics	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4934      	ldr	r1, [pc, #208]	; (8001d8c <HAL_I2C_Init+0x120>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4931      	ldr	r1, [pc, #196]	; (8001d90 <HAL_I2C_Init+0x124>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d108      	bne.n	8001cea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0209      	lsls	r1, r1, #8
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	e007      	b.n	8001cfa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2184      	movs	r1, #132	; 0x84
 8001cf4:	0209      	lsls	r1, r1, #8
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d104      	bne.n	8001d0c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	491f      	ldr	r1, [pc, #124]	; (8001d94 <HAL_I2C_Init+0x128>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_I2C_Init+0x124>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69d9      	ldr	r1, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1a      	ldr	r2, [r3, #32]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2241      	movs	r2, #65	; 0x41
 8001d70:	2120      	movs	r1, #32
 8001d72:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2242      	movs	r2, #66	; 0x42
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	f0ffffff 	.word	0xf0ffffff
 8001d90:	ffff7fff 	.word	0xffff7fff
 8001d94:	02008000 	.word	0x02008000

08001d98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	0008      	movs	r0, r1
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	0019      	movs	r1, r3
 8001da6:	230a      	movs	r3, #10
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	1c02      	adds	r2, r0, #0
 8001dac:	801a      	strh	r2, [r3, #0]
 8001dae:	2308      	movs	r3, #8
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	1c0a      	adds	r2, r1, #0
 8001db4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2241      	movs	r2, #65	; 0x41
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	d000      	beq.n	8001dc4 <HAL_I2C_Master_Transmit+0x2c>
 8001dc2:	e0e7      	b.n	8001f94 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	5c9b      	ldrb	r3, [r3, r2]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Master_Transmit+0x3a>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e0e1      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2240      	movs	r2, #64	; 0x40
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001dda:	f7ff fa9f 	bl	800131c <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	0219      	lsls	r1, r3, #8
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	2319      	movs	r3, #25
 8001dee:	2201      	movs	r2, #1
 8001df0:	f000 f8fc 	bl	8001fec <I2C_WaitOnFlagUntilTimeout>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cc      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2241      	movs	r2, #65	; 0x41
 8001e00:	2121      	movs	r1, #33	; 0x21
 8001e02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2242      	movs	r2, #66	; 0x42
 8001e08:	2110      	movs	r1, #16
 8001e0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	18ba      	adds	r2, r7, r2
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d911      	bls.n	8001e56 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	045c      	lsls	r4, r3, #17
 8001e42:	230a      	movs	r3, #10
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	8819      	ldrh	r1, [r3, #0]
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <HAL_I2C_Master_Transmit+0x208>)
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	0023      	movs	r3, r4
 8001e50:	f000 fa00 	bl	8002254 <I2C_TransferConfig>
 8001e54:	e075      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	049c      	lsls	r4, r3, #18
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	8819      	ldrh	r1, [r3, #0]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <HAL_I2C_Master_Transmit+0x208>)
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	0023      	movs	r3, r4
 8001e78:	f000 f9ec 	bl	8002254 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e7c:	e061      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f000 f8f0 	bl	800206a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e8a:	1e03      	subs	r3, r0, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e081      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03a      	beq.n	8001f42 <HAL_I2C_Master_Transmit+0x1aa>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d136      	bne.n	8001f42 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	0013      	movs	r3, r2
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	f000 f883 	bl	8001fec <I2C_WaitOnFlagUntilTimeout>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e053      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2bff      	cmp	r3, #255	; 0xff
 8001ef6:	d911      	bls.n	8001f1c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	22ff      	movs	r2, #255	; 0xff
 8001efc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	045c      	lsls	r4, r3, #17
 8001f08:	230a      	movs	r3, #10
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	8819      	ldrh	r1, [r3, #0]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	2300      	movs	r3, #0
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	0023      	movs	r3, r4
 8001f16:	f000 f99d 	bl	8002254 <I2C_TransferConfig>
 8001f1a:	e012      	b.n	8001f42 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	049c      	lsls	r4, r3, #18
 8001f30:	230a      	movs	r3, #10
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	8819      	ldrh	r1, [r3, #0]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	0023      	movs	r3, r4
 8001f3e:	f000 f989 	bl	8002254 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d198      	bne.n	8001e7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 f8c8 	bl	80020e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e01a      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <HAL_I2C_Master_Transmit+0x20c>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2241      	movs	r2, #65	; 0x41
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2242      	movs	r2, #66	; 0x42
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2240      	movs	r2, #64	; 0x40
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b007      	add	sp, #28
 8001f9c:	bd90      	pop	{r4, r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	80002000 	.word	0x80002000
 8001fa4:	fe00e800 	.word	0xfe00e800

08001fa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d103      	bne.n	8001fc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d007      	beq.n	8001fe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	619a      	str	r2, [r3, #24]
  }
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd80      	pop	{r7, pc}

08001fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	1dfb      	adds	r3, r7, #7
 8001ffa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ffc:	e021      	b.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	d01e      	beq.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002004:	f7ff f98a 	bl	800131c <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d302      	bcc.n	800201a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d113      	bne.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	2220      	movs	r2, #32
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2241      	movs	r2, #65	; 0x41
 800202a:	2120      	movs	r1, #32
 800202c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2242      	movs	r2, #66	; 0x42
 8002032:	2100      	movs	r1, #0
 8002034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2240      	movs	r2, #64	; 0x40
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	4013      	ands	r3, r2
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	425a      	negs	r2, r3
 8002052:	4153      	adcs	r3, r2
 8002054:	b2db      	uxtb	r3, r3
 8002056:	001a      	movs	r2, r3
 8002058:	1dfb      	adds	r3, r7, #7
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d0ce      	beq.n	8001ffe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002076:	e02b      	b.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 f86e 	bl	8002160 <I2C_IsAcknowledgeFailed>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e029      	b.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	3301      	adds	r3, #1
 8002090:	d01e      	beq.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002092:	f7ff f943 	bl	800131c <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d302      	bcc.n	80020a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d113      	bne.n	80020d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ac:	2220      	movs	r2, #32
 80020ae:	431a      	orrs	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2241      	movs	r2, #65	; 0x41
 80020b8:	2120      	movs	r1, #32
 80020ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2242      	movs	r2, #66	; 0x42
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2240      	movs	r2, #64	; 0x40
 80020c8:	2100      	movs	r1, #0
 80020ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2202      	movs	r2, #2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d1cc      	bne.n	8002078 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b004      	add	sp, #16
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020f4:	e028      	b.n	8002148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 f82f 	bl	8002160 <I2C_IsAcknowledgeFailed>
 8002102:	1e03      	subs	r3, r0, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e026      	b.n	8002158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210a:	f7ff f907 	bl	800131c <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d113      	bne.n	8002148 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	2220      	movs	r2, #32
 8002126:	431a      	orrs	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2241      	movs	r2, #65	; 0x41
 8002130:	2120      	movs	r1, #32
 8002132:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2242      	movs	r2, #66	; 0x42
 8002138:	2100      	movs	r1, #0
 800213a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2240      	movs	r2, #64	; 0x40
 8002140:	2100      	movs	r1, #0
 8002142:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e007      	b.n	8002158 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	2220      	movs	r2, #32
 8002150:	4013      	ands	r3, r2
 8002152:	2b20      	cmp	r3, #32
 8002154:	d1cf      	bne.n	80020f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b004      	add	sp, #16
 800215e:	bd80      	pop	{r7, pc}

08002160 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2210      	movs	r2, #16
 8002174:	4013      	ands	r3, r2
 8002176:	2b10      	cmp	r3, #16
 8002178:	d164      	bne.n	8002244 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	049b      	lsls	r3, r3, #18
 8002184:	401a      	ands	r2, r3
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	049b      	lsls	r3, r3, #18
 800218a:	429a      	cmp	r2, r3
 800218c:	d02b      	beq.n	80021e6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	01c9      	lsls	r1, r1, #7
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021a0:	e021      	b.n	80021e6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3301      	adds	r3, #1
 80021a6:	d01e      	beq.n	80021e6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7ff f8b8 	bl	800131c <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <I2C_IsAcknowledgeFailed+0x5e>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d113      	bne.n	80021e6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	2220      	movs	r2, #32
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2241      	movs	r2, #65	; 0x41
 80021ce:	2120      	movs	r1, #32
 80021d0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2242      	movs	r2, #66	; 0x42
 80021d6:	2100      	movs	r1, #0
 80021d8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	2100      	movs	r1, #0
 80021e0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e02f      	b.n	8002246 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2220      	movs	r2, #32
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d1d6      	bne.n	80021a2 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2210      	movs	r2, #16
 80021fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2220      	movs	r2, #32
 8002202:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff fece 	bl	8001fa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <I2C_IsAcknowledgeFailed+0xf0>)
 8002218:	400a      	ands	r2, r1
 800221a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	2204      	movs	r2, #4
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2241      	movs	r2, #65	; 0x41
 800222c:	2120      	movs	r1, #32
 800222e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2242      	movs	r2, #66	; 0x42
 8002234:	2100      	movs	r1, #0
 8002236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2240      	movs	r2, #64	; 0x40
 800223c:	2100      	movs	r1, #0
 800223e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b004      	add	sp, #16
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	fe00e800 	.word	0xfe00e800

08002254 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	0008      	movs	r0, r1
 800225e:	0011      	movs	r1, r2
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	240a      	movs	r4, #10
 8002264:	193b      	adds	r3, r7, r4
 8002266:	1c02      	adds	r2, r0, #0
 8002268:	801a      	strh	r2, [r3, #0]
 800226a:	2009      	movs	r0, #9
 800226c:	183b      	adds	r3, r7, r0
 800226e:	1c0a      	adds	r2, r1, #0
 8002270:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	6a3a      	ldr	r2, [r7, #32]
 800227a:	0d51      	lsrs	r1, r2, #21
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	00d2      	lsls	r2, r2, #3
 8002280:	400a      	ands	r2, r1
 8002282:	490e      	ldr	r1, [pc, #56]	; (80022bc <I2C_TransferConfig+0x68>)
 8002284:	430a      	orrs	r2, r1
 8002286:	43d2      	mvns	r2, r2
 8002288:	401a      	ands	r2, r3
 800228a:	0011      	movs	r1, r2
 800228c:	193b      	adds	r3, r7, r4
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	059b      	lsls	r3, r3, #22
 8002292:	0d9a      	lsrs	r2, r3, #22
 8002294:	183b      	adds	r3, r7, r0
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	0418      	lsls	r0, r3, #16
 800229a:	23ff      	movs	r3, #255	; 0xff
 800229c:	041b      	lsls	r3, r3, #16
 800229e:	4003      	ands	r3, r0
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	431a      	orrs	r2, r3
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b005      	add	sp, #20
 80022b8:	bd90      	pop	{r4, r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	03ff63ff 	.word	0x03ff63ff

080022c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2241      	movs	r2, #65	; 0x41
 80022ce:	5c9b      	ldrb	r3, [r3, r2]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d138      	bne.n	8002348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	5c9b      	ldrb	r3, [r3, r2]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e032      	b.n	800234a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	2101      	movs	r1, #1
 80022ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2241      	movs	r2, #65	; 0x41
 80022f0:	2124      	movs	r1, #36	; 0x24
 80022f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4911      	ldr	r1, [pc, #68]	; (8002354 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002310:	400a      	ands	r2, r1
 8002312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2101      	movs	r1, #1
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2241      	movs	r2, #65	; 0x41
 8002338:	2120      	movs	r1, #32
 800233a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	e000      	b.n	800234a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	ffffefff 	.word	0xffffefff

08002358 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	d139      	bne.n	80023e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	5c9b      	ldrb	r3, [r3, r2]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002378:	2302      	movs	r3, #2
 800237a:	e033      	b.n	80023e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2240      	movs	r2, #64	; 0x40
 8002380:	2101      	movs	r1, #1
 8002382:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2241      	movs	r2, #65	; 0x41
 8002388:	2124      	movs	r1, #36	; 0x24
 800238a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2101      	movs	r1, #1
 8002398:	438a      	bics	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a11      	ldr	r2, [pc, #68]	; (80023ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2241      	movs	r2, #65	; 0x41
 80023d2:	2120      	movs	r1, #32
 80023d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2240      	movs	r2, #64	; 0x40
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	e000      	b.n	80023e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023e2:	2302      	movs	r3, #2
  }
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	fffff0ff 	.word	0xfffff0ff

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e301      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	4013      	ands	r3, r2
 800240a:	d100      	bne.n	800240e <HAL_RCC_OscConfig+0x1e>
 800240c:	e08d      	b.n	800252a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800240e:	4bc3      	ldr	r3, [pc, #780]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	220c      	movs	r2, #12
 8002414:	4013      	ands	r3, r2
 8002416:	2b04      	cmp	r3, #4
 8002418:	d00e      	beq.n	8002438 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241a:	4bc0      	ldr	r3, [pc, #768]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	220c      	movs	r2, #12
 8002420:	4013      	ands	r3, r2
 8002422:	2b08      	cmp	r3, #8
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x64>
 8002426:	4bbd      	ldr	r3, [pc, #756]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	401a      	ands	r2, r3
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	429a      	cmp	r2, r3
 8002436:	d10d      	bne.n	8002454 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4bb8      	ldr	r3, [pc, #736]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	029b      	lsls	r3, r3, #10
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <HAL_RCC_OscConfig+0x56>
 8002444:	e070      	b.n	8002528 <HAL_RCC_OscConfig+0x138>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d000      	beq.n	8002450 <HAL_RCC_OscConfig+0x60>
 800244e:	e06b      	b.n	8002528 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e2d8      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x7c>
 800245c:	4baf      	ldr	r3, [pc, #700]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	4bae      	ldr	r3, [pc, #696]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	0249      	lsls	r1, r1, #9
 8002466:	430a      	orrs	r2, r1
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e02f      	b.n	80024cc <HAL_RCC_OscConfig+0xdc>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10c      	bne.n	800248e <HAL_RCC_OscConfig+0x9e>
 8002474:	4ba9      	ldr	r3, [pc, #676]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4ba8      	ldr	r3, [pc, #672]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800247a:	49a9      	ldr	r1, [pc, #676]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4ba6      	ldr	r3, [pc, #664]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4ba5      	ldr	r3, [pc, #660]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002486:	49a7      	ldr	r1, [pc, #668]	; (8002724 <HAL_RCC_OscConfig+0x334>)
 8002488:	400a      	ands	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e01e      	b.n	80024cc <HAL_RCC_OscConfig+0xdc>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b05      	cmp	r3, #5
 8002494:	d10e      	bne.n	80024b4 <HAL_RCC_OscConfig+0xc4>
 8002496:	4ba1      	ldr	r3, [pc, #644]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4ba0      	ldr	r3, [pc, #640]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	02c9      	lsls	r1, r1, #11
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b9d      	ldr	r3, [pc, #628]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b9c      	ldr	r3, [pc, #624]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0249      	lsls	r1, r1, #9
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e00b      	b.n	80024cc <HAL_RCC_OscConfig+0xdc>
 80024b4:	4b99      	ldr	r3, [pc, #612]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b98      	ldr	r3, [pc, #608]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024ba:	4999      	ldr	r1, [pc, #612]	; (8002720 <HAL_RCC_OscConfig+0x330>)
 80024bc:	400a      	ands	r2, r1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4b95      	ldr	r3, [pc, #596]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024c6:	4997      	ldr	r1, [pc, #604]	; (8002724 <HAL_RCC_OscConfig+0x334>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d014      	beq.n	80024fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe ff22 	bl	800131c <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024de:	f7fe ff1d 	bl	800131c <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b64      	cmp	r3, #100	; 0x64
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e28a      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	4b8a      	ldr	r3, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0xee>
 80024fc:	e015      	b.n	800252a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe ff0d 	bl	800131c <HAL_GetTick>
 8002502:	0003      	movs	r3, r0
 8002504:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002508:	f7fe ff08 	bl	800131c <HAL_GetTick>
 800250c:	0002      	movs	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e275      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b80      	ldr	r3, [pc, #512]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	029b      	lsls	r3, r3, #10
 8002522:	4013      	ands	r3, r2
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x118>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2202      	movs	r2, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d100      	bne.n	8002536 <HAL_RCC_OscConfig+0x146>
 8002534:	e069      	b.n	800260a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002536:	4b79      	ldr	r3, [pc, #484]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	220c      	movs	r2, #12
 800253c:	4013      	ands	r3, r2
 800253e:	d00b      	beq.n	8002558 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002540:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	220c      	movs	r2, #12
 8002546:	4013      	ands	r3, r2
 8002548:	2b08      	cmp	r3, #8
 800254a:	d11c      	bne.n	8002586 <HAL_RCC_OscConfig+0x196>
 800254c:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	025b      	lsls	r3, r3, #9
 8002554:	4013      	ands	r3, r2
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e24b      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b6b      	ldr	r3, [pc, #428]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	22f8      	movs	r2, #248	; 0xf8
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00da      	lsls	r2, r3, #3
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002580:	430a      	orrs	r2, r1
 8002582:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002584:	e041      	b.n	800260a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d024      	beq.n	80025d8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b62      	ldr	r3, [pc, #392]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259a:	f7fe febf 	bl	800131c <HAL_GetTick>
 800259e:	0003      	movs	r3, r0
 80025a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe feba 	bl	800131c <HAL_GetTick>
 80025a8:	0002      	movs	r2, r0
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e227      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b6:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2202      	movs	r2, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	d0f1      	beq.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b56      	ldr	r3, [pc, #344]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	22f8      	movs	r2, #248	; 0xf8
 80025c6:	4393      	bics	r3, r2
 80025c8:	0019      	movs	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	00da      	lsls	r2, r3, #3
 80025d0:	4b52      	ldr	r3, [pc, #328]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e018      	b.n	800260a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80025de:	2101      	movs	r1, #1
 80025e0:	438a      	bics	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fe9a 	bl	800131c <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe95 	bl	800131c <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e202      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2202      	movs	r2, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d1f1      	bne.n	80025ee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2208      	movs	r2, #8
 8002610:	4013      	ands	r3, r2
 8002612:	d036      	beq.n	8002682 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d019      	beq.n	8002650 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800261e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002620:	4b3e      	ldr	r3, [pc, #248]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002622:	2101      	movs	r1, #1
 8002624:	430a      	orrs	r2, r1
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002628:	f7fe fe78 	bl	800131c <HAL_GetTick>
 800262c:	0003      	movs	r3, r0
 800262e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fe73 	bl	800131c <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1e0      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002644:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2202      	movs	r2, #2
 800264a:	4013      	ands	r3, r2
 800264c:	d0f1      	beq.n	8002632 <HAL_RCC_OscConfig+0x242>
 800264e:	e018      	b.n	8002682 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002656:	2101      	movs	r1, #1
 8002658:	438a      	bics	r2, r1
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7fe fe5e 	bl	800131c <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fe59 	bl	800131c <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1c6      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	2202      	movs	r2, #2
 800267e:	4013      	ands	r3, r2
 8002680:	d1f1      	bne.n	8002666 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2204      	movs	r2, #4
 8002688:	4013      	ands	r3, r2
 800268a:	d100      	bne.n	800268e <HAL_RCC_OscConfig+0x29e>
 800268c:	e0b4      	b.n	80027f8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	201f      	movs	r0, #31
 8002690:	183b      	adds	r3, r7, r0
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	4013      	ands	r3, r2
 80026a0:	d110      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80026a8:	2180      	movs	r1, #128	; 0x80
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	61da      	str	r2, [r3, #28]
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	055b      	lsls	r3, r3, #21
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026be:	183b      	adds	r3, r7, r0
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_OscConfig+0x338>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	d11a      	bne.n	8002706 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x338>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <HAL_RCC_OscConfig+0x338>)
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	0049      	lsls	r1, r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7fe fe1d 	bl	800131c <HAL_GetTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7fe fe18 	bl	800131c <HAL_GetTick>
 80026ec:	0002      	movs	r2, r0
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e185      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fa:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <HAL_RCC_OscConfig+0x338>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10e      	bne.n	800272c <HAL_RCC_OscConfig+0x33c>
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	4b02      	ldr	r3, [pc, #8]	; (800271c <HAL_RCC_OscConfig+0x32c>)
 8002714:	2101      	movs	r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	621a      	str	r2, [r3, #32]
 800271a:	e035      	b.n	8002788 <HAL_RCC_OscConfig+0x398>
 800271c:	40021000 	.word	0x40021000
 8002720:	fffeffff 	.word	0xfffeffff
 8002724:	fffbffff 	.word	0xfffbffff
 8002728:	40007000 	.word	0x40007000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10c      	bne.n	800274e <HAL_RCC_OscConfig+0x35e>
 8002734:	4bb6      	ldr	r3, [pc, #728]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	4bb5      	ldr	r3, [pc, #724]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800273a:	2101      	movs	r1, #1
 800273c:	438a      	bics	r2, r1
 800273e:	621a      	str	r2, [r3, #32]
 8002740:	4bb3      	ldr	r3, [pc, #716]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002742:	6a1a      	ldr	r2, [r3, #32]
 8002744:	4bb2      	ldr	r3, [pc, #712]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002746:	2104      	movs	r1, #4
 8002748:	438a      	bics	r2, r1
 800274a:	621a      	str	r2, [r3, #32]
 800274c:	e01c      	b.n	8002788 <HAL_RCC_OscConfig+0x398>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x380>
 8002756:	4bae      	ldr	r3, [pc, #696]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	4bad      	ldr	r3, [pc, #692]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800275c:	2104      	movs	r1, #4
 800275e:	430a      	orrs	r2, r1
 8002760:	621a      	str	r2, [r3, #32]
 8002762:	4bab      	ldr	r3, [pc, #684]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002764:	6a1a      	ldr	r2, [r3, #32]
 8002766:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002768:	2101      	movs	r1, #1
 800276a:	430a      	orrs	r2, r1
 800276c:	621a      	str	r2, [r3, #32]
 800276e:	e00b      	b.n	8002788 <HAL_RCC_OscConfig+0x398>
 8002770:	4ba7      	ldr	r3, [pc, #668]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	621a      	str	r2, [r3, #32]
 800277c:	4ba4      	ldr	r3, [pc, #656]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	4ba3      	ldr	r3, [pc, #652]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002782:	2104      	movs	r1, #4
 8002784:	438a      	bics	r2, r1
 8002786:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d014      	beq.n	80027ba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe fdc4 	bl	800131c <HAL_GetTick>
 8002794:	0003      	movs	r3, r0
 8002796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	e009      	b.n	80027ae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7fe fdbf 	bl	800131c <HAL_GetTick>
 800279e:	0002      	movs	r2, r0
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	4a9b      	ldr	r2, [pc, #620]	; (8002a14 <HAL_RCC_OscConfig+0x624>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e12b      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x3aa>
 80027b8:	e013      	b.n	80027e2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ba:	f7fe fdaf 	bl	800131c <HAL_GetTick>
 80027be:	0003      	movs	r3, r0
 80027c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c2:	e009      	b.n	80027d8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fdaa 	bl	800131c <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	4a91      	ldr	r2, [pc, #580]	; (8002a14 <HAL_RCC_OscConfig+0x624>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e116      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d8:	4b8d      	ldr	r3, [pc, #564]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e2:	231f      	movs	r3, #31
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d105      	bne.n	80027f8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	4b87      	ldr	r3, [pc, #540]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80027f2:	4989      	ldr	r1, [pc, #548]	; (8002a18 <HAL_RCC_OscConfig+0x628>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	4013      	ands	r3, r2
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d12a      	bne.n	8002860 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800280a:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800280c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800280e:	4b80      	ldr	r3, [pc, #512]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002810:	2104      	movs	r1, #4
 8002812:	430a      	orrs	r2, r1
 8002814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002816:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800281a:	4b7d      	ldr	r3, [pc, #500]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fd7b 	bl	800131c <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800282c:	f7fe fd76 	bl	800131c <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e0e3      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800283e:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002842:	2202      	movs	r2, #2
 8002844:	4013      	ands	r3, r2
 8002846:	d0f1      	beq.n	800282c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002848:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	22f8      	movs	r2, #248	; 0xf8
 800284e:	4393      	bics	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	00da      	lsls	r2, r3, #3
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800285a:	430a      	orrs	r2, r1
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
 800285e:	e034      	b.n	80028ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	3305      	adds	r3, #5
 8002866:	d111      	bne.n	800288c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002868:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800286e:	2104      	movs	r1, #4
 8002870:	438a      	bics	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002874:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002878:	22f8      	movs	r2, #248	; 0xf8
 800287a:	4393      	bics	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	00da      	lsls	r2, r3, #3
 8002884:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
 800288a:	e01e      	b.n	80028ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800288c:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800288e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002890:	4b5f      	ldr	r3, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002892:	2104      	movs	r1, #4
 8002894:	430a      	orrs	r2, r1
 8002896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002898:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800289a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fd3a 	bl	800131c <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028ae:	f7fe fd35 	bl	800131c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0a2      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80028c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c4:	2202      	movs	r2, #2
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f1      	bne.n	80028ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d100      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4e4>
 80028d2:	e097      	b.n	8002a04 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d4:	4b4e      	ldr	r3, [pc, #312]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	220c      	movs	r2, #12
 80028da:	4013      	ands	r3, r2
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d100      	bne.n	80028e2 <HAL_RCC_OscConfig+0x4f2>
 80028e0:	e06b      	b.n	80029ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d14c      	bne.n	8002984 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b48      	ldr	r3, [pc, #288]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80028f0:	494a      	ldr	r1, [pc, #296]	; (8002a1c <HAL_RCC_OscConfig+0x62c>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fd11 	bl	800131c <HAL_GetTick>
 80028fa:	0003      	movs	r3, r0
 80028fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fd0c 	bl	800131c <HAL_GetTick>
 8002904:	0002      	movs	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e079      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002912:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	049b      	lsls	r3, r3, #18
 800291a:	4013      	ands	r3, r2
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	220f      	movs	r2, #15
 8002924:	4393      	bics	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	4b38      	ldr	r3, [pc, #224]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800292e:	430a      	orrs	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	; 0x2c
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4a3a      	ldr	r2, [pc, #232]	; (8002a20 <HAL_RCC_OscConfig+0x630>)
 8002938:	4013      	ands	r3, r2
 800293a:	0019      	movs	r1, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	431a      	orrs	r2, r3
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002948:	430a      	orrs	r2, r1
 800294a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	0449      	lsls	r1, r1, #17
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fcdf 	bl	800131c <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7fe fcda 	bl	800131c <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e047      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002976:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	049b      	lsls	r3, r3, #18
 800297e:	4013      	ands	r3, r2
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x574>
 8002982:	e03f      	b.n	8002a04 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 800298a:	4924      	ldr	r1, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x62c>)
 800298c:	400a      	ands	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fcc4 	bl	800131c <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299a:	f7fe fcbf 	bl	800131c <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e02c      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ac:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	049b      	lsls	r3, r3, #18
 80029b4:	4013      	ands	r3, r2
 80029b6:	d1f0      	bne.n	800299a <HAL_RCC_OscConfig+0x5aa>
 80029b8:	e024      	b.n	8002a04 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01f      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80029cc:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x620>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	401a      	ands	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d10e      	bne.n	8002a00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	220f      	movs	r2, #15
 80029e6:	401a      	ands	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	23f0      	movs	r3, #240	; 0xf0
 80029f4:	039b      	lsls	r3, r3, #14
 80029f6:	401a      	ands	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b008      	add	sp, #32
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	00001388 	.word	0x00001388
 8002a18:	efffffff 	.word	0xefffffff
 8002a1c:	feffffff 	.word	0xfeffffff
 8002a20:	ffc2ffff 	.word	0xffc2ffff

08002a24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0b3      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4013      	ands	r3, r2
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d911      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4393      	bics	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	4b55      	ldr	r3, [pc, #340]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e09a      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4013      	ands	r3, r2
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2204      	movs	r2, #4
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d006      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002a84:	21e0      	movs	r1, #224	; 0xe0
 8002a86:	00c9      	lsls	r1, r1, #3
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8c:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	22f0      	movs	r2, #240	; 0xf0
 8002a92:	4393      	bics	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	4b3e      	ldr	r3, [pc, #248]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	2380      	movs	r3, #128	; 0x80
 8002ab8:	029b      	lsls	r3, r3, #10
 8002aba:	4013      	ands	r3, r2
 8002abc:	d114      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06e      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	049b      	lsls	r3, r3, #18
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e062      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ada:	4b34      	ldr	r3, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e05b      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	4393      	bics	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fc0e 	bl	800131c <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b04:	e009      	b.n	8002b1a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fe fc09 	bl	800131c <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	4a27      	ldr	r2, [pc, #156]	; (8002bb0 <HAL_RCC_ClockConfig+0x18c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e042      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b24      	ldr	r3, [pc, #144]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	220c      	movs	r2, #12
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1ec      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2201      	movs	r2, #1
 8002b32:	4013      	ands	r3, r2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d211      	bcs.n	8002b5e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4393      	bics	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_RCC_ClockConfig+0x184>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2201      	movs	r2, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e020      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2204      	movs	r2, #4
 8002b64:	4013      	ands	r3, r2
 8002b66:	d009      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <HAL_RCC_ClockConfig+0x190>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b7c:	f000 f820 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b80:	0001      	movs	r1, r0
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x188>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	220f      	movs	r2, #15
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <HAL_RCC_ClockConfig+0x194>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	000a      	movs	r2, r1
 8002b92:	40da      	lsrs	r2, r3
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x198>)
 8002b96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f7fe fb79 	bl	8001290 <HAL_InitTick>
  
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	00001388 	.word	0x00001388
 8002bb4:	fffff8ff 	.word	0xfffff8ff
 8002bb8:	08004bb0 	.word	0x08004bb0
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b08f      	sub	sp, #60	; 0x3c
 8002bc4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002bc6:	2314      	movs	r3, #20
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bce:	c313      	stmia	r3!, {r0, r1, r4}
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bda:	c313      	stmia	r3!, {r0, r1, r4}
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be8:	2300      	movs	r3, #0
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002bf4:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d002      	beq.n	8002c0a <HAL_RCC_GetSysClockFreq+0x4a>
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d003      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x50>
 8002c08:	e02d      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c0e:	e02d      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	0c9b      	lsrs	r3, r3, #18
 8002c14:	220f      	movs	r2, #15
 8002c16:	4013      	ands	r3, r2
 8002c18:	2214      	movs	r2, #20
 8002c1a:	18ba      	adds	r2, r7, r2
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	220f      	movs	r2, #15
 8002c26:	4013      	ands	r3, r2
 8002c28:	1d3a      	adds	r2, r7, #4
 8002c2a:	5cd3      	ldrb	r3, [r2, r3]
 8002c2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	025b      	lsls	r3, r3, #9
 8002c34:	4013      	ands	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c3a:	4812      	ldr	r0, [pc, #72]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c3c:	f7fd fa76 	bl	800012c <__udivsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	001a      	movs	r2, r3
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	4353      	muls	r3, r2
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c4e:	000a      	movs	r2, r1
 8002c50:	0152      	lsls	r2, r2, #5
 8002c52:	1a52      	subs	r2, r2, r1
 8002c54:	0193      	lsls	r3, r2, #6
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	185b      	adds	r3, r3, r1
 8002c5c:	021b      	lsls	r3, r3, #8
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c64:	e002      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c66:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c6a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b00f      	add	sp, #60	; 0x3c
 8002c74:	bd90      	pop	{r4, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	08004b90 	.word	0x08004b90
 8002c7c:	08004ba0 	.word	0x08004ba0
 8002c80:	40021000 	.word	0x40021000
 8002c84:	007a1200 	.word	0x007a1200

08002c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c8c:	4b02      	ldr	r3, [pc, #8]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000004 	.word	0x20000004

08002c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ca0:	f7ff fff2 	bl	8002c88 <HAL_RCC_GetHCLKFreq>
 8002ca4:	0001      	movs	r1, r0
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	0a1b      	lsrs	r3, r3, #8
 8002cac:	2207      	movs	r2, #7
 8002cae:	4013      	ands	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cb2:	5cd3      	ldrb	r3, [r2, r3]
 8002cb4:	40d9      	lsrs	r1, r3
 8002cb6:	000b      	movs	r3, r1
}    
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08004bc0 	.word	0x08004bc0

08002cc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	025b      	lsls	r3, r3, #9
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ce4:	e08e      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ce6:	2017      	movs	r0, #23
 8002ce8:	183b      	adds	r3, r7, r0
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b57      	ldr	r3, [pc, #348]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	055b      	lsls	r3, r3, #21
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d110      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0549      	lsls	r1, r1, #21
 8002d04:	430a      	orrs	r2, r1
 8002d06:	61da      	str	r2, [r3, #28]
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	055b      	lsls	r3, r3, #21
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4013      	ands	r3, r2
 8002d26:	d11a      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d28:	4b49      	ldr	r3, [pc, #292]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d2e:	2180      	movs	r1, #128	; 0x80
 8002d30:	0049      	lsls	r1, r1, #1
 8002d32:	430a      	orrs	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d36:	f7fe faf1 	bl	800131c <HAL_GetTick>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	e008      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d40:	f7fe faec 	bl	800131c <HAL_GetTick>
 8002d44:	0002      	movs	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e077      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d52:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	23c0      	movs	r3, #192	; 0xc0
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d034      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d02c      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d80:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a33      	ldr	r2, [pc, #204]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d8c:	6a1a      	ldr	r2, [r3, #32]
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	0249      	lsls	r1, r1, #9
 8002d94:	430a      	orrs	r2, r1
 8002d96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002d9e:	492e      	ldr	r1, [pc, #184]	; (8002e58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002da0:	400a      	ands	r2, r1
 8002da2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fab3 	bl	800131c <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	e009      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbc:	f7fe faae 	bl	800131c <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e038      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dda:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	; (8002e54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dea:	430a      	orrs	r2, r1
 8002dec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dee:	2317      	movs	r3, #23
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002dfe:	4918      	ldr	r1, [pc, #96]	; (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	2203      	movs	r2, #3
 8002e14:	4393      	bics	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d009      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2210      	movs	r2, #16
 8002e32:	4393      	bics	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b006      	add	sp, #24
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	40007000 	.word	0x40007000
 8002e54:	fffffcff 	.word	0xfffffcff
 8002e58:	fffeffff 	.word	0xfffeffff
 8002e5c:	00001388 	.word	0x00001388
 8002e60:	efffffff 	.word	0xefffffff

08002e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e044      	b.n	8002f00 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2274      	movs	r2, #116	; 0x74
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7fe f8d9 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2224      	movs	r2, #36	; 0x24
 8002e92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	438a      	bics	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	f000 fbd2 	bl	8003650 <UART_SetConfig>
 8002eac:	0003      	movs	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e024      	b.n	8002f00 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 fcef 	bl	80038a4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	490d      	ldr	r1, [pc, #52]	; (8002f08 <HAL_UART_Init+0xa4>)
 8002ed2:	400a      	ands	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	212a      	movs	r1, #42	; 0x2a
 8002ee2:	438a      	bics	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 fd87 	bl	8003a0c <UART_CheckIdleState>
 8002efe:	0003      	movs	r3, r0
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	ffffb7ff 	.word	0xffffb7ff

08002f0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	1dbb      	adds	r3, r7, #6
 8002f1a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d000      	beq.n	8002f26 <HAL_UART_Transmit+0x1a>
 8002f24:	e096      	b.n	8003054 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_UART_Transmit+0x28>
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e08e      	b.n	8003056 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d109      	bne.n	8002f58 <HAL_UART_Transmit+0x4c>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d001      	beq.n	8002f58 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e07e      	b.n	8003056 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2274      	movs	r2, #116	; 0x74
 8002f5c:	5c9b      	ldrb	r3, [r3, r2]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Transmit+0x5a>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e077      	b.n	8003056 <HAL_UART_Transmit+0x14a>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2274      	movs	r2, #116	; 0x74
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	2100      	movs	r1, #0
 8002f74:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2221      	movs	r2, #33	; 0x21
 8002f7a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f9ce 	bl	800131c <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1dba      	adds	r2, r7, #6
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1dba      	adds	r2, r7, #6
 8002f92:	2152      	movs	r1, #82	; 0x52
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	015b      	lsls	r3, r3, #5
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d108      	bne.n	8002fb6 <HAL_UART_Transmit+0xaa>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e003      	b.n	8002fbe <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2274      	movs	r2, #116	; 0x74
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002fc6:	e02d      	b.n	8003024 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	0013      	movs	r3, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	f000 fd61 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e039      	b.n	8003056 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	05d2      	lsls	r2, r2, #23
 8002ff2:	0dd2      	lsrs	r2, r2, #23
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e008      	b.n	8003012 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b292      	uxth	r2, r2
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2252      	movs	r2, #82	; 0x52
 8003016:	5a9b      	ldrh	r3, [r3, r2]
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b299      	uxth	r1, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2252      	movs	r2, #82	; 0x52
 8003022:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2252      	movs	r2, #82	; 0x52
 8003028:	5a9b      	ldrh	r3, [r3, r2]
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1cb      	bne.n	8002fc8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	0013      	movs	r3, r2
 800303a:	2200      	movs	r2, #0
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	f000 fd2d 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d001      	beq.n	800304a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e005      	b.n	8003056 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b008      	add	sp, #32
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b0ab      	sub	sp, #172	; 0xac
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	22a4      	movs	r2, #164	; 0xa4
 8003070:	18b9      	adds	r1, r7, r2
 8003072:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	20a0      	movs	r0, #160	; 0xa0
 800307c:	1839      	adds	r1, r7, r0
 800307e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	219c      	movs	r1, #156	; 0x9c
 8003088:	1879      	adds	r1, r7, r1
 800308a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800308c:	0011      	movs	r1, r2
 800308e:	18bb      	adds	r3, r7, r2
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a99      	ldr	r2, [pc, #612]	; (80032f8 <HAL_UART_IRQHandler+0x298>)
 8003094:	4013      	ands	r3, r2
 8003096:	2298      	movs	r2, #152	; 0x98
 8003098:	18bc      	adds	r4, r7, r2
 800309a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800309c:	18bb      	adds	r3, r7, r2
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d114      	bne.n	80030ce <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2220      	movs	r2, #32
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00f      	beq.n	80030ce <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ae:	183b      	adds	r3, r7, r0
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2220      	movs	r2, #32
 80030b4:	4013      	ands	r3, r2
 80030b6:	d00a      	beq.n	80030ce <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <HAL_UART_IRQHandler+0x62>
 80030c0:	e296      	b.n	80035f0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	0010      	movs	r0, r2
 80030ca:	4798      	blx	r3
      }
      return;
 80030cc:	e290      	b.n	80035f0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030ce:	2398      	movs	r3, #152	; 0x98
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d100      	bne.n	80030da <HAL_UART_IRQHandler+0x7a>
 80030d8:	e114      	b.n	8003304 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030da:	239c      	movs	r3, #156	; 0x9c
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2201      	movs	r2, #1
 80030e2:	4013      	ands	r3, r2
 80030e4:	d106      	bne.n	80030f4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030e6:	23a0      	movs	r3, #160	; 0xa0
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a83      	ldr	r2, [pc, #524]	; (80032fc <HAL_UART_IRQHandler+0x29c>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x94>
 80030f2:	e107      	b.n	8003304 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030f4:	23a4      	movs	r3, #164	; 0xa4
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	d012      	beq.n	8003126 <HAL_UART_IRQHandler+0xc6>
 8003100:	23a0      	movs	r3, #160	; 0xa0
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4013      	ands	r3, r2
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2201      	movs	r2, #1
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003126:	23a4      	movs	r3, #164	; 0xa4
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2202      	movs	r2, #2
 800312e:	4013      	ands	r3, r2
 8003130:	d011      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
 8003132:	239c      	movs	r3, #156	; 0x9c
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d00b      	beq.n	8003156 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2202      	movs	r2, #2
 8003144:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	589b      	ldr	r3, [r3, r2]
 800314c:	2204      	movs	r2, #4
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003156:	23a4      	movs	r3, #164	; 0xa4
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2204      	movs	r2, #4
 800315e:	4013      	ands	r3, r2
 8003160:	d011      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
 8003162:	239c      	movs	r3, #156	; 0x9c
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2201      	movs	r2, #1
 800316a:	4013      	ands	r3, r2
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2204      	movs	r2, #4
 8003174:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	589b      	ldr	r3, [r3, r2]
 800317c:	2202      	movs	r2, #2
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003186:	23a4      	movs	r3, #164	; 0xa4
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2208      	movs	r2, #8
 800318e:	4013      	ands	r3, r2
 8003190:	d017      	beq.n	80031c2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003192:	23a0      	movs	r3, #160	; 0xa0
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	4013      	ands	r3, r2
 800319c:	d105      	bne.n	80031aa <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800319e:	239c      	movs	r3, #156	; 0x9c
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2208      	movs	r2, #8
 80031b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	589b      	ldr	r3, [r3, r2]
 80031b8:	2208      	movs	r2, #8
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031c2:	23a4      	movs	r3, #164	; 0xa4
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	d013      	beq.n	80031f8 <HAL_UART_IRQHandler+0x198>
 80031d0:	23a0      	movs	r3, #160	; 0xa0
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	04db      	lsls	r3, r3, #19
 80031da:	4013      	ands	r3, r2
 80031dc:	d00c      	beq.n	80031f8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0112      	lsls	r2, r2, #4
 80031e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	589b      	ldr	r3, [r3, r2]
 80031ee:	2220      	movs	r2, #32
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2280      	movs	r2, #128	; 0x80
 80031fc:	589b      	ldr	r3, [r3, r2]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d100      	bne.n	8003204 <HAL_UART_IRQHandler+0x1a4>
 8003202:	e1f7      	b.n	80035f4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003204:	23a4      	movs	r3, #164	; 0xa4
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	d00e      	beq.n	800322e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003210:	23a0      	movs	r3, #160	; 0xa0
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2220      	movs	r2, #32
 8003218:	4013      	ands	r3, r2
 800321a:	d008      	beq.n	800322e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	0010      	movs	r0, r2
 800322c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	589b      	ldr	r3, [r3, r2]
 8003234:	2194      	movs	r1, #148	; 0x94
 8003236:	187a      	adds	r2, r7, r1
 8003238:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	4013      	ands	r3, r2
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d004      	beq.n	8003252 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003248:	187b      	adds	r3, r7, r1
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2228      	movs	r2, #40	; 0x28
 800324e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003250:	d047      	beq.n	80032e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fdab 	bl	8003db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2240      	movs	r2, #64	; 0x40
 8003262:	4013      	ands	r3, r2
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d137      	bne.n	80032d8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003268:	f3ef 8310 	mrs	r3, PRIMASK
 800326c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800326e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003270:	2090      	movs	r0, #144	; 0x90
 8003272:	183a      	adds	r2, r7, r0
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	2301      	movs	r3, #1
 8003278:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	438a      	bics	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
 8003292:	183b      	adds	r3, r7, r0
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800329a:	f383 8810 	msr	PRIMASK, r3
}
 800329e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d012      	beq.n	80032ce <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_UART_IRQHandler+0x2a0>)
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	0018      	movs	r0, r3
 80032b6:	f7fe fa23 	bl	8001700 <HAL_DMA_Abort_IT>
 80032ba:	1e03      	subs	r3, r0, #0
 80032bc:	d01a      	beq.n	80032f4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	0018      	movs	r0, r3
 80032ca:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	e012      	b.n	80032f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f9b5 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d6:	e00d      	b.n	80032f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 f9b0 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e008      	b.n	80032f4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 f9ab 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	2100      	movs	r1, #0
 80032f0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032f2:	e17f      	b.n	80035f4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f4:	46c0      	nop			; (mov r8, r8)
    return;
 80032f6:	e17d      	b.n	80035f4 <HAL_UART_IRQHandler+0x594>
 80032f8:	0000080f 	.word	0x0000080f
 80032fc:	04000120 	.word	0x04000120
 8003300:	08004057 	.word	0x08004057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003308:	2b01      	cmp	r3, #1
 800330a:	d000      	beq.n	800330e <HAL_UART_IRQHandler+0x2ae>
 800330c:	e131      	b.n	8003572 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800330e:	23a4      	movs	r3, #164	; 0xa4
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2210      	movs	r2, #16
 8003316:	4013      	ands	r3, r2
 8003318:	d100      	bne.n	800331c <HAL_UART_IRQHandler+0x2bc>
 800331a:	e12a      	b.n	8003572 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800331c:	23a0      	movs	r3, #160	; 0xa0
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	4013      	ands	r3, r2
 8003326:	d100      	bne.n	800332a <HAL_UART_IRQHandler+0x2ca>
 8003328:	e123      	b.n	8003572 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2210      	movs	r2, #16
 8003330:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2240      	movs	r2, #64	; 0x40
 800333a:	4013      	ands	r3, r2
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d000      	beq.n	8003342 <HAL_UART_IRQHandler+0x2e2>
 8003340:	e09b      	b.n	800347a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	217e      	movs	r1, #126	; 0x7e
 800334c:	187b      	adds	r3, r7, r1
 800334e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003350:	187b      	adds	r3, r7, r1
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d100      	bne.n	800335a <HAL_UART_IRQHandler+0x2fa>
 8003358:	e14e      	b.n	80035f8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2258      	movs	r2, #88	; 0x58
 800335e:	5a9b      	ldrh	r3, [r3, r2]
 8003360:	187a      	adds	r2, r7, r1
 8003362:	8812      	ldrh	r2, [r2, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d300      	bcc.n	800336a <HAL_UART_IRQHandler+0x30a>
 8003368:	e146      	b.n	80035f8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	187a      	adds	r2, r7, r1
 800336e:	215a      	movs	r1, #90	; 0x5a
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d06e      	beq.n	800345c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800337e:	f3ef 8310 	mrs	r3, PRIMASK
 8003382:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003386:	67bb      	str	r3, [r7, #120]	; 0x78
 8003388:	2301      	movs	r3, #1
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	f383 8810 	msr	PRIMASK, r3
}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	499a      	ldr	r1, [pc, #616]	; (8003608 <HAL_UART_IRQHandler+0x5a8>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	f383 8810 	msr	PRIMASK, r3
}
 80033ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	677b      	str	r3, [r7, #116]	; 0x74
 80033ba:	2301      	movs	r3, #1
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
 80033d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e2:	f3ef 8310 	mrs	r3, PRIMASK
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ea:	673b      	str	r3, [r7, #112]	; 0x70
 80033ec:	2301      	movs	r3, #1
 80033ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033f2:	f383 8810 	msr	PRIMASK, r3
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	438a      	bics	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003420:	f3ef 8310 	mrs	r3, PRIMASK
 8003424:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003426:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800342a:	2301      	movs	r3, #1
 800342c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2110      	movs	r1, #16
 8003442:	438a      	bics	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003448:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	0018      	movs	r0, r3
 8003458:	f7fe f91a 	bl	8001690 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2258      	movs	r2, #88	; 0x58
 8003460:	5a9a      	ldrh	r2, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	215a      	movs	r1, #90	; 0x5a
 8003466:	5a5b      	ldrh	r3, [r3, r1]
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0011      	movs	r1, r2
 8003472:	0018      	movs	r0, r3
 8003474:	f7fd fc2a 	bl	8000ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003478:	e0be      	b.n	80035f8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2258      	movs	r2, #88	; 0x58
 800347e:	5a99      	ldrh	r1, [r3, r2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	225a      	movs	r2, #90	; 0x5a
 8003484:	5a9b      	ldrh	r3, [r3, r2]
 8003486:	b29a      	uxth	r2, r3
 8003488:	208e      	movs	r0, #142	; 0x8e
 800348a:	183b      	adds	r3, r7, r0
 800348c:	1a8a      	subs	r2, r1, r2
 800348e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	225a      	movs	r2, #90	; 0x5a
 8003494:	5a9b      	ldrh	r3, [r3, r2]
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d100      	bne.n	800349e <HAL_UART_IRQHandler+0x43e>
 800349c:	e0ae      	b.n	80035fc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d100      	bne.n	80034a8 <HAL_UART_IRQHandler+0x448>
 80034a6:	e0a9      	b.n	80035fc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ae:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b0:	2488      	movs	r4, #136	; 0x88
 80034b2:	193a      	adds	r2, r7, r4
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	2301      	movs	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	494f      	ldr	r1, [pc, #316]	; (800360c <HAL_UART_IRQHandler+0x5ac>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e0:	f3ef 8310 	mrs	r3, PRIMASK
 80034e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80034e6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	2484      	movs	r4, #132	; 0x84
 80034ea:	193a      	adds	r2, r7, r4
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	2301      	movs	r3, #1
 80034f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	438a      	bics	r2, r1
 8003508:	609a      	str	r2, [r3, #8]
 800350a:	193b      	adds	r3, r7, r4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8310 	mrs	r3, PRIMASK
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	2480      	movs	r4, #128	; 0x80
 8003534:	193a      	adds	r2, r7, r4
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	2301      	movs	r3, #1
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	f383 8810 	msr	PRIMASK, r3
}
 8003542:	46c0      	nop			; (mov r8, r8)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2110      	movs	r1, #16
 8003550:	438a      	bics	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	193b      	adds	r3, r7, r4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003562:	183b      	adds	r3, r7, r0
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0011      	movs	r1, r2
 800356a:	0018      	movs	r0, r3
 800356c:	f7fd fbae 	bl	8000ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003570:	e044      	b.n	80035fc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003572:	23a4      	movs	r3, #164	; 0xa4
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	035b      	lsls	r3, r3, #13
 800357c:	4013      	ands	r3, r2
 800357e:	d010      	beq.n	80035a2 <HAL_UART_IRQHandler+0x542>
 8003580:	239c      	movs	r3, #156	; 0x9c
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	2380      	movs	r3, #128	; 0x80
 8003588:	03db      	lsls	r3, r3, #15
 800358a:	4013      	ands	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	0352      	lsls	r2, r2, #13
 8003596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	0018      	movs	r0, r3
 800359c:	f000 fd9d 	bl	80040da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a0:	e02f      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035a2:	23a4      	movs	r3, #164	; 0xa4
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	4013      	ands	r3, r2
 80035ac:	d00f      	beq.n	80035ce <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ae:	23a0      	movs	r3, #160	; 0xa0
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	4013      	ands	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01e      	beq.n	8003600 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	0010      	movs	r0, r2
 80035ca:	4798      	blx	r3
    }
    return;
 80035cc:	e018      	b.n	8003600 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ce:	23a4      	movs	r3, #164	; 0xa4
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2240      	movs	r2, #64	; 0x40
 80035d6:	4013      	ands	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_UART_IRQHandler+0x5a2>
 80035da:	23a0      	movs	r3, #160	; 0xa0
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2240      	movs	r2, #64	; 0x40
 80035e2:	4013      	ands	r3, r2
 80035e4:	d00d      	beq.n	8003602 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f000 fd4b 	bl	8004084 <UART_EndTransmit_IT>
    return;
 80035ee:	e008      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
      return;
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	e006      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
    return;
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	e004      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
      return;
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	e002      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
      return;
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	e000      	b.n	8003602 <HAL_UART_IRQHandler+0x5a2>
    return;
 8003600:	46c0      	nop			; (mov r8, r8)
  }

}
 8003602:	46bd      	mov	sp, r7
 8003604:	b02b      	add	sp, #172	; 0xac
 8003606:	bd90      	pop	{r4, r7, pc}
 8003608:	fffffeff 	.word	0xfffffeff
 800360c:	fffffedf 	.word	0xfffffedf

08003610 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	231e      	movs	r3, #30
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a84      	ldr	r2, [pc, #528]	; (8003890 <UART_SetConfig+0x240>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4a7f      	ldr	r2, [pc, #508]	; (8003894 <UART_SetConfig+0x244>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a76      	ldr	r2, [pc, #472]	; (8003898 <UART_SetConfig+0x248>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036cc:	4b73      	ldr	r3, [pc, #460]	; (800389c <UART_SetConfig+0x24c>)
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2203      	movs	r2, #3
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d00d      	beq.n	80036f4 <UART_SetConfig+0xa4>
 80036d8:	d81b      	bhi.n	8003712 <UART_SetConfig+0xc2>
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d014      	beq.n	8003708 <UART_SetConfig+0xb8>
 80036de:	d818      	bhi.n	8003712 <UART_SetConfig+0xc2>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <UART_SetConfig+0x9a>
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d00a      	beq.n	80036fe <UART_SetConfig+0xae>
 80036e8:	e013      	b.n	8003712 <UART_SetConfig+0xc2>
 80036ea:	231f      	movs	r3, #31
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
 80036f2:	e012      	b.n	800371a <UART_SetConfig+0xca>
 80036f4:	231f      	movs	r3, #31
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e00d      	b.n	800371a <UART_SetConfig+0xca>
 80036fe:	231f      	movs	r3, #31
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2204      	movs	r2, #4
 8003704:	701a      	strb	r2, [r3, #0]
 8003706:	e008      	b.n	800371a <UART_SetConfig+0xca>
 8003708:	231f      	movs	r3, #31
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2208      	movs	r2, #8
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e003      	b.n	800371a <UART_SetConfig+0xca>
 8003712:	231f      	movs	r3, #31
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2210      	movs	r2, #16
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	429a      	cmp	r2, r3
 8003726:	d15d      	bne.n	80037e4 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003728:	231f      	movs	r3, #31
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b08      	cmp	r3, #8
 8003730:	d015      	beq.n	800375e <UART_SetConfig+0x10e>
 8003732:	dc18      	bgt.n	8003766 <UART_SetConfig+0x116>
 8003734:	2b04      	cmp	r3, #4
 8003736:	d00d      	beq.n	8003754 <UART_SetConfig+0x104>
 8003738:	dc15      	bgt.n	8003766 <UART_SetConfig+0x116>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0xf4>
 800373e:	2b02      	cmp	r3, #2
 8003740:	d005      	beq.n	800374e <UART_SetConfig+0xfe>
 8003742:	e010      	b.n	8003766 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003744:	f7ff faaa 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003748:	0003      	movs	r3, r0
 800374a:	61bb      	str	r3, [r7, #24]
        break;
 800374c:	e012      	b.n	8003774 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800374e:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <UART_SetConfig+0x250>)
 8003750:	61bb      	str	r3, [r7, #24]
        break;
 8003752:	e00f      	b.n	8003774 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003754:	f7ff fa34 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8003758:	0003      	movs	r3, r0
 800375a:	61bb      	str	r3, [r7, #24]
        break;
 800375c:	e00a      	b.n	8003774 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e006      	b.n	8003774 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800376a:	231e      	movs	r3, #30
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
        break;
 8003772:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d100      	bne.n	800377c <UART_SetConfig+0x12c>
 800377a:	e07b      	b.n	8003874 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	005a      	lsls	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	18d2      	adds	r2, r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0019      	movs	r1, r3
 800378e:	0010      	movs	r0, r2
 8003790:	f7fc fccc 	bl	800012c <__udivsi3>
 8003794:	0003      	movs	r3, r0
 8003796:	b29b      	uxth	r3, r3
 8003798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d91c      	bls.n	80037da <UART_SetConfig+0x18a>
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	025b      	lsls	r3, r3, #9
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d217      	bcs.n	80037da <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	200e      	movs	r0, #14
 80037b0:	183b      	adds	r3, r7, r0
 80037b2:	210f      	movs	r1, #15
 80037b4:	438a      	bics	r2, r1
 80037b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2207      	movs	r2, #7
 80037c0:	4013      	ands	r3, r2
 80037c2:	b299      	uxth	r1, r3
 80037c4:	183b      	adds	r3, r7, r0
 80037c6:	183a      	adds	r2, r7, r0
 80037c8:	8812      	ldrh	r2, [r2, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	183a      	adds	r2, r7, r0
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e04c      	b.n	8003874 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80037da:	231e      	movs	r3, #30
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	2201      	movs	r2, #1
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e047      	b.n	8003874 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d015      	beq.n	800381a <UART_SetConfig+0x1ca>
 80037ee:	dc18      	bgt.n	8003822 <UART_SetConfig+0x1d2>
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d00d      	beq.n	8003810 <UART_SetConfig+0x1c0>
 80037f4:	dc15      	bgt.n	8003822 <UART_SetConfig+0x1d2>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <UART_SetConfig+0x1b0>
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d005      	beq.n	800380a <UART_SetConfig+0x1ba>
 80037fe:	e010      	b.n	8003822 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003800:	f7ff fa4c 	bl	8002c9c <HAL_RCC_GetPCLK1Freq>
 8003804:	0003      	movs	r3, r0
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e012      	b.n	8003830 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <UART_SetConfig+0x250>)
 800380c:	61bb      	str	r3, [r7, #24]
        break;
 800380e:	e00f      	b.n	8003830 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003810:	f7ff f9d6 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8003814:	0003      	movs	r3, r0
 8003816:	61bb      	str	r3, [r7, #24]
        break;
 8003818:	e00a      	b.n	8003830 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800381a:	2380      	movs	r3, #128	; 0x80
 800381c:	021b      	lsls	r3, r3, #8
 800381e:	61bb      	str	r3, [r7, #24]
        break;
 8003820:	e006      	b.n	8003830 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003826:	231e      	movs	r3, #30
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
        break;
 800382e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01e      	beq.n	8003874 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	085a      	lsrs	r2, r3, #1
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	18d2      	adds	r2, r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	0019      	movs	r1, r3
 8003846:	0010      	movs	r0, r2
 8003848:	f7fc fc70 	bl	800012c <__udivsi3>
 800384c:	0003      	movs	r3, r0
 800384e:	b29b      	uxth	r3, r3
 8003850:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d909      	bls.n	800386c <UART_SetConfig+0x21c>
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	025b      	lsls	r3, r3, #9
 800385e:	429a      	cmp	r2, r3
 8003860:	d204      	bcs.n	800386c <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e003      	b.n	8003874 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	231e      	movs	r3, #30
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003880:	231e      	movs	r3, #30
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	781b      	ldrb	r3, [r3, #0]
}
 8003886:	0018      	movs	r0, r3
 8003888:	46bd      	mov	sp, r7
 800388a:	b008      	add	sp, #32
 800388c:	bd80      	pop	{r7, pc}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	ffff69f3 	.word	0xffff69f3
 8003894:	ffffcfff 	.word	0xffffcfff
 8003898:	fffff4ff 	.word	0xfffff4ff
 800389c:	40021000 	.word	0x40021000
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	d00b      	beq.n	80038ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <UART_AdvFeatureConfig+0x144>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	2202      	movs	r2, #2
 80038d4:	4013      	ands	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a43      	ldr	r2, [pc, #268]	; (80039ec <UART_AdvFeatureConfig+0x148>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2204      	movs	r2, #4
 80038f6:	4013      	ands	r3, r2
 80038f8:	d00b      	beq.n	8003912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a3b      	ldr	r2, [pc, #236]	; (80039f0 <UART_AdvFeatureConfig+0x14c>)
 8003902:	4013      	ands	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2208      	movs	r2, #8
 8003918:	4013      	ands	r3, r2
 800391a:	d00b      	beq.n	8003934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a34      	ldr	r2, [pc, #208]	; (80039f4 <UART_AdvFeatureConfig+0x150>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2210      	movs	r2, #16
 800393a:	4013      	ands	r3, r2
 800393c:	d00b      	beq.n	8003956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a2c      	ldr	r2, [pc, #176]	; (80039f8 <UART_AdvFeatureConfig+0x154>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2220      	movs	r2, #32
 800395c:	4013      	ands	r3, r2
 800395e:	d00b      	beq.n	8003978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4a25      	ldr	r2, [pc, #148]	; (80039fc <UART_AdvFeatureConfig+0x158>)
 8003968:	4013      	ands	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4013      	ands	r3, r2
 8003980:	d01d      	beq.n	80039be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	4a1d      	ldr	r2, [pc, #116]	; (8003a00 <UART_AdvFeatureConfig+0x15c>)
 800398a:	4013      	ands	r3, r2
 800398c:	0019      	movs	r1, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	035b      	lsls	r3, r3, #13
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d10b      	bne.n	80039be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <UART_AdvFeatureConfig+0x160>)
 80039ae:	4013      	ands	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	4013      	ands	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <UART_AdvFeatureConfig+0x164>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	fffdffff 	.word	0xfffdffff
 80039ec:	fffeffff 	.word	0xfffeffff
 80039f0:	fffbffff 	.word	0xfffbffff
 80039f4:	ffff7fff 	.word	0xffff7fff
 80039f8:	ffffefff 	.word	0xffffefff
 80039fc:	ffffdfff 	.word	0xffffdfff
 8003a00:	ffefffff 	.word	0xffefffff
 8003a04:	ff9fffff 	.word	0xff9fffff
 8003a08:	fff7ffff 	.word	0xfff7ffff

08003a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	2100      	movs	r1, #0
 8003a1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a1c:	f7fd fc7e 	bl	800131c <HAL_GetTick>
 8003a20:	0003      	movs	r3, r0
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d10c      	bne.n	8003a4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	0391      	lsls	r1, r2, #14
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4a17      	ldr	r2, [pc, #92]	; (8003a98 <UART_CheckIdleState+0x8c>)
 8003a3c:	9200      	str	r2, [sp, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f000 f82c 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 8003a44:	1e03      	subs	r3, r0, #0
 8003a46:	d001      	beq.n	8003a4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e021      	b.n	8003a90 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2204      	movs	r2, #4
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d10c      	bne.n	8003a74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	03d1      	lsls	r1, r2, #15
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <UART_CheckIdleState+0x8c>)
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f000 f818 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d001      	beq.n	8003a74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e00d      	b.n	8003a90 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2274      	movs	r2, #116	; 0x74
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b004      	add	sp, #16
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	01ffffff 	.word	0x01ffffff

08003a9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b094      	sub	sp, #80	; 0x50
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	e0a3      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	d100      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ab4:	e09f      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd fc31 	bl	800131c <HAL_GetTick>
 8003aba:	0002      	movs	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13d      	bne.n	8003b48 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			; (mov r8, r8)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	494c      	ldr	r1, [pc, #304]	; (8003c20 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003aee:	400a      	ands	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afe:	f3ef 8310 	mrs	r3, PRIMASK
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
 8003b08:	2301      	movs	r3, #1
 8003b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	f383 8810 	msr	PRIMASK, r3
}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2101      	movs	r1, #1
 8003b20:	438a      	bics	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2274      	movs	r2, #116	; 0x74
 8003b40:	2100      	movs	r1, #0
 8003b42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e067      	b.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	4013      	ands	r3, r2
 8003b52:	d050      	beq.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69da      	ldr	r2, [r3, #28]
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	401a      	ands	r2, r3
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d146      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b72:	f3ef 8310 	mrs	r3, PRIMASK
 8003b76:	613b      	str	r3, [r7, #16]
  return(result);
 8003b78:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f383 8810 	msr	PRIMASK, r3
}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4923      	ldr	r1, [pc, #140]	; (8003c20 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ba8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003baa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bae:	2301      	movs	r3, #1
 8003bb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	f383 8810 	msr	PRIMASK, r3
}
 8003bd4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2220      	movs	r2, #32
 8003be0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	2120      	movs	r1, #32
 8003be8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2274      	movs	r2, #116	; 0x74
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e010      	b.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	425a      	negs	r2, r3
 8003c06:	4153      	adcs	r3, r2
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	1dfb      	adds	r3, r7, #7
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d100      	bne.n	8003c16 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c14:	e74b      	b.n	8003aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	0018      	movs	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b014      	add	sp, #80	; 0x50
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	fffffe5f 	.word	0xfffffe5f

08003c24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b090      	sub	sp, #64	; 0x40
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	1dbb      	adds	r3, r7, #6
 8003c30:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1dba      	adds	r2, r7, #6
 8003c3c:	2158      	movs	r1, #88	; 0x58
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	2100      	movs	r1, #0
 8003c48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2222      	movs	r2, #34	; 0x22
 8003c4e:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d02b      	beq.n	8003cb0 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5c:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <UART_Start_Receive_DMA+0x138>)
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a3e      	ldr	r2, [pc, #248]	; (8003d60 <UART_Start_Receive_DMA+0x13c>)
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6c:	4a3d      	ldr	r2, [pc, #244]	; (8003d64 <UART_Start_Receive_DMA+0x140>)
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c74:	2200      	movs	r2, #0
 8003c76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3324      	adds	r3, #36	; 0x24
 8003c82:	0019      	movs	r1, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	001a      	movs	r2, r3
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	f7fd fc99 	bl	80015c4 <HAL_DMA_Start_IT>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d00c      	beq.n	8003cb0 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2280      	movs	r2, #128	; 0x80
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2274      	movs	r2, #116	; 0x74
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e050      	b.n	8003d52 <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2274      	movs	r2, #116	; 0x74
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	613b      	str	r3, [r7, #16]
  return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	0049      	lsls	r1, r1, #1
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f383 8810 	msr	PRIMASK, r3
}
 8003cea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cec:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cf2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	f383 8810 	msr	PRIMASK, r3
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	609a      	str	r2, [r3, #8]
 8003d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d26:	637b      	str	r3, [r7, #52]	; 0x34
 8003d28:	2301      	movs	r3, #1
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b010      	add	sp, #64	; 0x40
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	08003e75 	.word	0x08003e75
 8003d60:	08003f99 	.word	0x08003f99
 8003d64:	08003fd5 	.word	0x08003fd5

08003d68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d70:	f3ef 8310 	mrs	r3, PRIMASK
 8003d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d76:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	21c0      	movs	r1, #192	; 0xc0
 8003d92:	438a      	bics	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08e      	sub	sp, #56	; 0x38
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4925      	ldr	r1, [pc, #148]	; (8003e70 <UART_EndRxTransfer+0xc0>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f383 8810 	msr	PRIMASK, r3
}
 8003de8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dea:	f3ef 8310 	mrs	r3, PRIMASK
 8003dee:	623b      	str	r3, [r7, #32]
  return(result);
 8003df0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f383 8810 	msr	PRIMASK, r3
}
 8003e1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d118      	bne.n	8003e56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e24:	f3ef 8310 	mrs	r3, PRIMASK
 8003e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e2e:	2301      	movs	r3, #1
 8003e30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f383 8810 	msr	PRIMASK, r3
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2110      	movs	r1, #16
 8003e46:	438a      	bics	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b00e      	add	sp, #56	; 0x38
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	fffffedf 	.word	0xfffffedf

08003e74 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b094      	sub	sp, #80	; 0x50
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d06e      	beq.n	8003f68 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8003e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8c:	225a      	movs	r2, #90	; 0x5a
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e92:	f3ef 8310 	mrs	r3, PRIMASK
 8003e96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e98:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4938      	ldr	r1, [pc, #224]	; (8003f94 <UART_DMAReceiveCplt+0x120>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f383 8810 	msr	PRIMASK, r3
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ece:	2301      	movs	r3, #1
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	f383 8810 	msr	PRIMASK, r3
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	438a      	bics	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40
 8003f00:	2301      	movs	r3, #1
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	f383 8810 	msr	PRIMASK, r3
}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2140      	movs	r1, #64	; 0x40
 8003f18:	438a      	bics	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d118      	bne.n	8003f68 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f36:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f40:	2301      	movs	r3, #1
 8003f42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2110      	movs	r1, #16
 8003f58:	438a      	bics	r2, r1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d108      	bne.n	8003f82 <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f72:	2258      	movs	r2, #88	; 0x58
 8003f74:	5a9a      	ldrh	r2, [r3, r2]
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fc fea6 	bl	8000ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f80:	e003      	b.n	8003f8a <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 8003f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7ff fb4b 	bl	8003620 <HAL_UART_RxCpltCallback>
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b014      	add	sp, #80	; 0x50
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	fffffeff 	.word	0xfffffeff

08003f98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10a      	bne.n	8003fc4 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2258      	movs	r2, #88	; 0x58
 8003fb2:	5a9b      	ldrh	r3, [r3, r2]
 8003fb4:	085b      	lsrs	r3, r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fc fe85 	bl	8000ccc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc2:	e003      	b.n	8003fcc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7ff fb32 	bl	8003630 <HAL_UART_RxHalfCpltCallback>
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d10a      	bne.n	8004012 <UART_DMAError+0x3e>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b21      	cmp	r3, #33	; 0x21
 8004000:	d107      	bne.n	8004012 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2252      	movs	r2, #82	; 0x52
 8004006:	2100      	movs	r1, #0
 8004008:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff feab 	bl	8003d68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4013      	ands	r3, r2
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d10a      	bne.n	8004036 <UART_DMAError+0x62>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b22      	cmp	r3, #34	; 0x22
 8004024:	d107      	bne.n	8004036 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	225a      	movs	r2, #90	; 0x5a
 800402a:	2100      	movs	r1, #0
 800402c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff febd 	bl	8003db0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	589b      	ldr	r3, [r3, r2]
 800403c:	2210      	movs	r2, #16
 800403e:	431a      	orrs	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0018      	movs	r0, r3
 800404a:	f7ff faf9 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b006      	add	sp, #24
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	225a      	movs	r2, #90	; 0x5a
 8004068:	2100      	movs	r1, #0
 800406a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2252      	movs	r2, #82	; 0x52
 8004070:	2100      	movs	r1, #0
 8004072:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff fae2 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b004      	add	sp, #16
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8310 	mrs	r3, PRIMASK
 8004090:	60bb      	str	r3, [r7, #8]
  return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	2301      	movs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2140      	movs	r1, #64	; 0x40
 80040ae:	438a      	bics	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fa9f 	bl	8003610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b002      	add	sp, #8
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040ea:	b5b0      	push	{r4, r5, r7, lr}
 80040ec:	b08a      	sub	sp, #40	; 0x28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	1dbb      	adds	r3, r7, #6
 80040f6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d15e      	bne.n	80041be <HAL_UARTEx_ReceiveToIdle_DMA+0xd4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004106:	1dbb      	adds	r3, r7, #6
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e056      	b.n	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	015b      	lsls	r3, r3, #5
 800411a:	429a      	cmp	r2, r3
 800411c:	d109      	bne.n	8004132 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2201      	movs	r2, #1
 800412a:	4013      	ands	r3, r2
 800412c:	d001      	beq.n	8004132 <HAL_UARTEx_ReceiveToIdle_DMA+0x48>
      {
        return  HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e046      	b.n	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
      }
    }

    __HAL_LOCK(huart);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2274      	movs	r2, #116	; 0x74
 8004136:	5c9b      	ldrb	r3, [r3, r2]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_UARTEx_ReceiveToIdle_DMA+0x56>
 800413c:	2302      	movs	r3, #2
 800413e:	e03f      	b.n	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2274      	movs	r2, #116	; 0x74
 8004144:	2101      	movs	r1, #1
 8004146:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2201      	movs	r2, #1
 800414c:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800414e:	2527      	movs	r5, #39	; 0x27
 8004150:	197c      	adds	r4, r7, r5
 8004152:	1dbb      	adds	r3, r7, #6
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fd62 	bl	8003c24 <UART_Start_Receive_DMA>
 8004160:	0003      	movs	r3, r0
 8004162:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004164:	197b      	adds	r3, r7, r5
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d124      	bne.n	80041b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	2b01      	cmp	r3, #1
 8004172:	d11c      	bne.n	80041ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc4>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2210      	movs	r2, #16
 800417a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417c:	f3ef 8310 	mrs	r3, PRIMASK
 8004180:	617b      	str	r3, [r7, #20]
  return(result);
 8004182:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2110      	movs	r1, #16
 800419e:	430a      	orrs	r2, r1
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f383 8810 	msr	PRIMASK, r3
}
 80041ac:	e003      	b.n	80041b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xcc>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80041ae:	2327      	movs	r3, #39	; 0x27
 80041b0:	18fb      	adds	r3, r7, r3
 80041b2:	2201      	movs	r2, #1
 80041b4:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80041b6:	2327      	movs	r3, #39	; 0x27
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	e000      	b.n	80041c0 <HAL_UARTEx_ReceiveToIdle_DMA+0xd6>
  }
  else
  {
    return HAL_BUSY;
 80041be:	2302      	movs	r3, #2
  }
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b00a      	add	sp, #40	; 0x28
 80041c6:	bdb0      	pop	{r4, r5, r7, pc}

080041c8 <__errno>:
 80041c8:	4b01      	ldr	r3, [pc, #4]	; (80041d0 <__errno+0x8>)
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	4770      	bx	lr
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000010 	.word	0x20000010

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	2600      	movs	r6, #0
 80041d8:	4d0c      	ldr	r5, [pc, #48]	; (800420c <__libc_init_array+0x38>)
 80041da:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041dc:	1b64      	subs	r4, r4, r5
 80041de:	10a4      	asrs	r4, r4, #2
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	2600      	movs	r6, #0
 80041e6:	f000 fc8b 	bl	8004b00 <_init>
 80041ea:	4d0a      	ldr	r5, [pc, #40]	; (8004214 <__libc_init_array+0x40>)
 80041ec:	4c0a      	ldr	r4, [pc, #40]	; (8004218 <__libc_init_array+0x44>)
 80041ee:	1b64      	subs	r4, r4, r5
 80041f0:	10a4      	asrs	r4, r4, #2
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	00b3      	lsls	r3, r6, #2
 80041fa:	58eb      	ldr	r3, [r5, r3]
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	00b3      	lsls	r3, r6, #2
 8004204:	58eb      	ldr	r3, [r5, r3]
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08004bfc 	.word	0x08004bfc
 8004210:	08004bfc 	.word	0x08004bfc
 8004214:	08004bfc 	.word	0x08004bfc
 8004218:	08004c00 	.word	0x08004c00

0800421c <memcpy>:
 800421c:	2300      	movs	r3, #0
 800421e:	b510      	push	{r4, lr}
 8004220:	429a      	cmp	r2, r3
 8004222:	d100      	bne.n	8004226 <memcpy+0xa>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	5ccc      	ldrb	r4, [r1, r3]
 8004228:	54c4      	strb	r4, [r0, r3]
 800422a:	3301      	adds	r3, #1
 800422c:	e7f8      	b.n	8004220 <memcpy+0x4>

0800422e <memset>:
 800422e:	0003      	movs	r3, r0
 8004230:	1882      	adds	r2, r0, r2
 8004232:	4293      	cmp	r3, r2
 8004234:	d100      	bne.n	8004238 <memset+0xa>
 8004236:	4770      	bx	lr
 8004238:	7019      	strb	r1, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	e7f9      	b.n	8004232 <memset+0x4>
	...

08004240 <siprintf>:
 8004240:	b40e      	push	{r1, r2, r3}
 8004242:	b500      	push	{lr}
 8004244:	490b      	ldr	r1, [pc, #44]	; (8004274 <siprintf+0x34>)
 8004246:	b09c      	sub	sp, #112	; 0x70
 8004248:	ab1d      	add	r3, sp, #116	; 0x74
 800424a:	9002      	str	r0, [sp, #8]
 800424c:	9006      	str	r0, [sp, #24]
 800424e:	9107      	str	r1, [sp, #28]
 8004250:	9104      	str	r1, [sp, #16]
 8004252:	4809      	ldr	r0, [pc, #36]	; (8004278 <siprintf+0x38>)
 8004254:	4909      	ldr	r1, [pc, #36]	; (800427c <siprintf+0x3c>)
 8004256:	cb04      	ldmia	r3!, {r2}
 8004258:	9105      	str	r1, [sp, #20]
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	a902      	add	r1, sp, #8
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f000 f870 	bl	8004344 <_svfiprintf_r>
 8004264:	2300      	movs	r3, #0
 8004266:	9a02      	ldr	r2, [sp, #8]
 8004268:	7013      	strb	r3, [r2, #0]
 800426a:	b01c      	add	sp, #112	; 0x70
 800426c:	bc08      	pop	{r3}
 800426e:	b003      	add	sp, #12
 8004270:	4718      	bx	r3
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	7fffffff 	.word	0x7fffffff
 8004278:	20000010 	.word	0x20000010
 800427c:	ffff0208 	.word	0xffff0208

08004280 <__ssputs_r>:
 8004280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004282:	688e      	ldr	r6, [r1, #8]
 8004284:	b085      	sub	sp, #20
 8004286:	0007      	movs	r7, r0
 8004288:	000c      	movs	r4, r1
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	429e      	cmp	r6, r3
 8004290:	d83c      	bhi.n	800430c <__ssputs_r+0x8c>
 8004292:	2390      	movs	r3, #144	; 0x90
 8004294:	898a      	ldrh	r2, [r1, #12]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	421a      	tst	r2, r3
 800429a:	d034      	beq.n	8004306 <__ssputs_r+0x86>
 800429c:	6909      	ldr	r1, [r1, #16]
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	6960      	ldr	r0, [r4, #20]
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	2303      	movs	r3, #3
 80042a8:	4343      	muls	r3, r0
 80042aa:	0fdd      	lsrs	r5, r3, #31
 80042ac:	18ed      	adds	r5, r5, r3
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	9802      	ldr	r0, [sp, #8]
 80042b2:	3301      	adds	r3, #1
 80042b4:	181b      	adds	r3, r3, r0
 80042b6:	106d      	asrs	r5, r5, #1
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	d900      	bls.n	80042be <__ssputs_r+0x3e>
 80042bc:	001d      	movs	r5, r3
 80042be:	0553      	lsls	r3, r2, #21
 80042c0:	d532      	bpl.n	8004328 <__ssputs_r+0xa8>
 80042c2:	0029      	movs	r1, r5
 80042c4:	0038      	movs	r0, r7
 80042c6:	f000 fb49 	bl	800495c <_malloc_r>
 80042ca:	1e06      	subs	r6, r0, #0
 80042cc:	d109      	bne.n	80042e2 <__ssputs_r+0x62>
 80042ce:	230c      	movs	r3, #12
 80042d0:	603b      	str	r3, [r7, #0]
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	2001      	movs	r0, #1
 80042d6:	89a2      	ldrh	r2, [r4, #12]
 80042d8:	4240      	negs	r0, r0
 80042da:	4313      	orrs	r3, r2
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	b005      	add	sp, #20
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042e2:	9a02      	ldr	r2, [sp, #8]
 80042e4:	6921      	ldr	r1, [r4, #16]
 80042e6:	f7ff ff99 	bl	800421c <memcpy>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <__ssputs_r+0xc0>)
 80042ee:	401a      	ands	r2, r3
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	4313      	orrs	r3, r2
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	9b02      	ldr	r3, [sp, #8]
 80042f8:	6126      	str	r6, [r4, #16]
 80042fa:	18f6      	adds	r6, r6, r3
 80042fc:	6026      	str	r6, [r4, #0]
 80042fe:	6165      	str	r5, [r4, #20]
 8004300:	9e01      	ldr	r6, [sp, #4]
 8004302:	1aed      	subs	r5, r5, r3
 8004304:	60a5      	str	r5, [r4, #8]
 8004306:	9b01      	ldr	r3, [sp, #4]
 8004308:	429e      	cmp	r6, r3
 800430a:	d900      	bls.n	800430e <__ssputs_r+0x8e>
 800430c:	9e01      	ldr	r6, [sp, #4]
 800430e:	0032      	movs	r2, r6
 8004310:	9903      	ldr	r1, [sp, #12]
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	f000 faa3 	bl	800485e <memmove>
 8004318:	68a3      	ldr	r3, [r4, #8]
 800431a:	2000      	movs	r0, #0
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	199e      	adds	r6, r3, r6
 8004324:	6026      	str	r6, [r4, #0]
 8004326:	e7da      	b.n	80042de <__ssputs_r+0x5e>
 8004328:	002a      	movs	r2, r5
 800432a:	0038      	movs	r0, r7
 800432c:	f000 fb8c 	bl	8004a48 <_realloc_r>
 8004330:	1e06      	subs	r6, r0, #0
 8004332:	d1e0      	bne.n	80042f6 <__ssputs_r+0x76>
 8004334:	0038      	movs	r0, r7
 8004336:	6921      	ldr	r1, [r4, #16]
 8004338:	f000 faa4 	bl	8004884 <_free_r>
 800433c:	e7c7      	b.n	80042ce <__ssputs_r+0x4e>
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	fffffb7f 	.word	0xfffffb7f

08004344 <_svfiprintf_r>:
 8004344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004346:	b0a1      	sub	sp, #132	; 0x84
 8004348:	9003      	str	r0, [sp, #12]
 800434a:	001d      	movs	r5, r3
 800434c:	898b      	ldrh	r3, [r1, #12]
 800434e:	000f      	movs	r7, r1
 8004350:	0016      	movs	r6, r2
 8004352:	061b      	lsls	r3, r3, #24
 8004354:	d511      	bpl.n	800437a <_svfiprintf_r+0x36>
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10e      	bne.n	800437a <_svfiprintf_r+0x36>
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	f000 fafd 	bl	800495c <_malloc_r>
 8004362:	6038      	str	r0, [r7, #0]
 8004364:	6138      	str	r0, [r7, #16]
 8004366:	2800      	cmp	r0, #0
 8004368:	d105      	bne.n	8004376 <_svfiprintf_r+0x32>
 800436a:	230c      	movs	r3, #12
 800436c:	9a03      	ldr	r2, [sp, #12]
 800436e:	3801      	subs	r0, #1
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	b021      	add	sp, #132	; 0x84
 8004374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004376:	2340      	movs	r3, #64	; 0x40
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	ac08      	add	r4, sp, #32
 800437e:	6163      	str	r3, [r4, #20]
 8004380:	3320      	adds	r3, #32
 8004382:	7663      	strb	r3, [r4, #25]
 8004384:	3310      	adds	r3, #16
 8004386:	76a3      	strb	r3, [r4, #26]
 8004388:	9507      	str	r5, [sp, #28]
 800438a:	0035      	movs	r5, r6
 800438c:	782b      	ldrb	r3, [r5, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <_svfiprintf_r+0x52>
 8004392:	2b25      	cmp	r3, #37	; 0x25
 8004394:	d147      	bne.n	8004426 <_svfiprintf_r+0xe2>
 8004396:	1bab      	subs	r3, r5, r6
 8004398:	9305      	str	r3, [sp, #20]
 800439a:	42b5      	cmp	r5, r6
 800439c:	d00c      	beq.n	80043b8 <_svfiprintf_r+0x74>
 800439e:	0032      	movs	r2, r6
 80043a0:	0039      	movs	r1, r7
 80043a2:	9803      	ldr	r0, [sp, #12]
 80043a4:	f7ff ff6c 	bl	8004280 <__ssputs_r>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d100      	bne.n	80043ae <_svfiprintf_r+0x6a>
 80043ac:	e0ae      	b.n	800450c <_svfiprintf_r+0x1c8>
 80043ae:	6962      	ldr	r2, [r4, #20]
 80043b0:	9b05      	ldr	r3, [sp, #20]
 80043b2:	4694      	mov	ip, r2
 80043b4:	4463      	add	r3, ip
 80043b6:	6163      	str	r3, [r4, #20]
 80043b8:	782b      	ldrb	r3, [r5, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d100      	bne.n	80043c0 <_svfiprintf_r+0x7c>
 80043be:	e0a5      	b.n	800450c <_svfiprintf_r+0x1c8>
 80043c0:	2201      	movs	r2, #1
 80043c2:	2300      	movs	r3, #0
 80043c4:	4252      	negs	r2, r2
 80043c6:	6062      	str	r2, [r4, #4]
 80043c8:	a904      	add	r1, sp, #16
 80043ca:	3254      	adds	r2, #84	; 0x54
 80043cc:	1852      	adds	r2, r2, r1
 80043ce:	1c6e      	adds	r6, r5, #1
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	60e3      	str	r3, [r4, #12]
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	7013      	strb	r3, [r2, #0]
 80043d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80043da:	2205      	movs	r2, #5
 80043dc:	7831      	ldrb	r1, [r6, #0]
 80043de:	4854      	ldr	r0, [pc, #336]	; (8004530 <_svfiprintf_r+0x1ec>)
 80043e0:	f000 fa32 	bl	8004848 <memchr>
 80043e4:	1c75      	adds	r5, r6, #1
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d11f      	bne.n	800442a <_svfiprintf_r+0xe6>
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	06d3      	lsls	r3, r2, #27
 80043ee:	d504      	bpl.n	80043fa <_svfiprintf_r+0xb6>
 80043f0:	2353      	movs	r3, #83	; 0x53
 80043f2:	a904      	add	r1, sp, #16
 80043f4:	185b      	adds	r3, r3, r1
 80043f6:	2120      	movs	r1, #32
 80043f8:	7019      	strb	r1, [r3, #0]
 80043fa:	0713      	lsls	r3, r2, #28
 80043fc:	d504      	bpl.n	8004408 <_svfiprintf_r+0xc4>
 80043fe:	2353      	movs	r3, #83	; 0x53
 8004400:	a904      	add	r1, sp, #16
 8004402:	185b      	adds	r3, r3, r1
 8004404:	212b      	movs	r1, #43	; 0x2b
 8004406:	7019      	strb	r1, [r3, #0]
 8004408:	7833      	ldrb	r3, [r6, #0]
 800440a:	2b2a      	cmp	r3, #42	; 0x2a
 800440c:	d016      	beq.n	800443c <_svfiprintf_r+0xf8>
 800440e:	0035      	movs	r5, r6
 8004410:	2100      	movs	r1, #0
 8004412:	200a      	movs	r0, #10
 8004414:	68e3      	ldr	r3, [r4, #12]
 8004416:	782a      	ldrb	r2, [r5, #0]
 8004418:	1c6e      	adds	r6, r5, #1
 800441a:	3a30      	subs	r2, #48	; 0x30
 800441c:	2a09      	cmp	r2, #9
 800441e:	d94e      	bls.n	80044be <_svfiprintf_r+0x17a>
 8004420:	2900      	cmp	r1, #0
 8004422:	d111      	bne.n	8004448 <_svfiprintf_r+0x104>
 8004424:	e017      	b.n	8004456 <_svfiprintf_r+0x112>
 8004426:	3501      	adds	r5, #1
 8004428:	e7b0      	b.n	800438c <_svfiprintf_r+0x48>
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <_svfiprintf_r+0x1ec>)
 800442c:	6822      	ldr	r2, [r4, #0]
 800442e:	1ac0      	subs	r0, r0, r3
 8004430:	2301      	movs	r3, #1
 8004432:	4083      	lsls	r3, r0
 8004434:	4313      	orrs	r3, r2
 8004436:	002e      	movs	r6, r5
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	e7ce      	b.n	80043da <_svfiprintf_r+0x96>
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	1d19      	adds	r1, r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	9107      	str	r1, [sp, #28]
 8004444:	2b00      	cmp	r3, #0
 8004446:	db01      	blt.n	800444c <_svfiprintf_r+0x108>
 8004448:	930b      	str	r3, [sp, #44]	; 0x2c
 800444a:	e004      	b.n	8004456 <_svfiprintf_r+0x112>
 800444c:	425b      	negs	r3, r3
 800444e:	60e3      	str	r3, [r4, #12]
 8004450:	2302      	movs	r3, #2
 8004452:	4313      	orrs	r3, r2
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	782b      	ldrb	r3, [r5, #0]
 8004458:	2b2e      	cmp	r3, #46	; 0x2e
 800445a:	d10a      	bne.n	8004472 <_svfiprintf_r+0x12e>
 800445c:	786b      	ldrb	r3, [r5, #1]
 800445e:	2b2a      	cmp	r3, #42	; 0x2a
 8004460:	d135      	bne.n	80044ce <_svfiprintf_r+0x18a>
 8004462:	9b07      	ldr	r3, [sp, #28]
 8004464:	3502      	adds	r5, #2
 8004466:	1d1a      	adds	r2, r3, #4
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	9207      	str	r2, [sp, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db2b      	blt.n	80044c8 <_svfiprintf_r+0x184>
 8004470:	9309      	str	r3, [sp, #36]	; 0x24
 8004472:	4e30      	ldr	r6, [pc, #192]	; (8004534 <_svfiprintf_r+0x1f0>)
 8004474:	2203      	movs	r2, #3
 8004476:	0030      	movs	r0, r6
 8004478:	7829      	ldrb	r1, [r5, #0]
 800447a:	f000 f9e5 	bl	8004848 <memchr>
 800447e:	2800      	cmp	r0, #0
 8004480:	d006      	beq.n	8004490 <_svfiprintf_r+0x14c>
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	1b80      	subs	r0, r0, r6
 8004486:	4083      	lsls	r3, r0
 8004488:	6822      	ldr	r2, [r4, #0]
 800448a:	3501      	adds	r5, #1
 800448c:	4313      	orrs	r3, r2
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	7829      	ldrb	r1, [r5, #0]
 8004492:	2206      	movs	r2, #6
 8004494:	4828      	ldr	r0, [pc, #160]	; (8004538 <_svfiprintf_r+0x1f4>)
 8004496:	1c6e      	adds	r6, r5, #1
 8004498:	7621      	strb	r1, [r4, #24]
 800449a:	f000 f9d5 	bl	8004848 <memchr>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d03c      	beq.n	800451c <_svfiprintf_r+0x1d8>
 80044a2:	4b26      	ldr	r3, [pc, #152]	; (800453c <_svfiprintf_r+0x1f8>)
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d125      	bne.n	80044f4 <_svfiprintf_r+0x1b0>
 80044a8:	2207      	movs	r2, #7
 80044aa:	9b07      	ldr	r3, [sp, #28]
 80044ac:	3307      	adds	r3, #7
 80044ae:	4393      	bics	r3, r2
 80044b0:	3308      	adds	r3, #8
 80044b2:	9307      	str	r3, [sp, #28]
 80044b4:	6963      	ldr	r3, [r4, #20]
 80044b6:	9a04      	ldr	r2, [sp, #16]
 80044b8:	189b      	adds	r3, r3, r2
 80044ba:	6163      	str	r3, [r4, #20]
 80044bc:	e765      	b.n	800438a <_svfiprintf_r+0x46>
 80044be:	4343      	muls	r3, r0
 80044c0:	0035      	movs	r5, r6
 80044c2:	2101      	movs	r1, #1
 80044c4:	189b      	adds	r3, r3, r2
 80044c6:	e7a6      	b.n	8004416 <_svfiprintf_r+0xd2>
 80044c8:	2301      	movs	r3, #1
 80044ca:	425b      	negs	r3, r3
 80044cc:	e7d0      	b.n	8004470 <_svfiprintf_r+0x12c>
 80044ce:	2300      	movs	r3, #0
 80044d0:	200a      	movs	r0, #10
 80044d2:	001a      	movs	r2, r3
 80044d4:	3501      	adds	r5, #1
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	7829      	ldrb	r1, [r5, #0]
 80044da:	1c6e      	adds	r6, r5, #1
 80044dc:	3930      	subs	r1, #48	; 0x30
 80044de:	2909      	cmp	r1, #9
 80044e0:	d903      	bls.n	80044ea <_svfiprintf_r+0x1a6>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0c5      	beq.n	8004472 <_svfiprintf_r+0x12e>
 80044e6:	9209      	str	r2, [sp, #36]	; 0x24
 80044e8:	e7c3      	b.n	8004472 <_svfiprintf_r+0x12e>
 80044ea:	4342      	muls	r2, r0
 80044ec:	0035      	movs	r5, r6
 80044ee:	2301      	movs	r3, #1
 80044f0:	1852      	adds	r2, r2, r1
 80044f2:	e7f1      	b.n	80044d8 <_svfiprintf_r+0x194>
 80044f4:	ab07      	add	r3, sp, #28
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	003a      	movs	r2, r7
 80044fa:	0021      	movs	r1, r4
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_svfiprintf_r+0x1fc>)
 80044fe:	9803      	ldr	r0, [sp, #12]
 8004500:	e000      	b.n	8004504 <_svfiprintf_r+0x1c0>
 8004502:	bf00      	nop
 8004504:	9004      	str	r0, [sp, #16]
 8004506:	9b04      	ldr	r3, [sp, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	d1d3      	bne.n	80044b4 <_svfiprintf_r+0x170>
 800450c:	89bb      	ldrh	r3, [r7, #12]
 800450e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004510:	065b      	lsls	r3, r3, #25
 8004512:	d400      	bmi.n	8004516 <_svfiprintf_r+0x1d2>
 8004514:	e72d      	b.n	8004372 <_svfiprintf_r+0x2e>
 8004516:	2001      	movs	r0, #1
 8004518:	4240      	negs	r0, r0
 800451a:	e72a      	b.n	8004372 <_svfiprintf_r+0x2e>
 800451c:	ab07      	add	r3, sp, #28
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	003a      	movs	r2, r7
 8004522:	0021      	movs	r1, r4
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <_svfiprintf_r+0x1fc>)
 8004526:	9803      	ldr	r0, [sp, #12]
 8004528:	f000 f87c 	bl	8004624 <_printf_i>
 800452c:	e7ea      	b.n	8004504 <_svfiprintf_r+0x1c0>
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	08004bc8 	.word	0x08004bc8
 8004534:	08004bce 	.word	0x08004bce
 8004538:	08004bd2 	.word	0x08004bd2
 800453c:	00000000 	.word	0x00000000
 8004540:	08004281 	.word	0x08004281

08004544 <_printf_common>:
 8004544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004546:	0015      	movs	r5, r2
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	688a      	ldr	r2, [r1, #8]
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	000c      	movs	r4, r1
 8004550:	9000      	str	r0, [sp, #0]
 8004552:	4293      	cmp	r3, r2
 8004554:	da00      	bge.n	8004558 <_printf_common+0x14>
 8004556:	0013      	movs	r3, r2
 8004558:	0022      	movs	r2, r4
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	3243      	adds	r2, #67	; 0x43
 800455e:	7812      	ldrb	r2, [r2, #0]
 8004560:	2a00      	cmp	r2, #0
 8004562:	d001      	beq.n	8004568 <_printf_common+0x24>
 8004564:	3301      	adds	r3, #1
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	069b      	lsls	r3, r3, #26
 800456c:	d502      	bpl.n	8004574 <_printf_common+0x30>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	3302      	adds	r3, #2
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	2306      	movs	r3, #6
 8004578:	0017      	movs	r7, r2
 800457a:	401f      	ands	r7, r3
 800457c:	421a      	tst	r2, r3
 800457e:	d027      	beq.n	80045d0 <_printf_common+0x8c>
 8004580:	0023      	movs	r3, r4
 8004582:	3343      	adds	r3, #67	; 0x43
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	4193      	sbcs	r3, r2
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	0692      	lsls	r2, r2, #26
 800458e:	d430      	bmi.n	80045f2 <_printf_common+0xae>
 8004590:	0022      	movs	r2, r4
 8004592:	9901      	ldr	r1, [sp, #4]
 8004594:	9800      	ldr	r0, [sp, #0]
 8004596:	9e08      	ldr	r6, [sp, #32]
 8004598:	3243      	adds	r2, #67	; 0x43
 800459a:	47b0      	blx	r6
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d025      	beq.n	80045ec <_printf_common+0xa8>
 80045a0:	2306      	movs	r3, #6
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	682a      	ldr	r2, [r5, #0]
 80045a6:	68e1      	ldr	r1, [r4, #12]
 80045a8:	2500      	movs	r5, #0
 80045aa:	4003      	ands	r3, r0
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d103      	bne.n	80045b8 <_printf_common+0x74>
 80045b0:	1a8d      	subs	r5, r1, r2
 80045b2:	43eb      	mvns	r3, r5
 80045b4:	17db      	asrs	r3, r3, #31
 80045b6:	401d      	ands	r5, r3
 80045b8:	68a3      	ldr	r3, [r4, #8]
 80045ba:	6922      	ldr	r2, [r4, #16]
 80045bc:	4293      	cmp	r3, r2
 80045be:	dd01      	ble.n	80045c4 <_printf_common+0x80>
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	18ed      	adds	r5, r5, r3
 80045c4:	2700      	movs	r7, #0
 80045c6:	42bd      	cmp	r5, r7
 80045c8:	d120      	bne.n	800460c <_printf_common+0xc8>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e010      	b.n	80045f0 <_printf_common+0xac>
 80045ce:	3701      	adds	r7, #1
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	682a      	ldr	r2, [r5, #0]
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	42bb      	cmp	r3, r7
 80045d8:	ddd2      	ble.n	8004580 <_printf_common+0x3c>
 80045da:	0022      	movs	r2, r4
 80045dc:	2301      	movs	r3, #1
 80045de:	9901      	ldr	r1, [sp, #4]
 80045e0:	9800      	ldr	r0, [sp, #0]
 80045e2:	9e08      	ldr	r6, [sp, #32]
 80045e4:	3219      	adds	r2, #25
 80045e6:	47b0      	blx	r6
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d1f0      	bne.n	80045ce <_printf_common+0x8a>
 80045ec:	2001      	movs	r0, #1
 80045ee:	4240      	negs	r0, r0
 80045f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045f2:	2030      	movs	r0, #48	; 0x30
 80045f4:	18e1      	adds	r1, r4, r3
 80045f6:	3143      	adds	r1, #67	; 0x43
 80045f8:	7008      	strb	r0, [r1, #0]
 80045fa:	0021      	movs	r1, r4
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	3145      	adds	r1, #69	; 0x45
 8004600:	7809      	ldrb	r1, [r1, #0]
 8004602:	18a2      	adds	r2, r4, r2
 8004604:	3243      	adds	r2, #67	; 0x43
 8004606:	3302      	adds	r3, #2
 8004608:	7011      	strb	r1, [r2, #0]
 800460a:	e7c1      	b.n	8004590 <_printf_common+0x4c>
 800460c:	0022      	movs	r2, r4
 800460e:	2301      	movs	r3, #1
 8004610:	9901      	ldr	r1, [sp, #4]
 8004612:	9800      	ldr	r0, [sp, #0]
 8004614:	9e08      	ldr	r6, [sp, #32]
 8004616:	321a      	adds	r2, #26
 8004618:	47b0      	blx	r6
 800461a:	1c43      	adds	r3, r0, #1
 800461c:	d0e6      	beq.n	80045ec <_printf_common+0xa8>
 800461e:	3701      	adds	r7, #1
 8004620:	e7d1      	b.n	80045c6 <_printf_common+0x82>
	...

08004624 <_printf_i>:
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	b08b      	sub	sp, #44	; 0x2c
 8004628:	9206      	str	r2, [sp, #24]
 800462a:	000a      	movs	r2, r1
 800462c:	3243      	adds	r2, #67	; 0x43
 800462e:	9307      	str	r3, [sp, #28]
 8004630:	9005      	str	r0, [sp, #20]
 8004632:	9204      	str	r2, [sp, #16]
 8004634:	7e0a      	ldrb	r2, [r1, #24]
 8004636:	000c      	movs	r4, r1
 8004638:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800463a:	2a78      	cmp	r2, #120	; 0x78
 800463c:	d807      	bhi.n	800464e <_printf_i+0x2a>
 800463e:	2a62      	cmp	r2, #98	; 0x62
 8004640:	d809      	bhi.n	8004656 <_printf_i+0x32>
 8004642:	2a00      	cmp	r2, #0
 8004644:	d100      	bne.n	8004648 <_printf_i+0x24>
 8004646:	e0c1      	b.n	80047cc <_printf_i+0x1a8>
 8004648:	2a58      	cmp	r2, #88	; 0x58
 800464a:	d100      	bne.n	800464e <_printf_i+0x2a>
 800464c:	e08c      	b.n	8004768 <_printf_i+0x144>
 800464e:	0026      	movs	r6, r4
 8004650:	3642      	adds	r6, #66	; 0x42
 8004652:	7032      	strb	r2, [r6, #0]
 8004654:	e022      	b.n	800469c <_printf_i+0x78>
 8004656:	0010      	movs	r0, r2
 8004658:	3863      	subs	r0, #99	; 0x63
 800465a:	2815      	cmp	r0, #21
 800465c:	d8f7      	bhi.n	800464e <_printf_i+0x2a>
 800465e:	f7fb fd5b 	bl	8000118 <__gnu_thumb1_case_shi>
 8004662:	0016      	.short	0x0016
 8004664:	fff6001f 	.word	0xfff6001f
 8004668:	fff6fff6 	.word	0xfff6fff6
 800466c:	001ffff6 	.word	0x001ffff6
 8004670:	fff6fff6 	.word	0xfff6fff6
 8004674:	fff6fff6 	.word	0xfff6fff6
 8004678:	003600a8 	.word	0x003600a8
 800467c:	fff6009a 	.word	0xfff6009a
 8004680:	00b9fff6 	.word	0x00b9fff6
 8004684:	0036fff6 	.word	0x0036fff6
 8004688:	fff6fff6 	.word	0xfff6fff6
 800468c:	009e      	.short	0x009e
 800468e:	0026      	movs	r6, r4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	3642      	adds	r6, #66	; 0x42
 8004694:	1d11      	adds	r1, r2, #4
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	7033      	strb	r3, [r6, #0]
 800469c:	2301      	movs	r3, #1
 800469e:	e0a7      	b.n	80047f0 <_printf_i+0x1cc>
 80046a0:	6808      	ldr	r0, [r1, #0]
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	1d0a      	adds	r2, r1, #4
 80046a6:	0605      	lsls	r5, r0, #24
 80046a8:	d50b      	bpl.n	80046c2 <_printf_i+0x9e>
 80046aa:	680d      	ldr	r5, [r1, #0]
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	da03      	bge.n	80046ba <_printf_i+0x96>
 80046b2:	232d      	movs	r3, #45	; 0x2d
 80046b4:	9a04      	ldr	r2, [sp, #16]
 80046b6:	426d      	negs	r5, r5
 80046b8:	7013      	strb	r3, [r2, #0]
 80046ba:	4b61      	ldr	r3, [pc, #388]	; (8004840 <_printf_i+0x21c>)
 80046bc:	270a      	movs	r7, #10
 80046be:	9303      	str	r3, [sp, #12]
 80046c0:	e01b      	b.n	80046fa <_printf_i+0xd6>
 80046c2:	680d      	ldr	r5, [r1, #0]
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	0641      	lsls	r1, r0, #25
 80046c8:	d5f1      	bpl.n	80046ae <_printf_i+0x8a>
 80046ca:	b22d      	sxth	r5, r5
 80046cc:	e7ef      	b.n	80046ae <_printf_i+0x8a>
 80046ce:	680d      	ldr	r5, [r1, #0]
 80046d0:	6819      	ldr	r1, [r3, #0]
 80046d2:	1d08      	adds	r0, r1, #4
 80046d4:	6018      	str	r0, [r3, #0]
 80046d6:	062e      	lsls	r6, r5, #24
 80046d8:	d501      	bpl.n	80046de <_printf_i+0xba>
 80046da:	680d      	ldr	r5, [r1, #0]
 80046dc:	e003      	b.n	80046e6 <_printf_i+0xc2>
 80046de:	066d      	lsls	r5, r5, #25
 80046e0:	d5fb      	bpl.n	80046da <_printf_i+0xb6>
 80046e2:	680d      	ldr	r5, [r1, #0]
 80046e4:	b2ad      	uxth	r5, r5
 80046e6:	4b56      	ldr	r3, [pc, #344]	; (8004840 <_printf_i+0x21c>)
 80046e8:	2708      	movs	r7, #8
 80046ea:	9303      	str	r3, [sp, #12]
 80046ec:	2a6f      	cmp	r2, #111	; 0x6f
 80046ee:	d000      	beq.n	80046f2 <_printf_i+0xce>
 80046f0:	3702      	adds	r7, #2
 80046f2:	0023      	movs	r3, r4
 80046f4:	2200      	movs	r2, #0
 80046f6:	3343      	adds	r3, #67	; 0x43
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	6863      	ldr	r3, [r4, #4]
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db03      	blt.n	800470a <_printf_i+0xe6>
 8004702:	2204      	movs	r2, #4
 8004704:	6821      	ldr	r1, [r4, #0]
 8004706:	4391      	bics	r1, r2
 8004708:	6021      	str	r1, [r4, #0]
 800470a:	2d00      	cmp	r5, #0
 800470c:	d102      	bne.n	8004714 <_printf_i+0xf0>
 800470e:	9e04      	ldr	r6, [sp, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <_printf_i+0x10a>
 8004714:	9e04      	ldr	r6, [sp, #16]
 8004716:	0028      	movs	r0, r5
 8004718:	0039      	movs	r1, r7
 800471a:	f7fb fd8d 	bl	8000238 <__aeabi_uidivmod>
 800471e:	9b03      	ldr	r3, [sp, #12]
 8004720:	3e01      	subs	r6, #1
 8004722:	5c5b      	ldrb	r3, [r3, r1]
 8004724:	7033      	strb	r3, [r6, #0]
 8004726:	002b      	movs	r3, r5
 8004728:	0005      	movs	r5, r0
 800472a:	429f      	cmp	r7, r3
 800472c:	d9f3      	bls.n	8004716 <_printf_i+0xf2>
 800472e:	2f08      	cmp	r7, #8
 8004730:	d109      	bne.n	8004746 <_printf_i+0x122>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	07db      	lsls	r3, r3, #31
 8004736:	d506      	bpl.n	8004746 <_printf_i+0x122>
 8004738:	6863      	ldr	r3, [r4, #4]
 800473a:	6922      	ldr	r2, [r4, #16]
 800473c:	4293      	cmp	r3, r2
 800473e:	dc02      	bgt.n	8004746 <_printf_i+0x122>
 8004740:	2330      	movs	r3, #48	; 0x30
 8004742:	3e01      	subs	r6, #1
 8004744:	7033      	strb	r3, [r6, #0]
 8004746:	9b04      	ldr	r3, [sp, #16]
 8004748:	1b9b      	subs	r3, r3, r6
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	9b07      	ldr	r3, [sp, #28]
 800474e:	0021      	movs	r1, r4
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	9805      	ldr	r0, [sp, #20]
 8004754:	9b06      	ldr	r3, [sp, #24]
 8004756:	aa09      	add	r2, sp, #36	; 0x24
 8004758:	f7ff fef4 	bl	8004544 <_printf_common>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d14c      	bne.n	80047fa <_printf_i+0x1d6>
 8004760:	2001      	movs	r0, #1
 8004762:	4240      	negs	r0, r0
 8004764:	b00b      	add	sp, #44	; 0x2c
 8004766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004768:	3145      	adds	r1, #69	; 0x45
 800476a:	700a      	strb	r2, [r1, #0]
 800476c:	4a34      	ldr	r2, [pc, #208]	; (8004840 <_printf_i+0x21c>)
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	6821      	ldr	r1, [r4, #0]
 8004774:	ca20      	ldmia	r2!, {r5}
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	0608      	lsls	r0, r1, #24
 800477a:	d516      	bpl.n	80047aa <_printf_i+0x186>
 800477c:	07cb      	lsls	r3, r1, #31
 800477e:	d502      	bpl.n	8004786 <_printf_i+0x162>
 8004780:	2320      	movs	r3, #32
 8004782:	4319      	orrs	r1, r3
 8004784:	6021      	str	r1, [r4, #0]
 8004786:	2710      	movs	r7, #16
 8004788:	2d00      	cmp	r5, #0
 800478a:	d1b2      	bne.n	80046f2 <_printf_i+0xce>
 800478c:	2320      	movs	r3, #32
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	439a      	bics	r2, r3
 8004792:	6022      	str	r2, [r4, #0]
 8004794:	e7ad      	b.n	80046f2 <_printf_i+0xce>
 8004796:	2220      	movs	r2, #32
 8004798:	6809      	ldr	r1, [r1, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	6022      	str	r2, [r4, #0]
 800479e:	0022      	movs	r2, r4
 80047a0:	2178      	movs	r1, #120	; 0x78
 80047a2:	3245      	adds	r2, #69	; 0x45
 80047a4:	7011      	strb	r1, [r2, #0]
 80047a6:	4a27      	ldr	r2, [pc, #156]	; (8004844 <_printf_i+0x220>)
 80047a8:	e7e1      	b.n	800476e <_printf_i+0x14a>
 80047aa:	0648      	lsls	r0, r1, #25
 80047ac:	d5e6      	bpl.n	800477c <_printf_i+0x158>
 80047ae:	b2ad      	uxth	r5, r5
 80047b0:	e7e4      	b.n	800477c <_printf_i+0x158>
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	680d      	ldr	r5, [r1, #0]
 80047b6:	1d10      	adds	r0, r2, #4
 80047b8:	6949      	ldr	r1, [r1, #20]
 80047ba:	6018      	str	r0, [r3, #0]
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	062e      	lsls	r6, r5, #24
 80047c0:	d501      	bpl.n	80047c6 <_printf_i+0x1a2>
 80047c2:	6019      	str	r1, [r3, #0]
 80047c4:	e002      	b.n	80047cc <_printf_i+0x1a8>
 80047c6:	066d      	lsls	r5, r5, #25
 80047c8:	d5fb      	bpl.n	80047c2 <_printf_i+0x19e>
 80047ca:	8019      	strh	r1, [r3, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	9e04      	ldr	r6, [sp, #16]
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	e7bb      	b.n	800474c <_printf_i+0x128>
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	1d11      	adds	r1, r2, #4
 80047d8:	6019      	str	r1, [r3, #0]
 80047da:	6816      	ldr	r6, [r2, #0]
 80047dc:	2100      	movs	r1, #0
 80047de:	0030      	movs	r0, r6
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	f000 f831 	bl	8004848 <memchr>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d001      	beq.n	80047ee <_printf_i+0x1ca>
 80047ea:	1b80      	subs	r0, r0, r6
 80047ec:	6060      	str	r0, [r4, #4]
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	6123      	str	r3, [r4, #16]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9a04      	ldr	r2, [sp, #16]
 80047f6:	7013      	strb	r3, [r2, #0]
 80047f8:	e7a8      	b.n	800474c <_printf_i+0x128>
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	0032      	movs	r2, r6
 80047fe:	9906      	ldr	r1, [sp, #24]
 8004800:	9805      	ldr	r0, [sp, #20]
 8004802:	9d07      	ldr	r5, [sp, #28]
 8004804:	47a8      	blx	r5
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d0aa      	beq.n	8004760 <_printf_i+0x13c>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	079b      	lsls	r3, r3, #30
 800480e:	d415      	bmi.n	800483c <_printf_i+0x218>
 8004810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004812:	68e0      	ldr	r0, [r4, #12]
 8004814:	4298      	cmp	r0, r3
 8004816:	daa5      	bge.n	8004764 <_printf_i+0x140>
 8004818:	0018      	movs	r0, r3
 800481a:	e7a3      	b.n	8004764 <_printf_i+0x140>
 800481c:	0022      	movs	r2, r4
 800481e:	2301      	movs	r3, #1
 8004820:	9906      	ldr	r1, [sp, #24]
 8004822:	9805      	ldr	r0, [sp, #20]
 8004824:	9e07      	ldr	r6, [sp, #28]
 8004826:	3219      	adds	r2, #25
 8004828:	47b0      	blx	r6
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d098      	beq.n	8004760 <_printf_i+0x13c>
 800482e:	3501      	adds	r5, #1
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	42ab      	cmp	r3, r5
 8004838:	dcf0      	bgt.n	800481c <_printf_i+0x1f8>
 800483a:	e7e9      	b.n	8004810 <_printf_i+0x1ec>
 800483c:	2500      	movs	r5, #0
 800483e:	e7f7      	b.n	8004830 <_printf_i+0x20c>
 8004840:	08004bd9 	.word	0x08004bd9
 8004844:	08004bea 	.word	0x08004bea

08004848 <memchr>:
 8004848:	b2c9      	uxtb	r1, r1
 800484a:	1882      	adds	r2, r0, r2
 800484c:	4290      	cmp	r0, r2
 800484e:	d101      	bne.n	8004854 <memchr+0xc>
 8004850:	2000      	movs	r0, #0
 8004852:	4770      	bx	lr
 8004854:	7803      	ldrb	r3, [r0, #0]
 8004856:	428b      	cmp	r3, r1
 8004858:	d0fb      	beq.n	8004852 <memchr+0xa>
 800485a:	3001      	adds	r0, #1
 800485c:	e7f6      	b.n	800484c <memchr+0x4>

0800485e <memmove>:
 800485e:	b510      	push	{r4, lr}
 8004860:	4288      	cmp	r0, r1
 8004862:	d902      	bls.n	800486a <memmove+0xc>
 8004864:	188b      	adds	r3, r1, r2
 8004866:	4298      	cmp	r0, r3
 8004868:	d303      	bcc.n	8004872 <memmove+0x14>
 800486a:	2300      	movs	r3, #0
 800486c:	e007      	b.n	800487e <memmove+0x20>
 800486e:	5c8b      	ldrb	r3, [r1, r2]
 8004870:	5483      	strb	r3, [r0, r2]
 8004872:	3a01      	subs	r2, #1
 8004874:	d2fb      	bcs.n	800486e <memmove+0x10>
 8004876:	bd10      	pop	{r4, pc}
 8004878:	5ccc      	ldrb	r4, [r1, r3]
 800487a:	54c4      	strb	r4, [r0, r3]
 800487c:	3301      	adds	r3, #1
 800487e:	429a      	cmp	r2, r3
 8004880:	d1fa      	bne.n	8004878 <memmove+0x1a>
 8004882:	e7f8      	b.n	8004876 <memmove+0x18>

08004884 <_free_r>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	0005      	movs	r5, r0
 8004888:	2900      	cmp	r1, #0
 800488a:	d010      	beq.n	80048ae <_free_r+0x2a>
 800488c:	1f0c      	subs	r4, r1, #4
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	da00      	bge.n	8004896 <_free_r+0x12>
 8004894:	18e4      	adds	r4, r4, r3
 8004896:	0028      	movs	r0, r5
 8004898:	f000 f918 	bl	8004acc <__malloc_lock>
 800489c:	4a1d      	ldr	r2, [pc, #116]	; (8004914 <_free_r+0x90>)
 800489e:	6813      	ldr	r3, [r2, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <_free_r+0x2c>
 80048a4:	6063      	str	r3, [r4, #4]
 80048a6:	6014      	str	r4, [r2, #0]
 80048a8:	0028      	movs	r0, r5
 80048aa:	f000 f917 	bl	8004adc <__malloc_unlock>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	42a3      	cmp	r3, r4
 80048b2:	d908      	bls.n	80048c6 <_free_r+0x42>
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	1860      	adds	r0, r4, r1
 80048b8:	4283      	cmp	r3, r0
 80048ba:	d1f3      	bne.n	80048a4 <_free_r+0x20>
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	1841      	adds	r1, r0, r1
 80048c2:	6021      	str	r1, [r4, #0]
 80048c4:	e7ee      	b.n	80048a4 <_free_r+0x20>
 80048c6:	001a      	movs	r2, r3
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_free_r+0x4e>
 80048ce:	42a3      	cmp	r3, r4
 80048d0:	d9f9      	bls.n	80048c6 <_free_r+0x42>
 80048d2:	6811      	ldr	r1, [r2, #0]
 80048d4:	1850      	adds	r0, r2, r1
 80048d6:	42a0      	cmp	r0, r4
 80048d8:	d10b      	bne.n	80048f2 <_free_r+0x6e>
 80048da:	6820      	ldr	r0, [r4, #0]
 80048dc:	1809      	adds	r1, r1, r0
 80048de:	1850      	adds	r0, r2, r1
 80048e0:	6011      	str	r1, [r2, #0]
 80048e2:	4283      	cmp	r3, r0
 80048e4:	d1e0      	bne.n	80048a8 <_free_r+0x24>
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	1841      	adds	r1, r0, r1
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	6053      	str	r3, [r2, #4]
 80048f0:	e7da      	b.n	80048a8 <_free_r+0x24>
 80048f2:	42a0      	cmp	r0, r4
 80048f4:	d902      	bls.n	80048fc <_free_r+0x78>
 80048f6:	230c      	movs	r3, #12
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	e7d5      	b.n	80048a8 <_free_r+0x24>
 80048fc:	6821      	ldr	r1, [r4, #0]
 80048fe:	1860      	adds	r0, r4, r1
 8004900:	4283      	cmp	r3, r0
 8004902:	d103      	bne.n	800490c <_free_r+0x88>
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	1841      	adds	r1, r0, r1
 800490a:	6021      	str	r1, [r4, #0]
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	6054      	str	r4, [r2, #4]
 8004910:	e7ca      	b.n	80048a8 <_free_r+0x24>
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	20000370 	.word	0x20000370

08004918 <sbrk_aligned>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4e0f      	ldr	r6, [pc, #60]	; (8004958 <sbrk_aligned+0x40>)
 800491c:	000d      	movs	r5, r1
 800491e:	6831      	ldr	r1, [r6, #0]
 8004920:	0004      	movs	r4, r0
 8004922:	2900      	cmp	r1, #0
 8004924:	d102      	bne.n	800492c <sbrk_aligned+0x14>
 8004926:	f000 f8bf 	bl	8004aa8 <_sbrk_r>
 800492a:	6030      	str	r0, [r6, #0]
 800492c:	0029      	movs	r1, r5
 800492e:	0020      	movs	r0, r4
 8004930:	f000 f8ba 	bl	8004aa8 <_sbrk_r>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d00a      	beq.n	800494e <sbrk_aligned+0x36>
 8004938:	2303      	movs	r3, #3
 800493a:	1cc5      	adds	r5, r0, #3
 800493c:	439d      	bics	r5, r3
 800493e:	42a8      	cmp	r0, r5
 8004940:	d007      	beq.n	8004952 <sbrk_aligned+0x3a>
 8004942:	1a29      	subs	r1, r5, r0
 8004944:	0020      	movs	r0, r4
 8004946:	f000 f8af 	bl	8004aa8 <_sbrk_r>
 800494a:	1c43      	adds	r3, r0, #1
 800494c:	d101      	bne.n	8004952 <sbrk_aligned+0x3a>
 800494e:	2501      	movs	r5, #1
 8004950:	426d      	negs	r5, r5
 8004952:	0028      	movs	r0, r5
 8004954:	bd70      	pop	{r4, r5, r6, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	20000374 	.word	0x20000374

0800495c <_malloc_r>:
 800495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800495e:	2203      	movs	r2, #3
 8004960:	1ccb      	adds	r3, r1, #3
 8004962:	4393      	bics	r3, r2
 8004964:	3308      	adds	r3, #8
 8004966:	0006      	movs	r6, r0
 8004968:	001f      	movs	r7, r3
 800496a:	2b0c      	cmp	r3, #12
 800496c:	d232      	bcs.n	80049d4 <_malloc_r+0x78>
 800496e:	270c      	movs	r7, #12
 8004970:	42b9      	cmp	r1, r7
 8004972:	d831      	bhi.n	80049d8 <_malloc_r+0x7c>
 8004974:	0030      	movs	r0, r6
 8004976:	f000 f8a9 	bl	8004acc <__malloc_lock>
 800497a:	4d32      	ldr	r5, [pc, #200]	; (8004a44 <_malloc_r+0xe8>)
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	001c      	movs	r4, r3
 8004980:	2c00      	cmp	r4, #0
 8004982:	d12e      	bne.n	80049e2 <_malloc_r+0x86>
 8004984:	0039      	movs	r1, r7
 8004986:	0030      	movs	r0, r6
 8004988:	f7ff ffc6 	bl	8004918 <sbrk_aligned>
 800498c:	0004      	movs	r4, r0
 800498e:	1c43      	adds	r3, r0, #1
 8004990:	d11e      	bne.n	80049d0 <_malloc_r+0x74>
 8004992:	682c      	ldr	r4, [r5, #0]
 8004994:	0025      	movs	r5, r4
 8004996:	2d00      	cmp	r5, #0
 8004998:	d14a      	bne.n	8004a30 <_malloc_r+0xd4>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0029      	movs	r1, r5
 800499e:	18e3      	adds	r3, r4, r3
 80049a0:	0030      	movs	r0, r6
 80049a2:	9301      	str	r3, [sp, #4]
 80049a4:	f000 f880 	bl	8004aa8 <_sbrk_r>
 80049a8:	9b01      	ldr	r3, [sp, #4]
 80049aa:	4283      	cmp	r3, r0
 80049ac:	d143      	bne.n	8004a36 <_malloc_r+0xda>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	3703      	adds	r7, #3
 80049b2:	1aff      	subs	r7, r7, r3
 80049b4:	2303      	movs	r3, #3
 80049b6:	439f      	bics	r7, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	2f0c      	cmp	r7, #12
 80049bc:	d200      	bcs.n	80049c0 <_malloc_r+0x64>
 80049be:	270c      	movs	r7, #12
 80049c0:	0039      	movs	r1, r7
 80049c2:	0030      	movs	r0, r6
 80049c4:	f7ff ffa8 	bl	8004918 <sbrk_aligned>
 80049c8:	1c43      	adds	r3, r0, #1
 80049ca:	d034      	beq.n	8004a36 <_malloc_r+0xda>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	19df      	adds	r7, r3, r7
 80049d0:	6027      	str	r7, [r4, #0]
 80049d2:	e013      	b.n	80049fc <_malloc_r+0xa0>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dacb      	bge.n	8004970 <_malloc_r+0x14>
 80049d8:	230c      	movs	r3, #12
 80049da:	2500      	movs	r5, #0
 80049dc:	6033      	str	r3, [r6, #0]
 80049de:	0028      	movs	r0, r5
 80049e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1bd1      	subs	r1, r2, r7
 80049e6:	d420      	bmi.n	8004a2a <_malloc_r+0xce>
 80049e8:	290b      	cmp	r1, #11
 80049ea:	d917      	bls.n	8004a1c <_malloc_r+0xc0>
 80049ec:	19e2      	adds	r2, r4, r7
 80049ee:	6027      	str	r7, [r4, #0]
 80049f0:	42a3      	cmp	r3, r4
 80049f2:	d111      	bne.n	8004a18 <_malloc_r+0xbc>
 80049f4:	602a      	str	r2, [r5, #0]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	6011      	str	r1, [r2, #0]
 80049fa:	6053      	str	r3, [r2, #4]
 80049fc:	0030      	movs	r0, r6
 80049fe:	0025      	movs	r5, r4
 8004a00:	f000 f86c 	bl	8004adc <__malloc_unlock>
 8004a04:	2207      	movs	r2, #7
 8004a06:	350b      	adds	r5, #11
 8004a08:	1d23      	adds	r3, r4, #4
 8004a0a:	4395      	bics	r5, r2
 8004a0c:	1aea      	subs	r2, r5, r3
 8004a0e:	429d      	cmp	r5, r3
 8004a10:	d0e5      	beq.n	80049de <_malloc_r+0x82>
 8004a12:	1b5b      	subs	r3, r3, r5
 8004a14:	50a3      	str	r3, [r4, r2]
 8004a16:	e7e2      	b.n	80049de <_malloc_r+0x82>
 8004a18:	605a      	str	r2, [r3, #4]
 8004a1a:	e7ec      	b.n	80049f6 <_malloc_r+0x9a>
 8004a1c:	6862      	ldr	r2, [r4, #4]
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	d101      	bne.n	8004a26 <_malloc_r+0xca>
 8004a22:	602a      	str	r2, [r5, #0]
 8004a24:	e7ea      	b.n	80049fc <_malloc_r+0xa0>
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	e7e8      	b.n	80049fc <_malloc_r+0xa0>
 8004a2a:	0023      	movs	r3, r4
 8004a2c:	6864      	ldr	r4, [r4, #4]
 8004a2e:	e7a7      	b.n	8004980 <_malloc_r+0x24>
 8004a30:	002c      	movs	r4, r5
 8004a32:	686d      	ldr	r5, [r5, #4]
 8004a34:	e7af      	b.n	8004996 <_malloc_r+0x3a>
 8004a36:	230c      	movs	r3, #12
 8004a38:	0030      	movs	r0, r6
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	f000 f84e 	bl	8004adc <__malloc_unlock>
 8004a40:	e7cd      	b.n	80049de <_malloc_r+0x82>
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	20000370 	.word	0x20000370

08004a48 <_realloc_r>:
 8004a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4a:	0007      	movs	r7, r0
 8004a4c:	000e      	movs	r6, r1
 8004a4e:	0014      	movs	r4, r2
 8004a50:	2900      	cmp	r1, #0
 8004a52:	d105      	bne.n	8004a60 <_realloc_r+0x18>
 8004a54:	0011      	movs	r1, r2
 8004a56:	f7ff ff81 	bl	800495c <_malloc_r>
 8004a5a:	0005      	movs	r5, r0
 8004a5c:	0028      	movs	r0, r5
 8004a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a60:	2a00      	cmp	r2, #0
 8004a62:	d103      	bne.n	8004a6c <_realloc_r+0x24>
 8004a64:	f7ff ff0e 	bl	8004884 <_free_r>
 8004a68:	0025      	movs	r5, r4
 8004a6a:	e7f7      	b.n	8004a5c <_realloc_r+0x14>
 8004a6c:	f000 f83e 	bl	8004aec <_malloc_usable_size_r>
 8004a70:	9001      	str	r0, [sp, #4]
 8004a72:	4284      	cmp	r4, r0
 8004a74:	d803      	bhi.n	8004a7e <_realloc_r+0x36>
 8004a76:	0035      	movs	r5, r6
 8004a78:	0843      	lsrs	r3, r0, #1
 8004a7a:	42a3      	cmp	r3, r4
 8004a7c:	d3ee      	bcc.n	8004a5c <_realloc_r+0x14>
 8004a7e:	0021      	movs	r1, r4
 8004a80:	0038      	movs	r0, r7
 8004a82:	f7ff ff6b 	bl	800495c <_malloc_r>
 8004a86:	1e05      	subs	r5, r0, #0
 8004a88:	d0e8      	beq.n	8004a5c <_realloc_r+0x14>
 8004a8a:	9b01      	ldr	r3, [sp, #4]
 8004a8c:	0022      	movs	r2, r4
 8004a8e:	429c      	cmp	r4, r3
 8004a90:	d900      	bls.n	8004a94 <_realloc_r+0x4c>
 8004a92:	001a      	movs	r2, r3
 8004a94:	0031      	movs	r1, r6
 8004a96:	0028      	movs	r0, r5
 8004a98:	f7ff fbc0 	bl	800421c <memcpy>
 8004a9c:	0031      	movs	r1, r6
 8004a9e:	0038      	movs	r0, r7
 8004aa0:	f7ff fef0 	bl	8004884 <_free_r>
 8004aa4:	e7da      	b.n	8004a5c <_realloc_r+0x14>
	...

08004aa8 <_sbrk_r>:
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	b570      	push	{r4, r5, r6, lr}
 8004aac:	4d06      	ldr	r5, [pc, #24]	; (8004ac8 <_sbrk_r+0x20>)
 8004aae:	0004      	movs	r4, r0
 8004ab0:	0008      	movs	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fc fb72 	bl	800119c <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d103      	bne.n	8004ac4 <_sbrk_r+0x1c>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d000      	beq.n	8004ac4 <_sbrk_r+0x1c>
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	20000378 	.word	0x20000378

08004acc <__malloc_lock>:
 8004acc:	b510      	push	{r4, lr}
 8004ace:	4802      	ldr	r0, [pc, #8]	; (8004ad8 <__malloc_lock+0xc>)
 8004ad0:	f000 f814 	bl	8004afc <__retarget_lock_acquire_recursive>
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	2000037c 	.word	0x2000037c

08004adc <__malloc_unlock>:
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <__malloc_unlock+0xc>)
 8004ae0:	f000 f80d 	bl	8004afe <__retarget_lock_release_recursive>
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	2000037c 	.word	0x2000037c

08004aec <_malloc_usable_size_r>:
 8004aec:	1f0b      	subs	r3, r1, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	1f18      	subs	r0, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da01      	bge.n	8004afa <_malloc_usable_size_r+0xe>
 8004af6:	580b      	ldr	r3, [r1, r0]
 8004af8:	18c0      	adds	r0, r0, r3
 8004afa:	4770      	bx	lr

08004afc <__retarget_lock_acquire_recursive>:
 8004afc:	4770      	bx	lr

08004afe <__retarget_lock_release_recursive>:
 8004afe:	4770      	bx	lr

08004b00 <_init>:
 8004b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b06:	bc08      	pop	{r3}
 8004b08:	469e      	mov	lr, r3
 8004b0a:	4770      	bx	lr

08004b0c <_fini>:
 8004b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b12:	bc08      	pop	{r3}
 8004b14:	469e      	mov	lr, r3
 8004b16:	4770      	bx	lr
